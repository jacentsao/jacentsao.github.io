<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silence of Heart</title>
  <subtitle>最怕彷徨无前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-18T12:16:45.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JacenTsao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建跨平台go编译环境</title>
    <link href="http://yoursite.com/2017/01/18/%E6%90%AD%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0go%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2017/01/18/搭建跨平台go编译环境/</id>
    <published>2017-01-18T12:12:15.000Z</published>
    <updated>2017-01-18T12:16:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是为了搭建golang跨平台环境,从而实现一套golang代码运行在多重环境(OSX,Linux,Android,iOS,Windows),实现跨平台共享代码,简化开发流程.</p>
<ol>
<li>安装Docker   </li>
<li>安装golang</li>
<li>安装xgo镜像及编译指令</li>
<li>配置环境变量</li>
</ol>
<a id="more"></a>
<h4 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1. 安装docker"></a>1. 安装docker</h4><p>针对Mac和Windows可以直接下载安装包进行安装,其他系统可以使用命令行进行安装.<a href="https://www.docker.com/products/docker#/mac" target="_blank" rel="external">参考链接</a>,最后通过docker version 指令进行查看</p>
<pre><code># Jacen at EveeedeMacBook-Pro.local in ~ [10:51:52] docker version
Client:
Version:      1.12.5
API version:  1.24
Go version:   go1.6.4
Git commit:   7392c3b
Built:        Fri Dec 16 06:14:34 2016
OS/Arch:      darwin/amd64

Server:
Version:      1.12.5
API version:  1.24
Go version:   go1.6.4
Git commit:   7392c3b
Built:        Fri Dec 16 06:14:34 2016
OS/Arch:      linux/amd64
</code></pre><h4 id="2-安装golang"><a href="#2-安装golang" class="headerlink" title="2. 安装golang"></a>2. 安装golang</h4><p>同样的在Windows和Mac下面都有一键安装包,针对其他系统也是通过命令行进行安装.<a href="https://golang.org/dl/" target="_blank" rel="external">参考链接</a>,安装好以后还需要进行环境变量的配置.</p>
<p>在mac系统和Linux系统下面,Windows配置环境变量</p>
<pre><code>export GOROOT=&quot;/usr/local/go&quot;
export GOPATH=&quot;你的工作目录&quot;  //这里主要是影响到后面需要安装的xgo
</code></pre><p>再执行go env查看是否配置成功:</p>
<pre><code>GOARCH=&quot;amd64&quot;
GOBIN=&quot;&quot;
GOEXE=&quot;&quot;
GOHOSTARCH=&quot;amd64&quot;
GOHOSTOS=&quot;darwin&quot;
GOOS=&quot;darwin&quot;
GOPATH=&quot;/Volumes/Work/go&quot;
GORACE=&quot;&quot;
GOROOT=&quot;/usr/local/go&quot;
GOTOOLDIR=&quot;/usr/local/go/pkg/tool/darwin_amd64&quot;
CC=&quot;clang&quot;
GOGCCFLAGS=&quot;-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/w4/75xgx41n2bb7mm3m0dxbp0d40000gn/T/go-build003828011=/tmp/go-build -gno-record-gcc-switches -fno-common&quot;
CXX=&quot;clang++&quot;
CGO_ENABLED=&quot;1&quot;
</code></pre><h4 id="3-安装xgo-docker镜像"><a href="#3-安装xgo-docker镜像" class="headerlink" title="3. 安装xgo docker镜像"></a>3. 安装xgo docker镜像</h4><p>xgo的docker镜像是我们真正的编译环境,<a href="https://github.com/karalabe/xgo" target="_blank" rel="external">Github地址</a></p>
<ol>
<li><p>安装xgo docker镜像,这个镜像大概4.xG,需要花较长的时间下载</p>
<p> docker pull karalabe/xgo-latest </p>
</li>
</ol>
<p>这里latest指的最新的编译环境,如果需要的话也可以指定安装具体版本的镜像,<a href="https://hub.docker.com/u/karalabe/" target="_blank" rel="external">在这里</a>,这个版本的差异主要是golang版本的不同,由于编译的时候可以指定golang版本进行编译,所以我们直接安装最新版本即可.</p>
<ol>
<li><p>安装xgo </p>
<p> go get github.com/karalabe/xgo</p>
</li>
</ol>
<p>安装xgo编译工具,这个工具封装了go build,简化了我们的操作.</p>
<h4 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a>4. 配置环境变量</h4><p>如果我们使用的是bash的话可以将环境变量配置到.bash_profile中,免去export的过程</p>
<h5 id="使用bash"><a href="#使用bash" class="headerlink" title="使用bash"></a>使用bash</h5><ol>
<li><p>在 ~ 目录下编辑.bash_profile 文件,在末尾添加</p>
<p> export GOPATH=”你的工作目录”<br> export GOROOT=”usr/local/go”<br> export PATH=$PATH:$GOPATH/bin<br> export GOROOT_BOOTSTRAP=$GOROOT</p>
</li>
<li>source .bash_profile使得配置文件生效</li>
</ol>
<h5 id="使用如zsh-shell程序"><a href="#使用如zsh-shell程序" class="headerlink" title="使用如zsh shell程序"></a>使用如zsh shell程序</h5><ol>
<li>在~ 目录下编辑.zshrc 文件,添加上面同样的文件</li>
<li>同上source生效</li>
</ol>
<h4 id="5-测试xgo交叉编译环境是否OK"><a href="#5-测试xgo交叉编译环境是否OK" class="headerlink" title="5. 测试xgo交叉编译环境是否OK"></a>5. 测试xgo交叉编译环境是否OK</h4><pre><code>$ cd $GOPATH/src       // If you have multiple (I have at least 3 in there), change into any, doesn&apos;t matter
$ mkdir xgo_test
$ cd xgo_test
$ echo -e &apos;package main\n import &quot;fmt&quot;\n func main(){\nfmt.Println(&quot;Hello&quot;)\n}&apos; &gt; main.go
$ xgo .
</code></pre><p>执行完上述命令后在当前目录查看是否有编译生成的可执行文件</p>
<h4 id="6-打包"><a href="#6-打包" class="headerlink" title="6. 打包"></a>6. 打包</h4><pre><code>  ~ xgo  /Volumes/Public\ Storage/go/src/zhjd()
  ~ xgo --targets=android-14/arm /Volumes/Storage/go/src/zhjd 指定生成Android端专用的会快很多很多,这里的14指的是最小支持SDK版本
Checking docker installation...
Client:
 Version:      1.12.3
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   6b644ec
 Built:        Wed Oct 26 23:26:11 2016
 OS/Arch:      darwin/amd64

Server:
 Version:      1.12.3
 API version:  1.24
 Go version:   go1.6.3
 Git commit:   6b644ec
 Built:        Wed Oct 26 23:26:11 2016
 OS/Arch:      linux/amd64

Checking for required docker image karalabe/xgo-latest... found.
Cross compiling zhjd...
Building locally zhjd...
Assembling toolchain for android-16/arm...
Bootstrapping android-16/arm...
Compiling for android-16/arm...
Assembling toolchain for android-16/386...
Bootstrapping android-16/386...
Compiling for android-16/386...
No API C header specified, skipping android-16/aar... 重点关注
Compiling for linux/amd64...
Compiling for linux/386...
Bootstrapping linux/arm-5...
Compiling for linux/arm-5...
Cleaning up Go runtime for linux/arm-5...
Bootstrapping linux/arm-6...
Compiling for linux/arm-6...
Cleaning up Go runtime for linux/arm-6...
Bootstrapping linux/arm-7...
Compiling for linux/arm-7...
Cleaning up Go runtime for linux/arm-7...
Compiling for linux/arm64...
Compiling for linux/mips64...
Compiling for linux/mips64le...
Compiling for windows-4.0/amd64...
Compiling for windows-4.0/386...
Compiling for darwin-10.6/amd64...
Compiling for darwin-10.6/386...
Bootstrapping ios-5.0/arm-7...
# runtime/cgo
ldid.cpp(602): _assert(): Swap(mach_header_-&gt;filetype) == MH_EXECUTE || Swap(mach_header_-&gt;filetype) == MH_DYLIB || Swap(mach_header_-&gt;filetype) == MH_BUNDLE
# net
ldid.cpp(602): _assert(): Swap(mach_header_-&gt;filetype) == MH_EXECUTE || Swap(mach_header_-&gt;filetype) == MH_DYLIB || Swap(mach_header_-&gt;filetype) == MH_BUNDLE
# os/user
ldid.cpp(602): _assert(): Swap(mach_header_-&gt;filetype) == MH_EXECUTE || Swap(mach_header_-&gt;filetype) == MH_DYLIB || Swap(mach_header_-&gt;filetype) == MH_BUNDLE
Compiling for ios-5.0/arm-7...
# github.com/mattn/go-sqlite3
ldid.cpp(602): _assert(): Swap(mach_header_-&gt;filetype) == MH_EXECUTE || Swap(mach_header_-&gt;filetype) == MH_DYLIB || Swap(mach_header_-&gt;filetype) == MH_BUNDLE
# github.com/mattn/go-sqlite3
ldid.cpp(602): _assert(): Swap(mach_header_-&gt;filetype) == MH_EXECUTE || Swap(mach_header_-&gt;filetype) == MH_DYLIB || Swap(mach_header_-&gt;filetype) == MH_BUNDLE
Cleaning up Go runtime for ios-5.0/arm-7...
Bootstrapping ios-5.0/arm64...
# runtime/cgo
ldid.cpp(602): _assert(): Swap(mach_header_-&gt;filetype) == MH_EXECUTE || Swap(mach_header_-&gt;filetype) == MH_DYLIB || Swap(mach_header_-&gt;filetype) == MH_BUNDLE
# net
ldid.cpp(602): _assert(): Swap(mach_header_-&gt;filetype) == MH_EXECUTE || Swap(mach_header_-&gt;filetype) == MH_DYLIB || Swap(mach_header_-&gt;filetype) == MH_BUNDLE
# os/user
ldid.cpp(602): _assert(): Swap(mach_header_-&gt;filetype) == MH_EXECUTE || Swap(mach_header_-&gt;filetype) == MH_DYLIB || Swap(mach_header_-&gt;filetype) == MH_BUNDLE
Compiling for ios-5.0/arm64...
# github.com/mattn/go-sqlite3
ldid.cpp(602): _assert(): Swap(mach_header_-&gt;filetype) == MH_EXECUTE || Swap(mach_header_-&gt;filetype) == MH_DYLIB || Swap(mach_header_-&gt;filetype) == MH_BUNDLE
# github.com/mattn/go-sqlite3
ldid.cpp(602): _assert(): Swap(mach_header_-&gt;filetype) == MH_EXECUTE || Swap(mach_header_-&gt;filetype) == MH_DYLIB || Swap(mach_header_-&gt;filetype) == MH_BUNDLE
Cleaning up Go runtime for ios-5.0/arm64...
Cleaning up build environment...
</code></pre><p>查看编译生成的文件</p>
<pre><code>➜  all ls -al
total 427872
drwxr-xr-x  21 silence  staff       714 Dec 29 11:37 .
drwxr-xr-x+ 29 silence  staff       986 Dec 29 11:37 ..
-rw-r--r--@  1 silence  staff      6148 Dec 29 11:37 .DS_Store
-rwxr-xr-x   1 silence  staff  14633608 Dec 29 11:27 zhjd-android-16-386
drwxr-xr-x   5 silence  staff       170 Dec 29 11:27 zhjd-android-16-aar
-rwxr-xr-x   1 silence  staff  14705872 Dec 29 11:26 zhjd-android-16-arm
-rwxr-xr-x   1 silence  staff  10418780 Dec 29 11:32 zhjd-darwin-10.6-386
-rwxr-xr-x   1 silence  staff  11578172 Dec 29 11:31 zhjd-darwin-10.6-amd64
-rwxr-xr-x   1 silence  staff  11224720 Dec 29 11:34 zhjd-ios-5.0-arm64
-rwxr-xr-x   1 silence  staff  10569184 Dec 29 11:33 zhjd-ios-5.0-armv7
drwxrwxrwx   3 silence  staff       102 Dec 29 11:35 zhjd-ios-5.0-framework
-rwxr-xr-x   1 silence  staff  14611432 Dec 29 11:28 zhjd-linux-386
-rwxr-xr-x   1 silence  staff  17246480 Dec 29 11:27 zhjd-linux-amd64
-rwxr-xr-x   1 silence  staff  13034956 Dec 29 11:28 zhjd-linux-arm-5
-rwxr-xr-x   1 silence  staff  12965808 Dec 29 11:29 zhjd-linux-arm-6
-rwxr-xr-x   1 silence  staff  12939788 Dec 29 11:29 zhjd-linux-arm-7
-rwxr-xr-x   1 silence  staff  17075720 Dec 29 11:29 zhjd-linux-arm64
-rwxr-xr-x   1 silence  staff  18700376 Dec 29 11:30 zhjd-linux-mips64
-rwxr-xr-x   1 silence  staff  18699640 Dec 29 11:31 zhjd-linux-mips64le
-rwxr-xr-x   1 silence  staff   9734407 Dec 29 11:31 zhjd-windows-4.0-386.exe
-rwxr-xr-x   1 silence  staff  10889885 Dec 29 11:31 zhjd-windows-4.0-amd64.exe
</code></pre><p>可以发现,针对不同平台生成了不同类型的文件.Android支持生成aar库文件,iOS支持生成Framework库文件</p>
<h3 id="平台实测"><a href="#平台实测" class="headerlink" title="平台实测"></a>平台实测</h3><h4 id="Android端测试"><a href="#Android端测试" class="headerlink" title="Android端测试"></a>Android端测试</h4><ol>
<li><p>推送到设备中,之所以不直接推送到app目录下是因为权限问题,这里如果提示adb命令不存在同样的也要把Android SDK中的adb命令配置到环境变量中</p>
<pre><code>//直接推送到app目录下会有权限问题

adb push zhjd-android-16-arm data/data/com,kingdee.zhihuiji 
adb: error: failed to copy &apos;zhjd-android-16-arm&apos; to &apos;data/data/    com.kingdee.zhihuiji&apos;: Permission denied

//所以推送到该目录下

adb push zhjd-android-16-arm data/local/tmp                
[100%] data/local/tmp/zhjd-android-16-arm
</code></pre></li>
</ol>
<ol>
<li>切换到Android设备并执行该文件,这里只能使用已经<strong>root的设备</strong></li>
</ol>
<pre><code>adb shell 进入手机命令行
su 切换超级用户
cd /data/local/tmp 
./zhjd-android-16-arm
</code></pre><p>最后在终端会输出可执行文件的执行结果</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是为了搭建golang跨平台环境,从而实现一套golang代码运行在多重环境(OSX,Linux,Android,iOS,Windows),实现跨平台共享代码,简化开发流程.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装Docker   &lt;/li&gt;
&lt;li&gt;安装golang&lt;/li&gt;
&lt;li&gt;安装xgo镜像及编译指令&lt;/li&gt;
&lt;li&gt;配置环境变量&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
  </entry>
  
  <entry>
    <title>Android Library中的R文件不是常量</title>
    <link href="http://yoursite.com/2017/01/18/Android-Library%E4%B8%AD%E7%9A%84R%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/01/18/Android-Library中的R文件/</id>
    <published>2017-01-18T11:59:40.000Z</published>
    <updated>2017-01-18T12:02:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间跟项目老大提了个请求,就是将<a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">Butterknife</a>加入到我们的项目中,结合<a href="https://github.com/avast/android-butterknife-zelezny" target="_blank" rel="external">android-butterknife-zelezny</a>使用,这样子不仅代码简洁,也可以减少一些findViewById的繁琐过程,提升我们的开发效率.效果如下图,是不是特别简洁.</p>
<p><img src="https://github.com/avast/android-butterknife-zelezny/raw/master/img/zelezny_animated.gif" alt="MacDown Screenshot"><br><a id="more"></a><br>经过老大的同意以后,我开始加依赖,下载自动注解插件,进行自动生成代码,一气呵成,神清气爽.But问题立马就暴露出来了,代码如下:</p>
<pre><code>  @OnClick({R2.id.m_button_pattern, R2.id.m_button_password})
      public void onClick(View view) {
    Log.d(&quot;xx&quot;, &quot;========onClick=========&quot;);
    Intent intent = new Intent();
    switch (view.getId()) {
        case R2.id.m_button_pattern:
            intent.setClass(getApplicationContext(),MainActivity.class);
            Log.d(&quot;xx&quot;, &quot;========onClick====MainActivity=====&quot;);
            break;
        case R2.id.m_button_password:
            intent.setClass(getApplicationContext(),SetPasswordLockActivity.class);
            Log.d(&quot;xx&quot;, &quot;========onClick=====SetPasswordLockActivity====&quot;);
            break;
    }
    this.startActivity(intent);
}
</code></pre><p>然后问题就出现了.由于我们的项目是在Library中开发(蛋疼得不行,很多限制),问题就是出在这里,请看下面的代码:</p>
<pre><code>//Library中生成的R文件
public static int activity_open_exit=0x7f04000d;
//Module中生成的R文件
public static final int abc_fade_out=0x7f050001;
</code></pre><p>所以在Library中无法使用switch语句进而影响到了Butterknife的使用.</p>
<p>至于为什么在Library中无法使用参考<a href="http://tools.android.com/tips/non-constant-fields" target="_blank" rel="external">谷歌文档</a>.经过阅读我们知道从ADT14开始Library中的R文件才从静态常量变为非常量.因为如果在多个Library中可能出现id冲突的问题.在ADT14以前则采用的是将所有的资源文件和相关的代码重新随着主项目一起重新编译,导致编译速度过慢.因此,从ADT14开始就变成了非常量的id了:</p>
<pre><code>int id = view.getId();
switch (id) {
    case R.id.button1:
        action1();
        break;
    case R.id.button2:
        action2();
        break;
    case R.id.button3:
        action3();
        break;
}
</code></pre><p>Android Studio也提供了一键转换的快捷方式如下图:</p>
<p><img src="http://tools.android.com/_/rsrc/1319062860174/tips/non-constant-fields/convert2.png" alt="ConvertSwitch"></p>
<p>然后就变成了如下所示的代码了.</p>
<pre><code>int id = view.getId();
if (id == R.id.button1) {
    action1();
} else if (id == R.id.button2) {
    action2();
} else if (id == R.id.button3) {
    action3();
}
</code></pre><p> 因为找资料的原因又去看了下Github的Butterknife, JakeWharton大神终于在大家的强烈请求下更新了支持Library, <a href="https://github.com/JakeWharton/butterknife/blob/master/CHANGELOG.md" target="_blank" rel="external">更新日志</a>;</p>
<pre><code>Version 8.2.0 (2016-07-10)

New: Support for library projects. Requires application of a Butter Knife Gradle plugin. See README for details.
New: Generated code now emits R references instead of raw integer IDs.
Fix: @OnPageChange listener binding now uses the &apos;add&apos;/&apos;remove&apos; methods on ViewPager instead of &apos;set&apos;.
</code></pre><p>算是意料之外的惊喜吧,下周一就把Butterknife加入我们的项目!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间跟项目老大提了个请求,就是将&lt;a href=&quot;https://github.com/JakeWharton/butterknife&quot;&gt;Butterknife&lt;/a&gt;加入到我们的项目中,结合&lt;a href=&quot;https://github.com/avast/android-butterknife-zelezny&quot;&gt;android-butterknife-zelezny&lt;/a&gt;使用,这样子不仅代码简洁,也可以减少一些findViewById的繁琐过程,提升我们的开发效率.效果如下图,是不是特别简洁.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/avast/android-butterknife-zelezny/raw/master/img/zelezny_animated.gif&quot; alt=&quot;MacDown Screenshot&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建gomobile开发环境</title>
    <link href="http://yoursite.com/2017/01/18/%E6%90%AD%E5%BB%BAgomobile%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2017/01/18/搭建gomobile开发环境/</id>
    <published>2017-01-18T07:24:21.000Z</published>
    <updated>2017-01-18T12:26:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>gomobile是谷歌开发的一种跨平台技术解决方案,可以针对iOS和Android平台进行直接开发或者进行Library开发.<br><a id="more"></a></p>
<h3 id="配置gomobile开发环境"><a href="#配置gomobile开发环境" class="headerlink" title="配置gomobile开发环境"></a>配置gomobile开发环境</h3><ol>
<li>设置终端http,https代理</li>
<li>配置git,及环境变量</li>
<li>配置golang及gopath环境及环境变量</li>
<li>配置gomobile及环境变量</li>
</ol>
<h3 id="gomobile的优缺点"><a href="#gomobile的优缺点" class="headerlink" title="gomobile的优缺点"></a>gomobile的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>直接构建用于ios的framework文件,可以直接调用生成的类</li>
<li>直接构建用于Android的aar文件,使用jni直接调用</li>
<li>统一三端规则,避免重复开发和一些错误</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点:"></a>缺点:</h4><h5 id="数据类型限制"><a href="#数据类型限制" class="headerlink" title="数据类型限制"></a>数据类型限制</h5><ul>
<li>int and float;</li>
<li>string and boolean;</li>
<li>byte[]. The current implementation doesn’t allow to use []byte as the     function argument (<a href="https://golang.org/issues/12113" target="_blank" rel="external">https://golang.org/issues/12113</a>);</li>
<li>function has to return only supported types, it may not return the result, it may return one or two types wherein the second type should be an error;</li>
<li>interfaces could be used if they are exported to files of any supported type;</li>
<li>struct type, only in case all fields meet the constraints.</li>
</ul>
<p>]</p>
<h3 id="环境搭建流程"><a href="#环境搭建流程" class="headerlink" title="环境搭建流程"></a>环境搭建流程</h3><h4 id="官方教程"><a href="#官方教程" class="headerlink" title="官方教程"></a>官方教程</h4><ol>
<li><a href="https://godoc.org/golang.org/x/mobile/cmd/gomobile" target="_blank" rel="external">官网地址</a>,安装gomobile,当然首先得安装golang才能够使用go命令</li>
</ol>
<pre><code>$ go get golang.org/x/mobile/cmd/gomobile
$ gomobile init
//然后就可以通过gomobile指令查看了
$ gomobile
</code></pre><ol>
<li>前面地址进不去的话有个<a href="https://github.com/golang/mobile" target="_blank" rel="external">Github地址</a></li>
</ol>
<h4 id="使用Github镜像安装"><a href="#使用Github镜像安装" class="headerlink" title="使用Github镜像安装"></a>使用Github镜像安装</h4><p>由于使用谷歌的官网资源需要在命令行翻墙,比较麻烦,所以直接使用Github的镜像进行安装.</p>
<pre><code>$ mkdir -p $GOPATH/src/github.com/golang
$ cd $GOPATH/src/github.com/golang
$ git clone https://github.com/golang/mobile.git
$ mkdir -p $GOPATH/src/golang.org/x    
$ cp -r $GOPATH/src/github.com/golang/mobile $GOPATH/src/golang.org/x 
$ cd $GOPATH/src/golang.org/x/mobile/cmd/gomobile
$ go install  //会在$GOPATH/src/bin 目录下生成gomobile  
$ gomobile init //安装NDK之类的
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;gomobile是谷歌开发的一种跨平台技术解决方案,可以针对iOS和Android平台进行直接开发或者进行Library开发.&lt;br&gt;
    
    </summary>
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
  </entry>
  
  <entry>
    <title>常用的hexo指令</title>
    <link href="http://yoursite.com/2017/01/18/%E5%B8%B8%E7%94%A8%E7%9A%84hexo%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/01/18/常用的hexo指令/</id>
    <published>2017-01-18T06:15:47.000Z</published>
    <updated>2017-01-18T08:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>hexo new post &quot;article title&quot;  //创建新的post,创建目录为: /source/_posts/
hexo d  //deploy 发布
hexo s //
hexo clean
hexo s --debug


hexo new page categories
hexo new page about
hexo new page commonweal
hexo new page sitemap
hexo new page tags
hexo new page archives
hexo new page tags
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;hexo new post &amp;quot;article title&amp;quot;  //创建新的post,创建目录为: /source/_posts/
hexo d  //deploy 发布
hexo s //
hexo clean
hexo s --debu
    
    </summary>
    
      <category term="博客编写" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac OS X 配置环境变量</title>
    <link href="http://yoursite.com/2017/01/16/article-title/"/>
    <id>http://yoursite.com/2017/01/16/article-title/</id>
    <published>2017-01-16T14:15:59.000Z</published>
    <updated>2017-01-18T12:03:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>/etc/bashrc 是针对系统所有用户的全局变量，只有root用户才能修改这两个文件，对一般用户来说是他们是只读的。一般用户要想修改它们，可以在命令前加sudo，意思是以Root身份执行，比如：sudo vi /etc/profile  ，然后按照提示输入密码即可。(以上是针对使用默认shell的用户,如果使用zsh的话则对应的修改文件是.zshrc)</p>
<p>因此，对于一般用户而言，通常我们建议去修改~/.bash_profile来设置环境变量，它是用户级的设置，只对当前用户有效。<br>操作步骤:</p>
<pre><code>1、打开Terminal（终端）
2、输入：vi ~/.bash_profile
3、设置PATH：export PATH=/usr/local/mysql/bin:$PATH
4、输入：:wq    //保存并退出vi
5、修改立即生效：source ~/.bash_profile
6、查看环境变量的值：echo $PATH
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;/etc/bashrc 是针对系统所有用户的全局变量，只有root用户才能修改这两个文件，对一般用户来说是他们是只读的。一般用户要想修改它们，可以在命令前加sudo，意思是以Root身份执行，比如：sudo vi /etc/profile  ，然后按照提示输入密码即可。(以
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/01/16/hello-world/"/>
    <id>http://yoursite.com/2017/01/16/hello-world/</id>
    <published>2017-01-16T14:11:26.000Z</published>
    <updated>2017-01-18T06:03:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
