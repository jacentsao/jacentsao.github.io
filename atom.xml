<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silence of Heart</title>
  
  <subtitle>最怕彷徨无前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-13T01:07:06.165Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JacenTsao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo-使用nginx部署</title>
    <link href="http://yoursite.com/2018/12/13/hexo-%E4%BD%BF%E7%94%A8nginx%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/12/13/hexo-使用nginx部署/</id>
    <published>2018-12-13T00:38:25.000Z</published>
    <updated>2018-12-13T01:07:06.165Z</updated>
    
    <content type="html"><![CDATA[<p>通常使用hexo在本地调试运行的时候我们运行<code>hexo s</code>即可，如果我们想要部署博客供人访问的时候就要采用别的方式了。我这里选择的是使用nginx部署：</p><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>安装nginx可以参考<a href="http://www.runoob.com/linux/nginx-install-setup.html" target="_blank" rel="noopener">菜鸟教程</a></p><h4 id="使用nginx配置hexo"><a href="#使用nginx配置hexo" class="headerlink" title="使用nginx配置hexo"></a>使用nginx配置hexo</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>   /usr/local/blog/jacentsao.github.io/.deploy_git;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获得免费的https证书"><a href="#获得免费的https证书" class="headerlink" title="获得免费的https证书"></a>获得免费的https证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yum install epel-release</span><br><span class="line"><span class="meta">$</span> yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br><span class="line"><span class="meta">$</span> yum install python2-certbot-nginx</span><br><span class="line"><span class="meta">$</span> yum install -y certbot</span><br><span class="line">//获取证书</span><br><span class="line"><span class="meta">$</span> certbot certonly --standalone -d example.com --agree-tos --email yourmail</span><br></pre></td></tr></table></figure><h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">       <span class="attribute">server_name</span>  localhost;</span><br><span class="line">       <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">       <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/yourdomain/fullchain.pem;</span><br><span class="line">       <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/yourdomain/privkey.pem;</span><br><span class="line">       .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动更新证书"><a href="#自动更新证书" class="headerlink" title="自动更新证书"></a>自动更新证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//自动刷新证书（证书有效期90天）</span><br><span class="line"><span class="meta">$</span> 10 1 * */2 * certbot renew --pre-hook "systemctl stop nginx" --post-hook "systemctl start nginx"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常使用hexo在本地调试运行的时候我们运行&lt;code&gt;hexo s&lt;/code&gt;即可，如果我们想要部署博客供人访问的时候就要采用别的方式了。我这里选择的是使用nginx部署：&lt;/p&gt;
&lt;h4 id=&quot;安装nginx&quot;&gt;&lt;a href=&quot;#安装nginx&quot; class=&quot;h
      
    
    </summary>
    
      <category term="博客编写" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>自由行-搭建ss服务器</title>
    <link href="http://yoursite.com/2018/12/12/%E8%87%AA%E7%94%B1%E8%A1%8C-%E6%90%AD%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2018/12/12/自由行-搭建ss服务器/</id>
    <published>2018-12-12T11:32:02.000Z</published>
    <updated>2018-12-12T11:38:23.977Z</updated>
    
    <content type="html"><![CDATA[<p>详细安装配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> curl -O https://copr.fedorainfracloud.org/coprs/librehat/shadowsocks/repo/epel-7/librehat-shadowsocks-epel-7.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> yum install -y shadowsocks-libev</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> python get-pip.py</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> pip install --upgrade pip</span><br><span class="line"></span><br><span class="line">//修改配置，主要是设置端口和密码</span><br><span class="line"><span class="meta">$</span> vim /etc/shadowsocks.json</span><br><span class="line">    &#123;</span><br><span class="line">    "server": "0.0.0.0",</span><br><span class="line">    "local_address": "127.0.0.1",</span><br><span class="line">    "local_port": 1080,</span><br><span class="line">    "port_password": &#123;</span><br><span class="line">        "26888": "yourpassword",</span><br><span class="line">        "26889": "yourpassword"</span><br><span class="line">    &#125;,</span><br><span class="line">    "timeout": 600,</span><br><span class="line">    "method": "aes-256-cfb"</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//添加ss系统服务</span><br><span class="line"><span class="meta">$</span> vim /etc/systemd/system/shadowsocks.service</span><br><span class="line">    [Unit]</span><br><span class="line">    Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">    [Service]</span><br><span class="line">    TimeoutStartSec=0</span><br><span class="line">    ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">    [Install]</span><br><span class="line">    WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">//启动ss服务   </span><br><span class="line"><span class="meta">$</span>  systemctl enable shadowsocks</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;详细安装配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
      
    
    </summary>
    
      <category term="自由行" scheme="http://yoursite.com/categories/%E8%87%AA%E7%94%B1%E8%A1%8C/"/>
    
    
      <category term="自由行" scheme="http://yoursite.com/tags/%E8%87%AA%E7%94%B1%E8%A1%8C/"/>
    
      <category term="shadowsocks" scheme="http://yoursite.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Java - 搭建RocketMQ开发环境</title>
    <link href="http://yoursite.com/2018/12/04/Java-%E6%90%AD%E5%BB%BARocketMQ%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/12/04/Java-搭建RocketMQ开发环境/</id>
    <published>2018-12-04T08:34:43.000Z</published>
    <updated>2018-12-05T01:22:53.925Z</updated>
    
    <content type="html"><![CDATA[<p>今天尝试搭建一下RocketMQ开发环境，特此记录下搭建流程和搭建过程中遇到的一些问题。</p><p>首先根据官网的<a href="https://rocketmq.apache.org/docs/quick-start/" target="_blank" rel="noopener">教程</a>搭建。</p><h3 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul><li>64bit OS, Linux/Unix/Mac is recommended;</li><li>64bit JDK 1.8+;</li><li>Maven 3.2.x;</li><li>Git;</li><li>4g+ free disk for Broker server</li></ul><h4 id="下载，构建"><a href="#下载，构建" class="headerlink" title="下载，构建"></a>下载，构建</h4><p>下载源码或者release的版本，下载地址: <a href="https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.3.2/rocketmq-all-4.3.2-source-release.zip" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.3.2/rocketmq-all-4.3.2-source-release.zip</a></p><p>如果下载的是源码的话需要使用maven进行编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">&gt;</span> unzip rocketmq-all-4.3.2-source-release.zip</span><br><span class="line"><span class="meta">&gt;</span> cd rocketmq-all-4.3.2/</span><br><span class="line"><span class="meta">&gt;</span> mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line"><span class="meta">&gt;</span> cd distribution/target/apache-rocketmq</span><br></pre></td></tr></table></figure><p>如果不是源码的话直接进入解压后的文件即可。</p><h4 id="启动Name-Server"><a href="#启动Name-Server" class="headerlink" title="启动Name Server"></a>启动Name Server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> nohup sh bin/mqnamesrv &amp;</span><br><span class="line"><span class="meta">&gt;</span> tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line">The Name Server boot success...</span><br><span class="line">以上是官网提供的示例。我遇到的情况是输出倒了当前目录下的nohup.out文件中，使用tail 或者vim确定Name Server是否正常启动</span><br></pre></td></tr></table></figure><h4 id="启动Broker"><a href="#启动Broker" class="headerlink" title="启动Broker"></a>启动Broker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class="line"><span class="meta">&gt;</span> tail -f ~/logs/rocketmqlogs/broker.log </span><br><span class="line">The broker[%s, 172.30.30.233:10911] boot success...</span><br><span class="line">同样的在nohub.out中查看</span><br></pre></td></tr></table></figure><h4 id="发送和接收消息"><a href="#发送和接收消息" class="headerlink" title="发送和接收消息"></a>发送和接收消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//告诉客户端需要发送到哪个服务端</span><br><span class="line"><span class="meta">&gt;</span> export NAMESRV_ADDR=localhost:9876</span><br><span class="line"><span class="meta">&gt;</span> sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId= ...</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br><span class="line"><span class="meta">ConsumeMessageThread_%</span>d Receive New Messages: [MessageExt...</span><br></pre></td></tr></table></figure><h4 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> sh bin/mqshutdown broker</span><br><span class="line">The mqbroker(36695) is running...</span><br><span class="line">Send shutdown request to mqbroker(36695) OK</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> sh bin/mqshutdown namesrv</span><br><span class="line">The mqnamesrv(36664) is running...</span><br><span class="line">Send shutdown request to mqnamesrv(36664) OK</span><br></pre></td></tr></table></figure><h3 id="简单的示例"><a href="#简单的示例" class="headerlink" title="简单的示例"></a>简单的示例</h3><p>官网地址<a href="https://rocketmq.apache.org/docs/simple-example/" target="_blank" rel="noopener">https://rocketmq.apache.org/docs/simple-example/</a></p><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h4><p>由于我们使用的是maven管理工具,gradle的依赖可以参考官网。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-发送同步消息"><a href="#2-1-发送同步消息" class="headerlink" title="2.1 发送同步消息"></a>2.1 发送同步消息</h4><p>同步消息适合于很多场景，例如重要消息的通知，SMS通知，SMS系统市场。其他都在官网，可以多多看看文档。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//Instantiate with a producer group name.</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span></span><br><span class="line">            DefaultMQProducer(<span class="string">"please_rename_unique_group_name"</span>);</span><br><span class="line">        <span class="comment">// Specify name server addresses.</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line">        <span class="comment">//Launch the instance.</span></span><br><span class="line">        producer.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//Create a message instance, specifying topic, tag and message body.</span></span><br><span class="line">            Message msg = <span class="keyword">new</span> Message(<span class="string">"TopicTest"</span> <span class="comment">/* Topic */</span>,</span><br><span class="line">                <span class="string">"TagA"</span> <span class="comment">/* Tag */</span>,</span><br><span class="line">                (<span class="string">"Hello RocketMQ "</span> +</span><br><span class="line">                    i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="comment">/* Message body */</span></span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//Call send message to deliver message to one of brokers.</span></span><br><span class="line">            SendResult sendResult = producer.send(msg);</span><br><span class="line">            System.out.printf(<span class="string">"%s%n"</span>, sendResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Shut down once the producer instance is not longer in use.</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, MQClientException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Instantiate with specified consumer group name.</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"please_rename_unique_group_name"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// Specify name server addresses.</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Subscribe one more more topics to consume.</span></span><br><span class="line">        consumer.subscribe(<span class="string">"TopicTest"</span>, <span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">// Register callback to execute on arrival of messages fetched from brokers.</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class="line"><span class="function"><span class="params">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">                System.out.printf(<span class="string">"%s Receive New Messages: %s %n"</span>, Thread.currentThread().getName(), msgs);</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Launch the consumer instance.</span></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"Consumer Started.%n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="1-error-39-Cannot-allocate-memory-39"><a href="#1-error-39-Cannot-allocate-memory-39" class="headerlink" title="1. error=&#39;Cannot allocate memory&#39;"></a>1. <code>error=&#39;Cannot allocate memory&#39;</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000005fb000000, 8589934592, 0) failed; error='Cannot allocate memory' (errno=12)</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"><span class="meta">#</span> Native memory allocation (malloc) failed to allocate 8589934592 bytes for committing reserved memory.</span><br><span class="line"><span class="meta">#</span> An error report file with more information is saved as:</span><br><span class="line"><span class="meta">#</span> /usr/local/mq/rocketmq-all-4.3.2-bin-release/hs_err_pid6845.log</span><br><span class="line">Unrecognized VM option 'MetaspaceSize=128m'</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will exit.</span><br></pre></td></tr></table></figure><p>将bin目录下的runbroker.sh的虚拟机配置调整如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn125m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span><br></pre></td></tr></table></figure><p>同样的如果nameserver有问题也要相应的进行调整。</p><h4 id="2-Exception-in-thread-quot-main-quot-org-apache-rocketmq-remoting-exception-RemotingTooMuchRequestException-sendDefaultImpl-call-timeout"><a href="#2-Exception-in-thread-quot-main-quot-org-apache-rocketmq-remoting-exception-RemotingTooMuchRequestException-sendDefaultImpl-call-timeout" class="headerlink" title="2. Exception in thread &quot;main&quot; org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout"></a>2. <code>Exception in thread &quot;main&quot; org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout</code></h4><p>由于RocktMQ没有绑定网卡ip导致，如果服务器有多网卡配置的时候，或者虚拟机。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//生成配置信息</span><br><span class="line">echo "brokerIP1=10.2.x.x" &gt; broker.properties</span><br><span class="line"></span><br><span class="line">//broker绑定ip</span><br><span class="line">nohup sh bin/mqbroker -n 10.2.x.x:9876 -c ./broker.properties autoCreateTopicEnable=true &amp;</span><br></pre></td></tr></table></figure></p><h4 id="3-Unrecognized-VM-option-39-MetaspaceSize-128m-39"><a href="#3-Unrecognized-VM-option-39-MetaspaceSize-128m-39" class="headerlink" title="3. Unrecognized VM option &#39;MetaspaceSize=128m&#39;"></a>3. <code>Unrecognized VM option &#39;MetaspaceSize=128m&#39;</code></h4><p>Java版本太低出现报错，此时需要升级到Java8，或者将该配置移除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unrecognized VM option 'MetaspaceSize=128m'</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br></pre></td></tr></table></figure><p>移除以后即：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn125m"</span><br></pre></td></tr></table></figure><h4 id="4-No-route-info-of-this-topic"><a href="#4-No-route-info-of-this-topic" class="headerlink" title="4. No route info of this topic"></a>4. <code>No route info of this topic</code></h4><pre><code>1. 请检查服务器端口是否是开放的2. 可以试一下关闭客户端的防火墙再去请求试试。3. 检查服务器是否有执行export NAMESRV_ADDR=localhost:9876</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天尝试搭建一下RocketMQ开发环境，特此记录下搭建流程和搭建过程中遇到的一些问题。&lt;/p&gt;
&lt;p&gt;首先根据官网的&lt;a href=&quot;https://rocketmq.apache.org/docs/quick-start/&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>hexo-多设备之间无缝衔接</title>
    <link href="http://yoursite.com/2018/11/28/hexo-%E5%A4%9A%E8%AE%BE%E5%A4%87%E4%B9%8B%E9%97%B4%E6%97%A0%E7%BC%9D%E8%A1%94%E6%8E%A5/"/>
    <id>http://yoursite.com/2018/11/28/hexo-多设备之间无缝衔接/</id>
    <published>2018-11-28T14:56:04.000Z</published>
    <updated>2018-12-13T00:34:19.205Z</updated>
    
    <content type="html"><![CDATA[<p>最开始使用hexo的时候是在自己的Mac上面搭的，那时候每天都是背着自己的电脑上下班也没觉得不方便。后来老婆跟我在一起以后老是嫌弃我过安检的时候要走有包通道，非常耗时。所以就放弃了带自己的电脑上班，改为专门使用公司提供的Windows工作。这个时候就必须要把家里的电脑和公司的电脑的博客进行同步了。</p><!-- --><h4 id="安装依赖工具"><a href="#安装依赖工具" class="headerlink" title="安装依赖工具"></a>安装依赖工具</h4><ol><li>安装node</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//下载</span><br><span class="line"><span class="meta">$</span> wget https://nodejs.org/dist/v10.14.0/node-v10.14.0-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">//解压</span><br><span class="line"><span class="meta">$</span> tar xf node-v10.14.0-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">//放到usr/local/node目录下</span><br><span class="line"><span class="meta">$</span> mkdir /usr/local/node</span><br><span class="line"><span class="meta">$</span> mv node-v10.14.0-linux-x64   /usr/local/node</span><br><span class="line"></span><br><span class="line">//配置环境变量</span><br><span class="line"><span class="meta">$</span> vim ~/.zshrc</span><br><span class="line"><span class="meta">$</span> /usr/local/node/node-v10.14.0-linux-x64/bin 添加到环境变量中</span><br><span class="line"><span class="meta">$</span> source ~/.zshrc 刷新</span><br><span class="line"><span class="meta">$</span> node -v 确认node是否安装ok</span><br></pre></td></tr></table></figure><h4 id="获取hexo博客源码"><a href="#获取hexo博客源码" class="headerlink" title="获取hexo博客源码"></a>获取hexo博客源码</h4><p>将自己的博客通过各种方式获取到当前设备，比如我自己用的是git。如下所示是我的源码分支：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181212195458hexo-sourcefile.png" alt=""></p><p>以下是我的生成的网页的分支：<br><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181212200121hexo-master.png" alt=""></p><p>另外再把主题单独弄一个<a href="https://github.com/jacentsao/hexo-theme-next" target="_blank" rel="noopener">项目</a>进行同步。</p><p>我的做法是先拉取网页代码分支，然后进入目录以后再拉取一份切换到源码分支并改名叫.deploy_git</p><h4 id="安装启动hexo"><a href="#安装启动hexo" class="headerlink" title="安装启动hexo"></a>安装启动hexo</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g hexo-cli</span><br><span class="line"><span class="meta">$</span> npm install hexo --save</span><br><span class="line"><span class="meta">$</span> hexo s --debug</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最开始使用hexo的时候是在自己的Mac上面搭的，那时候每天都是背着自己的电脑上下班也没觉得不方便。后来老婆跟我在一起以后老是嫌弃我过安检的时候要走有包通道，非常耗时。所以就放弃了带自己的电脑上班，改为专门使用公司提供的Windows工作。这个时候就必须要把家里的电脑和公司
      
    
    </summary>
    
      <category term="博客编写" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Stub简介</title>
    <link href="http://yoursite.com/2018/11/28/Stub%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2018/11/28/Stub简介/</id>
    <published>2018-11-28T08:37:00.000Z</published>
    <updated>2018-11-29T01:09:24.170Z</updated>
    
    <content type="html"><![CDATA[<p>Stub 本意是指桩，具体含义如下：</p><ul><li>n. 存根；烟蒂；树桩；断株</li><li>vt. 踩熄；连根拔除</li><li>n. (Stub)人名；(挪、瑞典)斯图布</li></ul><p>在计算机语言中指<a href="https://zh.wikipedia.org/wiki/桩_(计算机" target="_blank" rel="noopener">维基百科</a>)。</p><p>桩[1]（Stub / Method Stub）是指用来替换一部分功能的程序段。桩程序可以用来模拟已有程序的行为（比如一个远端机器的过程）或是对将要开发的代码的一种临时替代。因此，打桩技术在程序移植、分布式计算、通用软件开发和测试中用处很大。</p><p>以下是桩程序的一个例子（伪码）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">    Temperature = ThermometerRead(Outside)</span><br><span class="line">    IF Temperature &gt; 40 THEN</span><br><span class="line">         PRINT &quot;It&apos;s HOT!&quot;</span><br><span class="line">    END IF</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">BEGIN ThermometerRead(Source insideOrOutside)</span><br><span class="line">     RETURN 28</span><br><span class="line">END ThermometerRead</span><br></pre></td></tr></table></figure><p>上例中的伪码调用了 ThermometerRead函数，其返回一个温度。由于ThermometerRead需要去读取硬件设备，而这个函数现在还没能开发完成，不能正常工作。ThermometerRead只是简单的返回了一个合理的值，这样主程序就能正常调用这个函数，并继续接下来的开发了。可以注意到，虽然它接受了一个Source类型的参数，表明需要返回的温度是内部还是外部的，实际上并没有对这个参数进行任何使用。</p><p>桩程序是一段并不执行任何实际功能的程序，只对接受的参数进行声明并返回一个合法值。这个返回值通常只是一个对于调用者来讲可接受的值即可。桩通常用在对一个已有接口的临时替换上，实际的接口程序在未来再对桩程序进行替换。</p><p>在远程方法调用（RMI）中将客户辅助对象称之为Stub（桩）；将服务辅助对象称之为skeleton[2]（骨架）。</p><p>RMI的过程是：客户对象一旦被调用，客户对象调用stub，stub调用网络远端的skeleton，而skeleton最终调用真正的服务对象。由此，在调用客户对象的时候，感觉上就是直接调用了真正的服务对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Stub 本意是指桩，具体含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n. 存根；烟蒂；树桩；断株&lt;/li&gt;
&lt;li&gt;vt. 踩熄；连根拔除&lt;/li&gt;
&lt;li&gt;n. (Stub)人名；(挪、瑞典)斯图布&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在计算机语言中指&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go程序设计语言(The Go Programming Language)</title>
    <link href="http://yoursite.com/2018/07/23/Go%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80-The-Go-Programming-Language/"/>
    <id>http://yoursite.com/2018/07/23/Go程序设计语言-The-Go-Programming-Language/</id>
    <published>2018-07-23T15:27:02.000Z</published>
    <updated>2018-11-29T01:09:24.148Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第2章-程序结构"><a href="#第2章-程序结构" class="headerlink" title="第2章 程序结构"></a>第2章 程序结构</h4><h5 id="2-1-名称"><a href="#2-1-名称" class="headerlink" title="2.1 名称"></a>2.1 名称</h5><ul><li><p>Go通过首字母的大小写来决定是否包外可见，大写代表可以被包外引用，小写意味着只能包内使用</p></li><li><p>Go使用驼峰命名的方式，不使用小写+下划线的方式</p></li><li><p>Go中，名称的作用域越大，使用越长且更有意义的名称</p></li></ul><h5 id="2-2-声明"><a href="#2-2-声明" class="headerlink" title="2.2 声明"></a>2.2 声明</h5><ul><li>var 变量</li><li>const 常量</li><li>type 类型</li><li>func 函数</li></ul><h5 id="2-3-变量"><a href="#2-3-变量" class="headerlink" title="2.3 变量"></a>2.3 变量</h5><p>var 声明创建一个具体类型的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var name type = expression</span><br></pre></td></tr></table></figure><p>类型和表达式可以省略一个，省略类型自动根据表达式推导类型，省略表达式则变量取默认值（数字为0，布尔型为FALSE，字符串为””，接口和引用类型(slice、指针、map、通道、函数为nil)，数组或结构体这样的符合类型，零值是所有元素或成员的零值）</p><h6 id="2-3-1-短变量声明"><a href="#2-3-1-短变量声明" class="headerlink" title="2.3.1 短变量声明"></a>2.3.1 短变量声明</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i, j := 0,1</span><br><span class="line">i,j = j, i</span><br><span class="line">i:= 1</span><br></pre></td></tr></table></figure><h5 id="2-3-2-指针"><a href="#2-3-2-指针" class="headerlink" title="2.3.2 指针"></a>2.3.2 指针</h5><p>变量是存储值的地方</p><p>指针的值是一个变量的地址。一个指针指示值所保存的位置。不是所有的值都有地址，但是所有的变量都有。使用指针可以在不知道变量名的情况下间接更新或者使用变量的值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第2章-程序结构&quot;&gt;&lt;a href=&quot;#第2章-程序结构&quot; class=&quot;headerlink&quot; title=&quot;第2章 程序结构&quot;&gt;&lt;/a&gt;第2章 程序结构&lt;/h4&gt;&lt;h5 id=&quot;2-1-名称&quot;&gt;&lt;a href=&quot;#2-1-名称&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>使用docker安装WordPress</title>
    <link href="http://yoursite.com/2018/05/31/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85WordPress/"/>
    <id>http://yoursite.com/2018/05/31/使用docker安装WordPress/</id>
    <published>2018-05-31T00:40:17.000Z</published>
    <updated>2018-11-29T01:09:24.201Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下载WorldPress镜像"><a href="#下载WorldPress镜像" class="headerlink" title="下载WorldPress镜像"></a>下载WorldPress镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ sudo docker pull wordpress:latest</span><br><span class="line">$ sudo docker pull mysql</span><br><span class="line">$ docker run --name docker-mysql -e MYSQL_ROOT_PASSWORD=KingDee@2017 -d mysql:5.7</span><br><span class="line">$ docker run --name docker-wordpress --link docker-mysql:mysql -p 6000:80 -d wordpress</span><br><span class="line"></span><br><span class="line">$ 安装插件：https://wordpress.org/plugins/useso-take-over-google/</span><br><span class="line"></span><br><span class="line">$ docker run -p 3306:3306 --name e-mysql -e MYSQL_ROOT_PASSWORD=10086.com -d mysql:5.7</span><br><span class="line"></span><br><span class="line">$ docker exec -it 88dab2f338c6 bash  </span><br><span class="line">$ mysql -uroot -p -h localhost</span><br><span class="line">$ use mysql</span><br><span class="line"></span><br><span class="line">$ docker run -p 6379:6379 -v $PWD/data:/data  -d redis:3.2 redis-server --appendonly yes</span><br><span class="line"></span><br><span class="line">$ docker exec -it  b1125e1d09b8  redis-cli</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;下载WorldPress镜像&quot;&gt;&lt;a href=&quot;#下载WorldPress镜像&quot; class=&quot;headerlink&quot; title=&quot;下载WorldPress镜像&quot;&gt;&lt;/a&gt;下载WorldPress镜像&lt;/h4&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Zheng项目学习</title>
    <link href="http://yoursite.com/2018/05/14/Zheng%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/05/14/Zheng项目学习/</id>
    <published>2018-05-14T15:12:04.000Z</published>
    <updated>2018-11-29T01:09:24.173Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h4><h5 id="1-安装redis"><a href="#1-安装redis" class="headerlink" title="1. 安装redis"></a>1. 安装redis</h5><p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。</p><h6 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h6><p>从Github上面下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/MicrosoftArchive/redis/releases</span><br></pre></td></tr></table></figure></p><h6 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ brew install redis</span><br><span class="line"></span><br><span class="line">To have launchd start redis now and restart at login:</span><br><span class="line">  brew services start redis</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  redis-server /usr/local/etc/redis.conf</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">$ redis-cli 进入redis命令</span><br></pre></td></tr></table></figure><h5 id="2-安装zookeeper"><a href="#2-安装zookeeper" class="headerlink" title="2. 安装zookeeper"></a>2. 安装zookeeper</h5><p>Zookeeper是一种分布式协调服务，用于管理大型主机。在分布式环境中协调和管理服务是一个复杂的过程，Zookeeper通过其简单的架构和API解决了这些问题。Zookeeper允许开发人员专注与核心应用程序逻辑，而不必担心应用程序的分布式特征。</p><p>分布式应用正在运行的一组系统成为<strong>集群</strong>，集群中运行的每台机器称为<strong>节点</strong>。</p><h6 id="Macos通过brew安装"><a href="#Macos通过brew安装" class="headerlink" title="Macos通过brew安装"></a>Macos通过brew安装</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew install zookeeper</span><br><span class="line">To have launchd start zookeeper now and restart at login:</span><br><span class="line">  brew services start zookeeper</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  zkServer start</span><br></pre></td></tr></table></figure><h6 id="从Apache官网下载"><a href="#从Apache官网下载" class="headerlink" title="从Apache官网下载"></a>从Apache官网下载</h6><p>下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://mirror.bit.edu.cn/apache/zookeeper/stable/zookeeper-3.4.12.tar.gz</span><br></pre></td></tr></table></figure><p>下载解压以后需要更改配置文件</p><ol><li>在解压的目录下新建配置文件zoo.cfg</li><li>新增以下配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tickTime = 2000dataDir = /path/to/zookeeper/dataclientPort = 2181initLimit = 5syncLimit = 2</span><br></pre></td></tr></table></figure><ol><li>启动解压目录下的zkServer.sh(linux)或者zkServer.cmd(Windows)</li><li>启动解压目录下的zkCli.sh(linux)或者zkCli.cmd(Windows)</li></ol><h5 id="3-安装-Apache-ActiveMQ"><a href="#3-安装-Apache-ActiveMQ" class="headerlink" title="3. 安装 Apache ActiveMQ"></a>3. 安装 Apache ActiveMQ</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew install apache-activemq</span><br><span class="line">To have launchd start activemq now and restart at login:</span><br><span class="line">  brew services start activemq</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  activemq start</span><br></pre></td></tr></table></figure><h5 id="4-安装MySQL"><a href="#4-安装MySQL" class="headerlink" title="4. 安装MySQL"></a>4. 安装MySQL</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ brew install mysql</span><br><span class="line">We&apos;ve installed your MySQL database without a root password. To secure it run:</span><br><span class="line">    mysql_secure_installation</span><br><span class="line"></span><br><span class="line">MySQL is configured to only allow connections from localhost by default</span><br><span class="line"></span><br><span class="line">To connect run:</span><br><span class="line">    mysql -uroot</span><br><span class="line"></span><br><span class="line">To have launchd start mysql now and restart at login:</span><br><span class="line">  brew services start mysql</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  mysql.server start</span><br></pre></td></tr></table></figure><h5 id="5-安装jenkins"><a href="#5-安装jenkins" class="headerlink" title="5. 安装jenkins"></a>5. 安装jenkins</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Note: When using launchctl the port will be 8080.</span><br><span class="line"></span><br><span class="line">To have launchd start jenkins now and restart at login:</span><br><span class="line">  brew services start jenkins</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  jenkins</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/jenkins/2.121: 7 files, 74.4MB, built in 42 seconds</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-环境配置&quot;&gt;&lt;a href=&quot;#1-环境配置&quot; class=&quot;headerlink&quot; title=&quot;1. 环境配置&quot;&gt;&lt;/a&gt;1. 环境配置&lt;/h4&gt;&lt;h5 id=&quot;1-安装redis&quot;&gt;&lt;a href=&quot;#1-安装redis&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>内网部署yapi接口管理平台</title>
    <link href="http://yoursite.com/2018/05/13/%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2yapi%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/"/>
    <id>http://yoursite.com/2018/05/13/离线部署yapi接口管理平台/</id>
    <published>2018-05-13T14:29:29.000Z</published>
    <updated>2018-11-29T01:09:24.212Z</updated>
    
    <content type="html"><![CDATA[<p>YApi 是一个可本地部署的、打通前后端及QA的、可视化的接口管理平台，<a href="https://yapi.ymfe.org" target="_blank" rel="noopener">项目官网</a>,<a href="https://github.com/YMFE/yapi" target="_blank" rel="noopener">Github地址</a>。</p><p>本文是对自己在多平台内网部署的时候的过程及遇到的问题的记录。</p><a id="more"></a><h4 id="内网部署"><a href="#内网部署" class="headerlink" title="内网部署"></a>内网部署</h4><h5 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h5><ul><li>nodejs (7.6+)</li><li>mongodb (2.6+)</li><li>git </li></ul><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>使用yapi-cli工具部署。执行yapi sever启动可视化部署程序。</p><h5 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h5><p>cd  {项目目录}<br>yapi ls //查看版本号列表<br>yapi update //更新到最新版本<br>yapi update -v {Version} //更新到指定版本</p><h4 id="centos安装环境"><a href="#centos安装环境" class="headerlink" title="centos安装环境"></a>centos安装环境</h4><h5 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h5><p>使用EPEL安装nodejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ yum info epel-release  检查是否有安装</span><br><span class="line"></span><br><span class="line">$ sudo yum install epel-release 安装epel</span><br><span class="line"></span><br><span class="line">$ sudo yum install -y nodejs 安装nodejs</span><br><span class="line"></span><br><span class="line">$ sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">$ sudo npm install -g n</span><br><span class="line"></span><br><span class="line">$ sudo n stable 安装最新的稳定版本</span><br></pre></td></tr></table></figure><h5 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h5><p>1 . 创建文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/yum.repos.d/mongodb-org.repo</span><br></pre></td></tr></table></figure><p>2 . 复制下面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.6]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc</span><br></pre></td></tr></table></figure><p>国内的服务器替换 baseurl 为阿里源,否则你回感受来自共产主义的负加成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/6/mongodb-org/stable/x86_64/</span><br></pre></td></tr></table></figure><p>我搭建的时候用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/7Server/mongodb-org/3.2/x86_64/</span><br></pre></td></tr></table></figure><p>下载速度很快但是每次卡在最后一步，最后把3.2版本改为3.6以后一下载就安装好了</p><p>3 . 更新文件，安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum udpate </span><br><span class="line">$ yum -y install mongodb=org</span><br></pre></td></tr></table></figure><h5 id="配置nginx代理"><a href="#配置nginx代理" class="headerlink" title="配置nginx代理"></a>配置nginx代理</h5><p>由于centos是丢在一台Windows机器的Vmware WorkStation上面，所以还用了nginx反向代理yapi，配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">            proxy_pass   http://127.0.0.1:3011;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Macos安装"><a href="#Macos安装" class="headerlink" title="Macos安装"></a>Macos安装</h4><p>由于开了全局代理，终端翻墙，安装过程基本按照<a href="https://github.com/suxiaoxin/yapi_user_guide/blob/master/mac%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.md" target="_blank" rel="noopener">官方教程</a>过程很流畅。</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>做开发，一要网络好，二要代理好。感谢GCD，感谢阿里巴巴。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;YApi 是一个可本地部署的、打通前后端及QA的、可视化的接口管理平台，&lt;a href=&quot;https://yapi.ymfe.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目官网&lt;/a&gt;,&lt;a href=&quot;https://github.com/YMFE/yapi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github地址&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文是对自己在多平台内网部署的时候的过程及遇到的问题的记录。&lt;/p&gt;
    
    </summary>
    
      <category term="api" scheme="http://yoursite.com/categories/api/"/>
    
    
      <category term="api" scheme="http://yoursite.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>java - lambda学习笔记</title>
    <link href="http://yoursite.com/2018/04/10/java-lambda%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/10/java-lambda学习笔记/</id>
    <published>2018-04-10T07:39:36.000Z</published>
    <updated>2018-11-29T01:09:24.188Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>后端性能测试1</title>
    <link href="http://yoursite.com/2018/03/20/%E5%90%8E%E7%AB%AF%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%951/"/>
    <id>http://yoursite.com/2018/03/20/后端性能测试1/</id>
    <published>2018-03-20T13:05:15.000Z</published>
    <updated>2018-11-29T01:09:24.203Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做Golang上线前的准备工作，包括部署和性能测试，本次主要记录性能测试相关的内容，以免自己遗忘。</p><h4 id="ab命令行测试-Apache-Benchmark"><a href="#ab命令行测试-Apache-Benchmark" class="headerlink" title="ab命令行测试(Apache Benchmark)"></a>ab命令行测试(Apache Benchmark)</h4><p>首先想到的是简单的性能测试工具ab（Apache Benchmark），MacOS应该是自带了ab测试工具，Windows的话需要自行安装配置，可以参考一下<a href="https://stackoverflow.com/questions/7327099/how-to-install-apache-bench-on-windows-7" target="_blank" rel="noopener">链接</a>。</p><p>安装好ab工具以后在终端输入ab可以看到很多参数，其中常用的参数有：</p><ul><li>-n requests 请求次数量</li><li>-c concurency 并发的请求数量</li><li>-t timelimit 请求的次数限制，默认值为-n 50000</li><li>-s timeout 请求的单次超时，默认值为30s</li><li>-p postfile 发送文件中的请求，配合-T 使用</li><li>-T Content-type 默认值’text/plain’</li></ul><p>以下一个完整的ab测试post请求如下：</p><figure class="highlight plain"><figcaption><span>-n 100 -c 10 -p ./login.txt -T 'application/json'</span><a href="http://127.0.0.1:5174/" target="_blank" rel="noopener">```</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">即100次请求，并发数为10，指定当前目录下的login.txt文件中的json数据发送到服务器localhost，5174端口。以下是login.txt中的文件内容:</span><br></pre></td></tr></table></figure><p>{“test”:”test”,”cmd”:”test”}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 测试结果分析</span><br><span class="line"></span><br><span class="line">以下是以请求百度首页模拟100人总计10000此访问来进行ab测试返回分析:</span><br></pre></td></tr></table></figure></p><p>ab -n 10000 -c 100  <a href="https://www.baidu.com/index.html" target="_blank" rel="noopener">https://www.baidu.com/index.html</a><br>//ApacheBenchmark软件申明<br>This is ApacheBench, Version 2.3 &lt;$Revision: 1807734 $&gt;<br>Copyright 1996 Adam Twiss, Zeus Technology Ltd, <a href="http://www.zeustech.net/" target="_blank" rel="noopener">http://www.zeustech.net/</a><br>Licensed to The Apache Software Foundation, <a href="http://www.apache.org/" target="_blank" rel="noopener">http://www.apache.org/</a></p><p>//测试的网址<br>Benchmarking www.baidu.com (be patient)</p><p>//请求的进度<br>Completed 1000 requests<br>Completed 2000 requests<br>Completed 3000 requests<br>Completed 4000 requests<br>Completed 5000 requests<br>SSL handshake failed (1).<br>140735932269448:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22/libressl/ssl/s23_clnt.c:565:<br>Completed 6000 requests<br>Completed 7000 requests<br>SSL handshake failed (1).<br>140735932269448:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22/libressl/ssl/s23_clnt.c:565:<br>Completed 8000 requests<br>Completed 9000 requests<br>Completed 10000 requests<br>Finished 10000 requests</p><p>//百度的服务器软件信息<br>Server Software:        BWS/1.1<br>//被测试的主机地址<br>Server Hostname:        www.baidu.com<br>//https的默认端口<br>Server Port:            443<br>//加密协议<br>SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128<br>//加密服务器名称<br>TLS Server Name:        www.baidu.com</p><p>//文档的路径<br>Document Path:          /index.html<br>//文档的大小<br>Document Length:        227 bytes</p><p>//并发数<br>Concurrency Level:      100<br>//测试总的时间<br>Time taken for tests:   146.932 seconds<br>//完成的请求数量<br>Complete requests:      10000<br>//失败的次数<br>Failed requests:        2<br>   (Connect: 0, Receive: 0, Length: 2, Exceptions: 0)<br>//总的数据传输量，包括请求头和文本内容<br>Total transferred:      8718256 bytes<br>//请求的文档总大小 227 <em> 10000 （总计一万次请求）- 2 </em> 227（两次失败）<br>HTML transferred:       2269546 bytes<br>//每秒完成的请求数量 10000/146.932<br>Requests per second:    68.06 [#/sec] (mean)<br>//每个请求的平均耗时<br>Time per request:       1469.317 [ms] (mean)<br>//服务器完成一个请求的耗时<br>Time per request:       14.693 [ms] (mean, across all concurrent requests)<br>//服务器的吞吐率<br>Transfer rate:          57.94 [Kbytes/sec] received</p><p>//连接信息<br>Connection Times (ms)<br>              min  mean[+/-sd] median   max<br>Connect:        0 1220 947.0   1170   45274<br>Processing:    14  234 227.0    116    2292<br>Waiting:       13  220 214.9    114    2291<br>Total:        107 1454 961.3   1301   46006</p><p>//完成请求比例的耗时，如下完成90%的耗时为1990ms<br>Percentage of the requests served within a certain time (ms)<br>  50%   1301<br>  66%   1377<br>  75%   1464<br>  80%   1540<br>  90%   1990<br>  95%   2221<br>  98%   2827<br>  99%   2972<br> 100%  46006 (longest request)<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做Golang上线前的准备工作，包括部署和性能测试，本次主要记录性能测试相关的内容，以免自己遗忘。&lt;/p&gt;
&lt;h4 id=&quot;ab命令行测试-Apache-Benchmark&quot;&gt;&lt;a href=&quot;#ab命令行测试-Apache-Benchmark&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="性能" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库学习2 - 语法</title>
    <link href="http://yoursite.com/2018/01/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A02-%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/01/07/数据库学习2-语法/</id>
    <published>2018-01-07T02:05:32.000Z</published>
    <updated>2018-11-29T01:09:24.209Z</updated>
    
    <content type="html"><![CDATA[<h5 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h5><ul><li>如果查询的列名在用到的两个或者多个表中不重复，则对这一列的引用不用加表名限制</li><li>视图和基表数据是同步更新的，视图不能创建索引</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;如果查询的列名在用到的两个或者多个表中不重复，则对这一列的引用不用加表名限制&lt;/li&gt;
&lt;li&gt;视图和基表数据是
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习笔记1</title>
    <link href="http://yoursite.com/2017/12/30/Kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2017/12/30/Kotlin学习笔记1/</id>
    <published>2017-12-30T03:47:39.000Z</published>
    <updated>2018-11-29T01:09:24.156Z</updated>
    
    <content type="html"><![CDATA[<p>随着Kotlin的越来越火热，对于Android开发者而言学习Kotlin也变成了一个必要的过程了。</p><h5 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h5><h6 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class User(name: String, age: Int) &#123;&#125; //如果类没有内容则大括号可以省略掉</span><br></pre></td></tr></table></figure><p>构造函数的函数体，即下列代码的init块中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class User(name: String, age: Int) &#123;</span><br><span class="line">init &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h6><p>默认任何类都是继承基础类Any（类似于java中的Object），但是我们可以继承其它类。所有的类默认都是final的，因此如果我们要让别的类继承的话就需要声明open或者abstract关键字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class User(name: String, age: Int)</span><br><span class="line"></span><br><span class="line">class Max(name: String, age: Int, gender: String) : User(name, age)</span><br></pre></td></tr></table></figure><p>如上所示，如果只有单个构造器时，需要从父类继承下来的构造器中指定需要的参数，类似于java super关键字</p><h6 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h6><p>函数使用fun声明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fun add(x: Int, y: Int): Int &#123;</span><br><span class="line">       return x + y</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">  func add(x: Int, y: Int) : Int = x+y</span><br><span class="line">   </span><br><span class="line"> 无返回值的函数，会返回Unit，于java中的void类似，但是Unit是一个真正的对象</span><br></pre></td></tr></table></figure><h6 id="构造方法和函数参数"><a href="#构造方法和函数参数" class="headerlink" title="构造方法和函数参数"></a>构造方法和函数参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">toast(&quot;hell&quot;) //使用默认的Toast.LENGTH_LONG</span><br><span class="line">toast(&quot;hell&quot;,Toast.LENGTH_LONG)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun toast(msg: String, length: Int = Toast.LENGTH_LONG) &#123;//执行函数默认值，避免方法重载</span><br><span class="line">        Toast.makeText(this,msg, length).show()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着Kotlin的越来越火热，对于Android开发者而言学习Kotlin也变成了一个必要的过程了。&lt;/p&gt;
&lt;h5 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h5&gt;&lt;h6 id=
      
    
    </summary>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>gomobile相关的错误处理</title>
    <link href="http://yoursite.com/2017/12/19/gomobile%E7%9B%B8%E5%85%B3%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2017/12/19/gomobile相关的错误处理/</id>
    <published>2017-12-19T04:16:06.000Z</published>
    <updated>2018-11-29T01:09:24.177Z</updated>
    
    <content type="html"><![CDATA[<p><strong>务必确认在构建非Windows包的时候，根目录下面无syso版本信息文件，否则各种各样的奇葩错误</strong></p><h5 id="seq-android-c-213-3-error"><a href="#seq-android-c-213-3-error" class="headerlink" title="seq_android.c:213:3: error"></a>seq_android.c:213:3: error</h5><figure class="highlight plain"><figcaption><span>go build -pkgdir</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># _/var/folders/w4/75xgx41n2bb7mm3m0dxbp0d40000gn/T/gomobile-work-159245723/gomobile_bind</span><br><span class="line">seq_android.c:213:3: error: implicitly declaring library function &apos;memcpy&apos; with type &apos;void *(void *, const void *, unsigned long)&apos; [-Werror,-Wimplicit-function-declaration]</span><br><span class="line">seq_android.c:213:3: note: include the header &lt;string.h&gt; or explicitly provide a declaration for &apos;memcpy&apos;</span><br></pre></td></tr></table></figure><p>解决方案</p><p><code>https://github.com/golang/go/issues/22766 seq_android.c:213:3: error</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;务必确认在构建非Windows包的时候，根目录下面无syso版本信息文件，否则各种各样的奇葩错误&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;seq-android-c-213-3-error&quot;&gt;&lt;a href=&quot;#seq-android-c-213-3-er
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go语言实战阅读笔记2</title>
    <link href="http://yoursite.com/2017/12/11/Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B02/"/>
    <id>http://yoursite.com/2017/12/11/Go语言实战阅读笔记2/</id>
    <published>2017-12-11T13:47:03.000Z</published>
    <updated>2018-11-29T01:09:24.151Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Golang基础"><a href="#Golang基础" class="headerlink" title="Golang基础"></a>Golang基础</h4><h5 id="1-指针"><a href="#1-指针" class="headerlink" title="1.指针"></a>1.指针</h5><p>&amp;符号的意思是对变量取地址<br>*符号的意思是对指针取值</p><p>*和 &amp; 可以互相抵消,同时注意，*&amp;可以抵消掉，但&amp;*是不可以抵消的</p><ul><li>传指针使得多个函数能操作同一个对象。</li><li>传指针比较轻量级 (8bytes),只是传内存地址，我们可以用指针传递体积大的结构体。如果用参数值传递的话, 在每次copy上面就会花费相对较多的系统开销（内存和时间）。所以当你要传递大的结构体的时候，用指针是一个明智的选择。</li><li>Go语言中channel，slice，map这三种类型的实现机制类似指针，所以可以直接传递，而不用取地址后传递指针。（注：若函数需改变slice的长度，则仍需要取地址传递指针）</li></ul><h5 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h5><p>`  括起的字符串为Raw字符串，即字符串在代码中的形式就是打印时的形式，它没有字符转义，换行也将原样输出。</p><h5 id="3-make和new操作"><a href="#3-make和new操作" class="headerlink" title="3.make和new操作"></a>3.make和new操作</h5><p>make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。</p><p>内建函数new本质上说跟其它语言中的同名函数功能一样：new(T) 返回的是*T，即new返回指针</p><p>内建函数make(T, args)与new(T)有着不同的功能，make只能创建slice、map和channel，并且返回一个有初始值(非零)的T类型，而不是*T。本质来讲，导致这三个类型有所不同的原因是指向数据结构的引用在使用前必须被初始化。</p><h5 id="流程和函数"><a href="#流程和函数" class="headerlink" title="流程和函数"></a>流程和函数</h5><p>go里面没有类似于c和java的三木运算符，其主要运算符包括for、switch、if、while、goto</p><p>go里面支持可变参数func name(arg …name){}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Golang基础&quot;&gt;&lt;a href=&quot;#Golang基础&quot; class=&quot;headerlink&quot; title=&quot;Golang基础&quot;&gt;&lt;/a&gt;Golang基础&lt;/h4&gt;&lt;h5 id=&quot;1-指针&quot;&gt;&lt;a href=&quot;#1-指针&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go语言实战阅读笔记1</title>
    <link href="http://yoursite.com/2017/12/11/Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2017/12/11/Go语言实战阅读笔记1/</id>
    <published>2017-12-11T13:31:36.000Z</published>
    <updated>2018-11-29T01:09:24.149Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-1-Go语言的特性"><a href="#1-1-Go语言的特性" class="headerlink" title="1.1 Go语言的特性"></a>1.1 Go语言的特性</h5><h6 id="1-1-1-高效的开发速度和编译速度"><a href="#1-1-1-高效的开发速度和编译速度" class="headerlink" title="1.1.1  高效的开发速度和编译速度"></a>1.1.1  高效的开发速度和编译速度</h6><p>Golang编译没有从编译代码到执行代码的中间过程，用动态语言编写应用程序可以快速看到输出。代价是，动态语言不提供静态语言提供的类型安全特性，不得不大量使用测试套件来避免在运行的时候出现类型错误这类bug</p><h6 id="1-1-2-天然的并发支持"><a href="#1-1-2-天然的并发支持" class="headerlink" title="1.1.2 天然的并发支持"></a>1.1.2 天然的并发支持</h6><h6 id="1-1-2-1-goroutine"><a href="#1-1-2-1-goroutine" class="headerlink" title="1.1.2.1 goroutine"></a>1.1.2.1 goroutine</h6><p>不同于java和C需要编写大量额外的代码来使用线程，Golang在同一个线程中并行多个goroutine，net/http库直接使用了内置的goroutine，每个接收到的请求都在自己的goroutine中运行。goroutine使用的内存相对于线程而言更少，Go语言在运行时会自动在配置的一组逻辑处理器上调度执行goroutine。每个逻辑处理器绑定到一个操作系统上。这样子让用户的应用程序执行效率更高，而开发工作量显著减少。</p><h6 id="1-1-2-1-通道"><a href="#1-1-2-1-通道" class="headerlink" title="1.1.2.1 通道"></a>1.1.2.1 通道</h6><p>通道是一种在goroutine中进行安全的数据通信的数据结构，帮助用户避免其它语言里面常见的共享内存访问的问题</p><p>并发最难得部分就是要确保其他并发运行的进行、线程或goroutine不会以外修改用户的数据。在线程不安全的情况下访问和修改共享变量往往会带来灾难性的后果，在其它语言中，通常要通过复杂的锁规则来防止对一个全局变量或者共享内存造成不同步的修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;1-1-Go语言的特性&quot;&gt;&lt;a href=&quot;#1-1-Go语言的特性&quot; class=&quot;headerlink&quot; title=&quot;1.1 Go语言的特性&quot;&gt;&lt;/a&gt;1.1 Go语言的特性&lt;/h5&gt;&lt;h6 id=&quot;1-1-1-高效的开发速度和编译速度&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>数据库学习1</title>
    <link href="http://yoursite.com/2017/12/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A01/"/>
    <id>http://yoursite.com/2017/12/01/数据库学习1/</id>
    <published>2017-12-01T13:18:50.000Z</published>
    <updated>2018-11-29T01:09:24.208Z</updated>
    
    <content type="html"><![CDATA[<h5 id="使用Navicat连接Mamp-Pro"><a href="#使用Navicat连接Mamp-Pro" class="headerlink" title="使用Navicat连接Mamp Pro"></a>使用Navicat连接Mamp Pro</h5><ol><li>新建mysql连接</li><li>输入端口号，用户名和密码（默认都是root）</li><li>use socket，打勾。输入/Applications/MAMP/tmp/mysql/mysql.sock</li></ol><h5 id="使用命令行操作mysql"><a href="#使用命令行操作mysql" class="headerlink" title="使用命令行操作mysql"></a>使用命令行操作mysql</h5><ol><li>执行 /Applications/MAMP/Library/bin 目录下的mysql即可进入命令行操作界面</li></ol><h5 id="使用golang连接数据库"><a href="#使用golang连接数据库" class="headerlink" title="使用golang连接数据库"></a>使用golang连接数据库</h5><ol><li><code>db, err := sql.Open(&quot;mysql&quot;, &quot;root:root@unix(/Applications/MAMP/tmp/mysql/mysql.sock)/mysql&quot;)</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;使用Navicat连接Mamp-Pro&quot;&gt;&lt;a href=&quot;#使用Navicat连接Mamp-Pro&quot; class=&quot;headerlink&quot; title=&quot;使用Navicat连接Mamp Pro&quot;&gt;&lt;/a&gt;使用Navicat连接Mamp Pro&lt;/h5&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>ssh使用之文件拷贝</title>
    <link href="http://yoursite.com/2017/11/30/ssh%E4%BD%BF%E7%94%A8%E4%B9%8B%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2017/11/30/ssh使用之文件拷贝/</id>
    <published>2017-11-30T12:53:21.000Z</published>
    <updated>2018-11-29T01:09:24.190Z</updated>
    
    <content type="html"><![CDATA[<p>最近想学习一下Golang,自己买了一个188一年的京东云服务器，准备丢点东西上去，过程实在是各种折腾，门外汉的痛苦。</p><h4 id="ssh传输文件"><a href="#ssh传输文件" class="headerlink" title="ssh传输文件"></a>ssh传输文件</h4><pre><code>上传文件scp /path/filename username@servername:/path下载文件scp username@servername:/path/filename /var/www/local_dir（本地目录）下载目录scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）上传目录scp  -r local_dir username@servername:remote_dir</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近想学习一下Golang,自己买了一个188一年的京东云服务器，准备丢点东西上去，过程实在是各种折腾，门外汉的痛苦。&lt;/p&gt;
&lt;h4 id=&quot;ssh传输文件&quot;&gt;&lt;a href=&quot;#ssh传输文件&quot; class=&quot;headerlink&quot; title=&quot;ssh传输文件&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="SSH" scheme="http://yoursite.com/categories/SSH/"/>
    
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Android-基础-FileProvider使用</title>
    <link href="http://yoursite.com/2017/10/27/Android-%E5%9F%BA%E7%A1%80-FileProvider%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/10/27/Android-基础-FileProvider使用/</id>
    <published>2017-10-27T14:49:48.000Z</published>
    <updated>2018-11-29T01:09:24.124Z</updated>
    
    <content type="html"><![CDATA[<p>移动平台对于安全和隐私是越来越注重了，Android在权限方面也在不断的收紧，一定程度上对于流氓软件还是有克制作用的。</p><p>今天学习了一下<a href="https://developer.android.com/training/secure-file-sharing/setup-sharing.html" target="_blank" rel="noopener">FileProvider</a>和<a href="https://developer.android.com/reference/android/support/v4/content/FileProvider.html#getUriForFile(android.content.Context, java.lang.String, java.io.File" target="_blank" rel="noopener">文档</a>)的基本使用：</p><h5 id="1-定义Provider"><a href="#1-定义Provider" class="headerlink" title="1.定义Provider"></a>1.定义Provider</h5><p>首先要在MManifest文件中定义一个Provider，其中authorities=包名.fileprovider。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    package=&quot;com.example.myapp&quot;&gt;</span><br><span class="line">    &lt;application</span><br><span class="line">        ...&gt;</span><br><span class="line">        &lt;provider</span><br><span class="line">            android:name=&quot;android.support.v4.content.FileProvider&quot;</span><br><span class="line">            android:authorities=&quot;com.example.myapp.fileprovider&quot;</span><br><span class="line">            android:grantUriPermissions=&quot;true&quot;</span><br><span class="line">            android:exported=&quot;false&quot;&gt;</span><br><span class="line">            &lt;meta-data</span><br><span class="line">                android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class="line">                android:resource=&quot;@xml/filepaths&quot; /&gt;</span><br><span class="line">        &lt;/provider&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><h5 id="2-创建filepaths文件"><a href="#2-创建filepaths文件" class="headerlink" title="2.创建filepaths文件"></a>2.创建filepaths文件</h5><p>在res目录下面新建一个xml目录，并在新建的xml目录下面创建一个filepaths的文件，内容如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;files-path name=&quot;my_images&quot; path=&quot;images/&quot;/&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/paths&gt;</span><br></pre></td></tr></table></figure><p>定义的路径又分为如下几种，分别对应内部存储和外部存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;  Context.getFilesDir().</span><br><span class="line">&lt;cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;  getCacheDir().</span><br><span class="line">&lt;external-path name=&quot;name&quot; path=&quot;path&quot; /&gt;  Environment.getExternalStorageDirectory().</span><br><span class="line">&lt;external-files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;Context#getExternalFilesDir(String) Context.getExternalFilesDir(null).</span><br><span class="line">&lt;external-cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt; Context.getExternalCacheDir().</span><br></pre></td></tr></table></figure><p>其中，name是出于安全考虑用于替换path显示的，path则是真实的次级目录</p><h5 id="3-创建一个可分享的Uri"><a href="#3-创建一个可分享的Uri" class="headerlink" title="3.创建一个可分享的Uri"></a>3.创建一个可分享的Uri</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File imagePath = new File(Context.getFilesDir(), &quot;images&quot;);</span><br><span class="line">File newFile = new File(imagePath, &quot;default_image.jpg&quot;);</span><br><span class="line">Uri contentUri = FileProvider.getUriForFile(getContext(), &quot;com.mydomain.fileprovider&quot;, newFile);</span><br></pre></td></tr></table></figure><p>最终获取到的Uri是<code>content://com.mydomain.fileprovider/my_images/default_image.jpg</code>，可以看到实际的images路径被替换为my_images了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;移动平台对于安全和隐私是越来越注重了，Android在权限方面也在不断的收紧，一定程度上对于流氓软件还是有克制作用的。&lt;/p&gt;
&lt;p&gt;今天学习了一下&lt;a href=&quot;https://developer.android.com/training/secure-file-sha
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="FileProdvider" scheme="http://yoursite.com/tags/FileProdvider/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 代理设置</title>
    <link href="http://yoursite.com/2017/10/22/Android-Studio-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/10/22/Android-Studio-代理设置/</id>
    <published>2017-10-22T08:16:15.000Z</published>
    <updated>2018-11-29T01:09:24.119Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为Lantern老是出问题，又买了一个搬瓦工的，搭建好后速度还是可以的，Youtube上面1080P没有卡顿现象。但是各种工具的是使用又出现了问题，所以特意记录一下，节省下次切换工具配置的时间。</p><h4 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h4><p>首先是配置git的代理，以下是http(s)配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy &apos;http://127.0.0.1:65322&apos;</span><br><span class="line">git config --global http.proxy &apos;http://127.0.0.1:65322&apos;</span><br><span class="line"></span><br><span class="line">取消设置代理</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:1087;</span><br><span class="line">export https_proxy=http://127.0.0.1:1087;</span><br></pre></td></tr></table></figure><h4 id="Gradle配置"><a href="#Gradle配置" class="headerlink" title="Gradle配置"></a>Gradle配置</h4><p>在全局的gradle.properties中添加以下配置，这样子每个项目的gradle同步都回使用ss代理了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemProp.http.proxyHost=127.0.0.1</span><br><span class="line">systemProp.http.proxyPort=1087</span><br><span class="line">systemProp.https.proxyHost=127.0.0.1</span><br><span class="line">systemProp.https.proxyPort=1087</span><br></pre></td></tr></table></figure><h4 id="Android-Studio代理设置"><a href="#Android-Studio代理设置" class="headerlink" title="Android Studio代理设置"></a>Android Studio代理设置</h4><p>目前来看启用自动代理即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近因为Lantern老是出问题，又买了一个搬瓦工的，搭建好后速度还是可以的，Youtube上面1080P没有卡顿现象。但是各种工具的是使用又出现了问题，所以特意记录一下，节省下次切换工具配置的时间。&lt;/p&gt;
&lt;h4 id=&quot;git配置&quot;&gt;&lt;a href=&quot;#git配置&quot; 
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Proxy" scheme="http://yoursite.com/tags/Proxy/"/>
    
  </entry>
  
</feed>
