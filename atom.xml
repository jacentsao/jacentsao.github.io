<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silence of Heart</title>
  <subtitle>最怕彷徨无前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-26T13:13:49.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JacenTsao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>序列化</title>
    <link href="http://yoursite.com/2017/02/26/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2017/02/26/序列化/</id>
    <published>2017-02-26T12:18:04.000Z</published>
    <updated>2017-02-26T13:13:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Android中我们经常使用到序列化来进行数据传递,比如Intent和Binder,或者将对象持久化到存储设备或者通过网络传输到其他设备的时候.通常我们会有两种方式来实现序列化: 1.Serializable 2.Parcelable </p>
<h5 id="1-Serializable方式实现序列化"><a href="#1-Serializable方式实现序列化" class="headerlink" title="1. Serializable方式实现序列化"></a>1. Serializable方式实现序列化</h5><p>Serializable是java中所提供的一个序列化接口，它是空接口。通常我们可以通过实现Serializable接口来实现序列化，为对象提供标准的序列化和反序列化操作。同时我们注意到在实现该接口的时候我们会有一个long型的serialVersionUID，这个serialVersionUID主要是用于反序列化。如下所示：</p>
<pre><code>public class User implements Serializable {
    private static final long serialVersionUID = 7990301608074625143L;
    public static int GENDAT_FEMALE = 0;
    public static int GENDAT_MALE = 1;
    private String name;

    private int age;

    private int gendar;

    transient //序列化的时候忽略该字段
    private int test;
}
</code></pre><p>以上面的User类为例，将其一个对象写入文件以后再从文件读取：</p>
<pre><code>User user = new User(&quot;Max&quot;, 0, 0, 0);
ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(path));
outputStream.writeObject(user);
outputStream.close();

ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(path));
User reader = (User) inputStream.readObject();
Toast.makeText(this, reader.toString(), Toast.LENGTH_LONG).show();
</code></pre><p>当把对象user写入到文件中的时候，同时会写入对象的serialVersionUID，在从文件中读取对象的时候，    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Android中我们经常使用到序列化来进行数据传递,比如Intent和Binder,或者将对象持久化到存储设备或者通过网络传输到其他设备的时候.通常我们会有两种方式来实现序列化: 1.Serializable 2.Parcelable &lt;/p&gt;
&lt;h5 id=&quot;1-Ser
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android里面的几种倒计时方式</title>
    <link href="http://yoursite.com/2017/02/24/Android%E9%87%8C%E9%9D%A2%E7%9A%84%E5%87%A0%E7%A7%8D%E5%80%92%E8%AE%A1%E6%97%B6%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/02/24/Android里面的几种倒计时方式/</id>
    <published>2017-02-24T13:40:24.000Z</published>
    <updated>2017-02-24T13:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android常见的一些及时方式:TimeTask,CounterDownTimer,Handler.postDelay().a</p>
<ol>
<li>TimeTask </li>
</ol>
<pre><code>final Handler handler = new Handler() {
    public void handleMessage(Message msg) {
        switch (msg.what) {
            case 1:
                if (timerCount &gt; 0) {
                    btnGetVerifyCode.setEnabled(false);
                    btnGetVerifyCode.setText(&quot;重新获取(&quot; + String.valueOf(timerCount) + &quot;s)&quot;);
                    timerCount--;
                } else {
                    btnGetVerifyCode.setEnabled(true);
                    btnGetVerifyCode.setText(&quot;重新获取&quot;);
                    if (task != null) {
                        task.cancel();
                    }
                }
                break;
        }
        super.handleMessage(msg);
    }
    };


class MyTimerTask extends TimerTask {

    @Override
    public void run() {
        Message message = new Message();
        message.what = 1;
        handler.sendMessage(message);
    }
}

    timerCount = 60;
 task = new MyTimerTask();
 timer.schedule(task, 0, 1000); //延时1000ms后执行，1000ms执行一次
</code></pre><ol>
<li><p>CountDownTimer</p>
<pre><code>new CountDownTimer(60000, 1000) {

public void onTick(long millisUntilFinished) {
    mTextField.setText(&quot;seconds remaining: &quot; + millisUntilFinished / 1000);
 }

 public void onFinish() {
     mTextField.setText(&quot;done!&quot;);
 }
  }.start();
</code></pre></li>
<li><p>不做详细说明了</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android常见的一些及时方式:TimeTask,CounterDownTimer,Handler.postDelay().a&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TimeTask &lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;final Handler handler = new
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android下面如何改变文件权限</title>
    <link href="http://yoursite.com/2017/02/24/Android%E4%B8%8B%E9%9D%A2%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2017/02/24/Android下面如何改变文件权限/</id>
    <published>2017-02-24T11:55:40.000Z</published>
    <updated>2017-02-24T11:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何在Android系统下面改变我们的文件权限,实现某些目的:</p>
<pre><code>String command = &quot;chmod 777 &quot; + filePath;
Runtime runtime = Runtime.getRuntime();
runtime.exec(command);
</code></pre><p>如上所示,获取文件的绝对路劲,通过Runtime去执行该文件,777代表可读可写可执行,这里不做更多说明.    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在Android系统下面改变我们的文件权限,实现某些目的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String command = &amp;quot;chmod 777 &amp;quot; + filePath;
Runtime runtime = Runtime.getRuntime()
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>判断Library处于release或者debug模式</title>
    <link href="http://yoursite.com/2017/02/21/%E5%88%A4%E6%96%ADLibrary%E5%A4%84%E4%BA%8Erelease%E6%88%96%E8%80%85debug%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/02/21/判断Library处于release或者debug模式/</id>
    <published>2017-02-21T06:05:30.000Z</published>
    <updated>2017-02-21T06:11:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何在Library中判断是否是release包:</p>
<ol>
<li><p>在Library的gradle文件中添加一个变量标记和设置没有默认发布类型</p>
<pre><code>Android{
        release {
        buildConfigField &quot;boolean&quot;, &quot;RELEASE_MODE&quot;, &quot;true&quot;
        minifyEnabled false
        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;
        }
        debug {
            buildConfigField &quot;boolean&quot;, &quot;RELEASE_MODE&quot;, &quot;false&quot;
        }

        publishNonDefault true   //设置没有默认发布类型
}
</code></pre></li>
<li><p>在app module的gradle文件中新增对应Library的release依赖和debug依赖</p>
</li>
</ol>
<pre><code>releaseCompile project(path: &apos;:app&apos;, configuration: &apos;release&apos;)
debugCompile project(path: &apos;:app&apos;, configuration: &apos;debug&apos;)    
</code></pre><ol>
<li>在Library中引用</li>
</ol>
<pre><code>if (BuildConfig.RELEASE_MODE == true) {}    
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在Library中判断是否是release包:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在Library的gradle文件中添加一个变量标记和设置没有默认发布类型&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Android{
        release {
        buildCo
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>BaseColumns</title>
    <link href="http://yoursite.com/2017/02/14/BaseColumns/"/>
    <id>http://yoursite.com/2017/02/14/BaseColumns/</id>
    <published>2017-02-14T14:44:07.000Z</published>
    <updated>2017-02-14T14:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>准备开始看Google官方的Android Architecture系列了，一方面是提升代码质量，另一方面是学习一下新的app架构。由于目前项目的代码基本上技术可以归属到上古遗迹之中，所以很有必要学习一下新的东西为未来做准备。</p>
<a id="more"></a>
<p>首先看到的就是在数据库操作方面的一个接口，如下所示：</p>
<pre><code>package android.provider;

public interface BaseColumns
{
    /**
     * The unique ID for a row.
     * &lt;P&gt;Type: INTEGER (long)&lt;/P&gt;
     */
    public static final String _ID = &quot;_id&quot;;

    /**
     * The count of rows in a directory.
     * &lt;P&gt;Type: INTEGER&lt;/P&gt;
     */
    public static final String _COUNT = &quot;_count&quot;;
}
</code></pre><p>这个类主要是配合SQLiteOpenHelper进行Android的数据库管理，_ID做为主键，而_COUNT可以返回数据库行数。典型应用如下所示：</p>
<pre><code>public final class TasksPersistenceContract {

// To prevent someone from accidentally instantiating the contract class,
// give it an empty constructor.
private TasksPersistenceContract() {}

/* Inner class that defines the table contents */
public static abstract class TaskEntry implements BaseColumns {
    public static final String TABLE_NAME = &quot;task&quot;;
    public static final String COLUMN_NAME_ENTRY_ID = &quot;entryid&quot;;
    public static final String COLUMN_NAME_TITLE = &quot;title&quot;;
    public static final String COLUMN_NAME_DESCRIPTION = &quot;description&quot;;
    public static final String COLUMN_NAME_COMPLETED = &quot;completed&quot;;
}
}


//在SQLiteOpenHelper中创建表的语句
   private static final String SQL_CREATE_ENTRIES =
        &quot;CREATE TABLE &quot; + TasksPersistenceContract.TaskEntry.TABLE_NAME + &quot; (&quot; +
                TasksPersistenceContract.TaskEntry._ID + TEXT_TYPE + &quot; PRIMARY KEY,&quot; +
                TasksPersistenceContract.TaskEntry.COLUMN_NAME_ENTRY_ID + TEXT_TYPE + COMMA_SEP +
                TasksPersistenceContract.TaskEntry.COLUMN_NAME_TITLE + TEXT_TYPE + COMMA_SEP +
                TasksPersistenceContract.TaskEntry.COLUMN_NAME_DESCRIPTION + TEXT_TYPE + COMMA_SEP +
                TasksPersistenceContract.TaskEntry.COLUMN_NAME_COMPLETED + BOOLEAN_TYPE +
        &quot; )&quot;;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;准备开始看Google官方的Android Architecture系列了，一方面是提升代码质量，另一方面是学习一下新的app架构。由于目前项目的代码基本上技术可以归属到上古遗迹之中，所以很有必要学习一下新的东西为未来做准备。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Comparator与Comparable的区别</title>
    <link href="http://yoursite.com/2017/02/13/Comparator%E4%B8%8EComparable%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/02/13/Comparator与Comparable的区别/</id>
    <published>2017-02-13T14:06:34.000Z</published>
    <updated>2017-02-13T14:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考StackOverFlowp<a href="http://stackoverflow.com/questions/4108604/java-comparable-vs-comparator" target="_blank" rel="external">答案</a>:</p>
<p>Comparable相当于“内部比较器”，而Comparator相当于“外部比较器”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考StackOverFlowp&lt;a href=&quot;http://stackoverflow.com/questions/4108604/java-comparable-vs-comparator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;答案&lt;/a&gt;:
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java时间比较</title>
    <link href="http://yoursite.com/2017/02/13/Java%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2017/02/13/Java时间比较/</id>
    <published>2017-02-13T13:58:02.000Z</published>
    <updated>2017-02-13T14:04:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>在java中比较两个时间的大小: </p>
<pre><code>DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
Date start = df.parse(&quot;1991-12-25&quot;);
Date end = df.parse(&quot;1990-12-23&quot;);
int result = start.compareTo(end);
</code></pre><p>如果result &gt; 0 说明 start &gt; end; 如果result &lt; 0，则 start &lt; end;如果result = 0,则 start = end;    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在java中比较两个时间的大小: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DateFormat df = new SimpleDateFormat(&amp;quot;yyyy-MM-dd&amp;quot;);
Date start = df.parse(&amp;quot;1991-12-25&amp;quo
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>互联网协议入门（二）</title>
    <link href="http://yoursite.com/2017/02/06/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/02/06/互联网协议入门（二）/</id>
    <published>2017-02-06T01:54:29.000Z</published>
    <updated>2017-02-06T09:45:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://jacentsao.github.io/2017/02/05/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">上一篇文章</a>分析了互联网的总体构思，从下至上，没一层协议的设计思想。</p>
<p>这是从设计者的角度看问题，今天我想切换到用户的角度，看看用户是如何从上至下，与这些协议互动的。</p>
<a id="more"></a>
<h3 id="互联网协议入门（二）"><a href="#互联网协议入门（二）" class="headerlink" title="互联网协议入门（二）"></a>互联网协议入门（二）</h3><h4 id="七、一个小结"><a href="#七、一个小结" class="headerlink" title="七、一个小结"></a>七、一个小结</h4><p>先对前面的内容，做一个小结。</p>
<p>我们已经知道，网络通信就是交换数据包。电脑A向电脑B发送一个数据包，后则会收到了，回复一个数据包，从而实现两台电脑时间的通信，数据包的结构，基本上是下面这样：</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052913.png" alt="image"></p>
<p>发送这个包，需要知道两个地址：</p>
<ul>
<li>对方的MAC地址</li>
<li>对方的IP地址</li>
</ul>
<p>有了折两个地址，数据包才能准确送到接收者中。但是，前面说过，MAC地址又局限性，如果两台电脑不在同一个局域网，就无法知道对方的MAC地址，必须通过网关转发。</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061101.jpg" alt="image"></p>
<p>上图中，1号电脑要向4号电脑发送一个数据包。它先判断4号电脑是否在同一个子网络，借过发现不是（后文会介绍判断方法），于是就把这个数据包发到网关A。网关A通过路由协议，发现4号电脑位于局域网B，又把数据包发送给网关B，网关B再转发到4号电脑。</p>
<p>1号电脑把数据包发到网关A，必须知道网关A的MAC地址。所以，数据包的目标地址，实际上分成两种情况：</p>
<table>
<thead>
<tr>
<th>场景</th>
<th style="text-align:center">数据包地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>同一个局域网</td>
<td style="text-align:center">对方的MAC地址，对方的IP地址</td>
</tr>
<tr>
<td>不同局域网</td>
<td style="text-align:center">网关的MAC地址，对方的IP地址</td>
</tr>
</tbody>
</table>
<p>发送数据包之前，电脑必须判断对方是否在同一个局域网，然后选择对应的MAC地址。接下来，我们就来看，实际使用中，这个过程是怎么完成的。</p>
<h4 id="八、用户的上网设置"><a href="#八、用户的上网设置" class="headerlink" title="八、用户的上网设置"></a>八、用户的上网设置</h4><h5 id="8-1-静态IP地址"><a href="#8-1-静态IP地址" class="headerlink" title="8.1 静态IP地址"></a>8.1 静态IP地址</h5><p>通常购买了一台电脑后需要做一些设置。有时，管理员（或者ISP）会告诉你下面四个参数，你把它们呢填入操作系统，计算机就能上网了。</p>
<ul>
<li>本机的IP地址</li>
<li>子网掩码</li>
<li>网关的IP地址</li>
<li>DNS的IP地址</li>
</ul>
<p>下图是Windows系统的设置窗口。</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061111.png" alt="image"></p>
<p>这四个参数缺一不可，后文会解释为什么需要知道它们才能上网，由于它们是给定的，计算机每次开机，都回分到同样的IP地址，所以这种状况称作“静态IP地址上网”。</p>
<h5 id="8-2-动态IP地址"><a href="#8-2-动态IP地址" class="headerlink" title="8.2 动态IP地址"></a>8.2 动态IP地址</h5><p>所谓“动态IP地址”，指计算机开机后，会自动分配到一个IP地址，不同认为设定。它使用的协议叫做<a href="https://zh.wikipedia.org/zh/%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">DHCP协议</a></p>
<p>这个协议规定，每一个局域网中，有一台计算机负责管理本网络的所有IP地址，它叫做“DHCP服务器”。新的计算机加入网络，必须向“DHCP服务器”发送一个“DHCP请求”数据包，申请IP地址和相关的网络参数。</p>
<p>前面说过，如果两台计算机在同一个局域网，必须知道对方的MAC地址和IP地址，才能发送数据包。但是，新加入的计算机不知道这两个地址，怎么发送数据包呢？</p>
<p>DHCP协议做了一些巧妙的规定。</p>
<h5 id="8-3-DHCP协议"><a href="#8-3-DHCP协议" class="headerlink" title="8.3 DHCP协议"></a>8.3 DHCP协议</h5><p>首先，它是一种应用层协议，建立在UDP协议之上，所以整个数据包是这样的L</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061102.png" alt="image"></p>
<ol>
<li>最前面的“以太网标头”，设置发出方（本机）的MAC地址和接收方（DHCP服务器）的MAC地址。前者就是本机网卡的MAC地址，后者这时不知道，就填入一个广播地址：FF-FF-FF-FF-FF-FF.</li>
<li>后面的“IP标头”，设置发出方的IP地址和接收方的IP地址。这时，对于这两者，本机都不知道。于是，发出方的IP地址就设为0.0.0.0，接收方地址设置为255.255.255.255。</li>
<li>最后的“UDP标头”，设置发出方的端口和接收方的端口。这一部分是DHCP协议规定好的，发出方是68端口，接收方是67端口。</li>
</ol>
<p>这个数据包构造完成后，就可以发出了。以太网是广播发送，同一个局域网的每台计算机都收到了这个包。因为接收方的MAC地址是FF-FF-FF-FF-FF-FF，看不出是发给谁的，每台接收到这个包的计算机，都必须解析这个包的IP地址，才能确定是不是发给自己的。当看到发送方是0.0.0.0，接收方是255.255.255.255，于是DHCP服务器就知道“这个包是发给我的”，而其他计算机就可以丢弃这个包。</p>
<p>接下来，DHCP服务器读出这个包的数据内容，分配好IP地址，发送会去一个“DHCP响应”数据包。这个响应包的结构也是类似的，以太网标头的MAC地址是双方的网卡地址，IP标头的IP地址是DHCP服务器的IP地址（发出放）和255.255.255.255（接收方），UDP标头的端口是67（发出放）和68（接收方），分配给请求端的IP地址和本网络的具体参数则包含在“数据”部分。</p>
<p>新加入的计算机收到这个响应包，于是就知道了自己的IP地址、子网掩码、网关地址、DNS服务器等等参数。</p>
<h5 id="8-4-上网设置：小结"><a href="#8-4-上网设置：小结" class="headerlink" title="8.4 上网设置：小结"></a>8.4 上网设置：小结</h5><p>这个部分，需要记住的就是一点：不管是“静态IP地址”还是“动态IP地址”，电脑上网的首要步奏，是确定四个参数。这四个参数很重要，值得重复一遍：</p>
<ul>
<li>本机的IP地址</li>
<li>子网掩码</li>
<li>网关的IP地址</li>
<li>DNS的IP地址</li>
</ul>
<p>有了这几个数值，电脑就可以上网“冲浪”了。接下来，我们来看一个实例，当用户访问网页的时候，互联网协议是怎么运作的。</p>
<h4 id="九、一个实例：访问网页"><a href="#九、一个实例：访问网页" class="headerlink" title="九、一个实例：访问网页"></a>九、一个实例：访问网页</h4><h5 id="9-1-本机参数"><a href="#9-1-本机参数" class="headerlink" title="9.1 本机参数"></a>9.1 本机参数</h5><p>我们假定，经过上一节的步奏，用户设置好了自己的网络参数：</p>
<ul>
<li>本机的IP地址：192.168.1.100</li>
<li>子网掩码：255.255.255.0</li>
<li>网关的IP地址：192.168.1.1</li>
<li>DNS的IP地址：8.8.8.8</li>
</ul>
<p>然后他打开浏览器，想要访问Google，在地址栏输入了网址：www.google.com。</p>
<p><a href="http://image.beekka.com/blog/201206/bg2012061103.png" target="_blank" rel="external">http://image.beekka.com/blog/201206/bg2012061103.png</a></p>
<h5 id="9-2-DNS协议"><a href="#9-2-DNS协议" class="headerlink" title="9.2 DNS协议"></a>9.2 DNS协议</h5><p>我们知道，发送数据包，必须知道对方的IP地址。但是，现在，我们知道的网址是www.google.com，不知道它的IP地址。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">DNS协议</a>可以帮助我们，将这个网址转换成IP地址。已知DNS服务器为8.8.8.8，于是我们向这个地址发送一个DNS数据包（53端口）。</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061105.png" alt="image"></p>
<p>然后，DNS服务器做出响应，告诉我们Google的IP地址是172.194.72.105。于是，我们知道了对方的IP地址。</p>
<h5 id="9-3-子网掩码"><a href="#9-3-子网掩码" class="headerlink" title="9.3 子网掩码"></a>9.3 子网掩码</h5><p>接下来，我们要判断，这个IP地址是不是在同一个子网络，这就要用到子网掩码。</p>
<p>已知子网掩码是255.255.255.0，本机用它对自己的IP地址192.168.1.100，做一个二进制的AND运算（两个数位都为1，结果为1，否则为0），计算结果为192.168.1.0；然后对Google的IP地址172.194.72.105也做一个AND运算，计算结果为172.194.72.0。这两个结果不相等，所以结论是，Google与本机不在同一个子网络。</p>
<p>因此，我们要向Google发送数据包，必须通过网关192.168.1.1转发，也就是说，接收方的MAC地址将是网关的MAC地址。</p>
<h5 id="9-4-应用层协议"><a href="#9-4-应用层协议" class="headerlink" title="9.4 应用层协议"></a>9.4 应用层协议</h5><p>浏览网页用的是HTTP协议，它的整个数据包构造是这样的：</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061106.png" alt="image"></p>
<p>HTTP部分的内容，类似于下面这样：</p>
<pre><code>GET / HTTP/1.1
　　Host: www.google.com
　　Connection: keep-alive
　　User-Agent: Mozilla/5.0 (Windows NT 6.1) ......
　　Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
　　Accept-Encoding: gzip,deflate,sdch
　　Accept-Language: zh-CN,zh;q=0.8
　　Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3
　　Cookie: ... ...
　　
</code></pre><p>我们假定这个部分的长度为4960字节，它会被嵌在TCP数据包之中。</p>
<h5 id="9-5-TCP协议"><a href="#9-5-TCP协议" class="headerlink" title="9.5 TCP协议"></a>9.5 TCP协议</h5><p>TCP数据包需要设置端口，接收方（Google）的HTTP端口默认是80，发送方（本机）的端口是一个随机生成的1024-65535之间的整数，假定为51775。</p>
<p>TCP数据包的标头长度为20字节，加上嵌入HTTP的数据包，总长度变为4980字节。</p>
<h5 id="9-6-IP协议"><a href="#9-6-IP协议" class="headerlink" title="9.6 IP协议"></a>9.6 IP协议</h5><p>然后，TCP数据包再嵌入IP数据包。IP数据包需要设置双方的IP地址，这是已知的，发送方是192.168.1.100（本机），接收方是172.194.72.105（Google）。</p>
<p>IP数据包的标头长度为20字节，加上嵌入的TCP数据包，总长度变为5000字节。</p>
<h5 id="9-7-以太网协议"><a href="#9-7-以太网协议" class="headerlink" title="9.7 以太网协议"></a>9.7 以太网协议</h5><p>最后，IP数据包嵌入以太网数据包。以太网数据包需要设置双方的MAC地址，发送方为本机的网卡MAC地址，接收方为网关192.168.1.1的MAC地址（通过ARP协议得到）。</p>
<p>以太网数据包的数据部分，最大长度为1500字节，而现在的IP数据包长度为5000字节。因此，IP数据包必须分割成四个包。因为每个包都有自己的IP标头（20字节），所以四个包的IP数据包的长度分别为1500、1500、1500、560。</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061107.png" alt="image"></p>
<h5 id="9-8-服务器端响应"><a href="#9-8-服务器端响应" class="headerlink" title="9.8 服务器端响应"></a>9.8 服务器端响应</h5><p>经过多个网关的转发，Google的服务器172.194.72.105，收到了这四个以太网数据包。</p>
<p>根据IP标头的序号，Google将四个包拼起来，取出完整的TCP数据包，然后读出里面的”HTTP请求”，接着做出”HTTP响应”，再用TCP协议发回来。</p>
<p>本机收到HTTP响应以后，就可以将网页显示出来，完成一次网络通信。</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061104.jpg" alt="iamge"></p>
<p>这个例子就到此为止，虽然经过了简化，但它大致上反映了互联网协议的整个通信过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://jacentsao.github.io/2017/02/05/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/&quot;&gt;上一篇文章&lt;/a&gt;分析了互联网的总体构思，从下至上，没一层协议的设计思想。&lt;/p&gt;
&lt;p&gt;这是从设计者的角度看问题，今天我想切换到用户的角度，看看用户是如何从上至下，与这些协议互动的。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>互联网协议入门（一）</title>
    <link href="http://yoursite.com/2017/02/05/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/02/05/互联网协议入门（一）/</id>
    <published>2017-02-05T07:02:41.000Z</published>
    <updated>2017-02-06T09:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文转载自阮一峰的网络日志<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="external">互联网协议入门</a>.</strong></p>
<p>互联网的核心是一系列的协议,总称为”互联网协议”(Internet Protocol Suite)。它们对电脑如何连接和组网，做出了详尽的规定。理解了这些协议，就理解了互联网的原理。</p>
<a id="more"></a>
<h3 id="互联网入门"><a href="#互联网入门" class="headerlink" title="互联网入门"></a>互联网入门</h3><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><h5 id="1-1-五层模型"><a href="#1-1-五层模型" class="headerlink" title="1.1 五层模型"></a>1.1 五层模型</h5><p>互联网的实现，分为很多层次。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。</p>
<p>正常来说，用户接触到的，是最上面的一层，而无法感知到下面的层。要理解互联网，就必须从最下层开始，自下而上理解每一层的功能。</p>
<p>互联网的分层有不同的模型，有<a href="https://zh.wikipedia.org/zh-hans/OSI%E6%A8%A1%E5%9E%8B" target="_blank" rel="external">OSI七层模型</a>,有的分四层<a href="https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F" target="_blank" rel="external">TCP/IP协议簇</a>，按照作者的理解将互联网分为五层。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052902.png" alt="image"></p>
<p>如上图所示，最底下的一层叫做”实体层”（Physical Layer），最上面的一层叫做”应用层”（Application Layer），中间的三层（自下而上）分别是”链接层”（Link Layer）、”网络层”（Network Layer）和”传输层”（Transport Layer）。越下面的层，越靠近硬件；越上面的层，越靠近用户。</p>
<h5 id="1-2-层与协议"><a href="#1-2-层与协议" class="headerlink" title="1.2 层与协议"></a>1.2 层与协议</h5><p>每一层都是为了完成一种功能。为了实现这些功能，就需要大家遵守共同的规则。</p>
<p>大家都遵守的规则，就叫做”协议”（Protocol）。</p>
<p>互联网的每一层，都定义了很多协议。这些协议的总称，就叫做”互联网协议”（Internet Protocol Suite）。它们是互联网的核心，下面介绍每一层的功能，主要是介绍每一层的主要协议。</p>
<h4 id="二、实体层"><a href="#二、实体层" class="headerlink" title="二、实体层"></a>二、实体层</h4><p>从最下层的实体层开始。</p>
<p>电脑要组网，第一件事要干什么？当然是要把电脑连接起来，可以使用光缆、电缆，双绞线，无线网络等等方式。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052903.png" alt="image"></p>
<p><strong>这就叫做”实体层”，它就是把电脑连接起来的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号（电磁波）。</strong></p>
<h4 id="三、链接层"><a href="#三、链接层" class="headerlink" title="三、链接层"></a>三、链接层</h4><h5 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h5><p>单纯的0和1是没有任何意义的，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？</p>
<p><strong>这就是”链接层”的功能，它在”实体层”的上方，确定了0和1的分组方式</strong></p>
<h5 id="3-2-以太网协议"><a href="#3-2-以太网协议" class="headerlink" title="3.2 以太网协议"></a>3.2 以太网协议</h5><p>早期的时候，每家公司都有自己的电信号分组方式。逐渐地，一种叫做”<a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E7%BD%91" target="_blank" rel="external">以太网</a>“（Ethernet）的协议，占据了主导地位。</p>
<p>以太网规定，一组电信号构成一个数据包，叫做”帧”（Frame）。每一帧分成两个部分：标头（Head）和数据（Data）</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052904.png" alt="image"></p>
<p>“标头”包好数据包的一些说明项，比如发送者，接收者，数据类型等等；”数据”则是数据包的具体内容。</p>
<p>“标头”的长度，固定为18字节。”数据”的长度，最短为46字节，最长为1500字节。因此，整个”帧”最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送。</p>
<h5 id="3-3-MAC地址"><a href="#3-3-MAC地址" class="headerlink" title="3.3 MAC地址"></a>3.3 MAC地址</h5><p>上面提到，以太网数据包的”标头”，包含了发送者和接收者的信息。那么，发送者和接收者是如何标识呢？</p>
<p>以太网规定，连入网络的所有设备，都必须具有”网卡”接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做<a href="https://zh.wikipedia.org/wiki/MAC%E5%9C%B0%E5%9D%80" target="_blank" rel="external">MAC地址(Media Access Control Address)</a>。</p>
<p>每块网卡出厂的时候，都有一个全世界独一无二的MAC地址 ，长度是48个二进制位，通常用12个十六进制数表示。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052906.png" alt="image"></p>
<p>前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。有了MAC地址，就可以定位网卡和数据包的路径了。根据Wiki:<strong>(MAC地址共48位（6个字节），以十六进制表示。前24位由IEEE决定如何分配，后24位由实际生产该网络设备的厂商自行指定。<br>)</strong></p>
<h5 id="3-4-广播"><a href="#3-4-广播" class="headerlink" title="3.4 广播"></a>3.4 广播</h5><p>定义地址只是第一步，后面还有更多的步奏。</p>
<p>首先，一块网卡怎么会知道另一块网卡的MAC地址？</p>
<p>答案就是ARP协议，后面将会介绍。以太网数据包必须知道接收方的MAC地址，然后才能发送。</p>
<p>其次，就算有了MAC地址，系统怎样才能吧数据包准确的送到接收方？</p>
<p>答案是以太网采用了一种”原始”的方式，它不是把数据包准确送到接收方，而是向局域网内所有计算机发送，让每台计算机自己判断，是否为接收方。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052907.png" alt="image"></p>
<p>上图中，1号计算机向2号计算机发送一个数据包，同一个局域网的3号、4号、5号计算机都会收到这个包。它们读取这个包的”标头”，找到接收方的MAC地址，然后与自身的MAC地址进行比较，如果两者相同，则接收这个包，做进一步处理，否则就丢弃这个包。这种发送方式叫做”广播”。</p>
<p>有了数据包的定义、网卡的MAC地址、广播的发送方式，”链接层”就可以在多台计算机之间传送数据了。</p>
<h4 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h4><h5 id="4-1-网络层的由来"><a href="#4-1-网络层的由来" class="headerlink" title="4.1 网络层的由来"></a>4.1 网络层的由来</h5><p>以太网协议，依靠MAC地址发送数据。理论上，单单依靠MAC地址，上海的网卡就可以找到洛杉矶的网卡了，技术上是可以实现的。</p>
<p>但是，这样做有一个重大的缺点。以太网采用广播的形式发送数据包，所有成员人手一”包”，不仅效率低，而且局限在发送者所在的网络。也就是说，不同局域网之间，广播是无法送达的。这种设计是合理的，否则互联网上的每一台计算机都会收到所有包，那会引起灾难。</p>
<p>互联网是无数局域网共同组成的一个巨型网络，很难想象上海和洛杉矶的电脑会在同一个局域网，这几乎是不可能的。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052914.png" alt="image"></p>
<p>因此，必须找到一种方法，能够区分哪些MAC地址属于同一个局域网，哪些不是。如果是同一个子网络，就采用广播的形式发送，否则就采用”路由”方式发送。（”路由”的意思，就是指如何向不同的子网络分发数据包）遗憾的是，MAC地址本身无法做到这一点。它只与厂商有关，与所处网络无关。</p>
<p>这就导致了”网络层”的诞生。它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否是属于同一个子网络。这套地址叫做”网络地址”，简称”地址”。</p>
<p>于是，”网络层”出现以后，每台计算机有了两种地址，一种是MAC地址，一种是网络地址。两种地址之间没有任何联系的，MAC地址是绑定在网卡上的，网络地址则是管理员分配的。</p>
<p>网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络的目标网卡。因此，从逻辑上可以判断，必定是先处理网络地址，然后再处理MAC地址。</p>
<h5 id="4-2-IP协议"><a href="#4-2-IP协议" class="headerlink" title="4.2 IP协议"></a>4.2 IP协议</h5><p>规定网络地址的协议，叫做IP协议。它所定义的地址，就被称为IP地址。</p>
<p>目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052908.png" alt="image"></p>
<p>习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。</p>
<p>互联网上的每一条计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位，那么主机部分就是后8位。处于同一个子网络的电脑，它们IP地址的网络部分必须是相同的。</p>
<p>但是，问题在于单单从IP地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从IP地址上是看不出来的。</p>
<p>那么，怎样才能从IP地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数”子网掩码”（subnet mask）。</p>
<p>所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是<br>11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p>
<p>知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p>
<p>比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。</p>
<p>总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p>
<h5 id="4-3-IP数据包"><a href="#4-3-IP数据包" class="headerlink" title="4.3 IP数据包"></a>4.3 IP数据包</h5><p>根据IP协议发送的数据，叫做IP数据包。不难想象，其中必定包括IP地址信息。</p>
<p>但是前面阿说过，以太网数据包只包含MAC地址，并没有IP地质的栏位。那么是否需要修改数据定义，再添加一个栏位呢？</p>
<p>答案是不需要，我们可以把IP数据包直接放到以太网数据包的”数据”部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及到下层的结构。</p>
<p>具体来说，IP数据包也分为”标头”和”数据”两个部分。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052909.png" alt="image"></p>
<p>“标头”部分主要包括版本、长度、IP地址等信息，”数据”部分则是IP数据包的具体内容。它放进以太网数据包后，以太网数据包就变为了下面这样。    </p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052910.png" alt="image"></p>
<p>IP数据包的”标头”部分的长度为20到60个字节，整个数据包的最大长度为65535字节。因此，理论上一个IP数据包的”数据”部分，最长为65515字节。前面有提到，以太网数据包的”数据”部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成多个以太网数据包，分开发送了。</p>
<h5 id="4-4-ARP协议"><a href="#4-4-ARP协议" class="headerlink" title="4.4 ARP协议"></a>4.4 ARP协议</h5><p>关于”网络层”，还有一点需要说明。</p>
<p>因为IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址。通常情况下，对方的IP地址是已知的，但是我们不知道它的MAC地址。</p>
<p>所以，我们需要一种机制，能够从IP地址取到MAC地址。</p>
<p>这里又分为两种状况。第一种状况，如果两台主机不再同一个子网络，那么事实上没有办法去的对方的MAC地址，只能把数据包传送到两个子网络连接处的”网关”，让网关去处理。（当发送主机和目的主机不在同一个局域网中时，即便知道目的主机的MAC地址，两者也不能直接通信，必须经过路由转发才可以。所以此时，发送主机通过ARP协议获得的将不是目的主机的真实MAC地址，而是一台可以通往局域网外的路由器的MAC地址。于是此后发送主机发往目的主机的所有帧，都将发往该路由器，通过它向外发送。）</p>
<p>第二种情况，如果两台主机在同一个子网络，那么我们可以用ARP协议<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">地址解析协议Address Resolution Protocol</a>（注意：在IPv6中已经被<a href="https://zh.wikipedia.org/wiki/%E9%82%BB%E5%B1%85%E5%8F%91%E7%8E%B0%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">邻居发现协议（Neighbor Discovery Protocol）</a>），去的对方的MAC地址。ARP协议也是发出一个数据包（包含在以太网数据包中），其中包含它所要查询诸暨的IP地址，在对方的MAC地址这一栏，填的是FF:FF:FF:FF:FF:FF，表示这是一个”广播”地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。</p>
<p>总之，有了ARP协议以后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了。</p>
<h4 id="五、传输层"><a href="#五、传输层" class="headerlink" title="五、传输层"></a>五、传输层</h4><h5 id="5-1-传输层的由来"><a href="#5-1-传输层的由来" class="headerlink" title="5.1 传输层的由来"></a>5.1 传输层的由来</h5><p>有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上简历通信。</p>
<p>接下来的问题是，同一台主机上又许多程序都需要用到网络。比如，你一边浏览网页，一边与朋友在线聊天，当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是在线聊天的内容？</p>
<p>也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做”端口”，它其实是没一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能读取到自己所需要的数据。</p>
<p>“端口”是0到65535之间的一个整数，正好是16个二进制位。0到1023的端口被系统占用，用户只能选择大于1023的端口，不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口通信。</p>
<p><strong>“传输层”的功能，就是简历“端口到端口”的通信。只有确定主机和端口，我们就能实现程序之间的交流。</strong>因此，Unix系统就把主机+端口，叫做“套接字”（Socket）。有了它，就可以进行网络应用程序的开发了。</p>
<h5 id="5-2-UDP协议"><a href="#5-2-UDP协议" class="headerlink" title="5.2 UDP协议"></a>5.2 UDP协议</h5><p>现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。</p>
<p>UDP数据包，也是由“标头”和“数据”两部分组成。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052911.png" alt="image"></p>
<p>“标头”部分主要是定义了发出端口和接收端口，“数据”部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的“数据”部分，而前面说过，IP数据包又是放在以太网数据包中，所以整个以太网数据包就变成了下面这样：<br><img src="http://image.beekka.com/blog/201205/bg2012052912.png" alt="image"></p>
<p>UDP数据包非常简单，“标头”部分一共只有8个字节，总长度不超过65535字节，正好放进一个IP数据包。</p>
<h5 id="5-3-TCP协议"><a href="#5-3-TCP协议" class="headerlink" title="5.3 TCP协议"></a>5.3 TCP协议</h5><p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。</p>
<p>为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似人为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失。就收不到确认，发出放就知道有必要重发这个数据包了。</p>
<p>因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。</p>
<p>TCP数据包和UDP数据包一样，都是内嵌在IP数据包的“数据”部分。TCP数据包没有长度限制，理论上可以无现场，但是为了保证网络效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p>
<h4 id="六、应用层"><a href="#六、应用层" class="headerlink" title="六、应用层"></a>六、应用层</h4><p>应用程序收到“传输层”的数据，接下来就要进行解毒。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。</p>
<p><strong>“应用层”的作用，就是规定应用程序的数据格式</strong></p>
<p>举例来说，TCP协议可以为各种各样的陈旭传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了“应用层”。</p>
<p>这是最高的一层，直接面对用户。它的数据就放在TCP数据包的“数据”部分。因此，现在的以太网的数据包就变成下面这样。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052913.png" alt="image"></p>
<p>至此，整个互联网的五层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的。<a href="https://jacentsao.github.io/2017/02/06/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="external">下一篇</a>，我反过来，从用户的角度，自上而下看看这个结构是如何发挥作用，完成一次网络数据交换的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文转载自阮一峰的网络日志&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html&quot;&gt;互联网协议入门&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;互联网的核心是一系列的协议,总称为”互联网协议”(Internet Protocol Suite)。它们对电脑如何连接和组网，做出了详尽的规定。理解了这些协议，就理解了互联网的原理。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>go语言中的fmt包学习</title>
    <link href="http://yoursite.com/2017/01/29/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84fmt%E5%8C%85%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/01/29/go语言中的fmt包学习/</id>
    <published>2017-01-29T02:55:38.000Z</published>
    <updated>2017-01-29T03:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="go-doc-fmt-list-all-the-data-below"><a href="#go-doc-fmt-list-all-the-data-below" class="headerlink" title="go doc fmt list all the data below"></a>go doc fmt list all the data below</h3><h4 id="print"><a href="#print" class="headerlink" title="print"></a>print</h4><p>The verbs:</p>
<p>General:</p>
<pre><code>%v    the value in a default format
    when printing structs, the plus flag (%+v) adds field names
%#v    a Go-syntax representation of the value
%T    a Go-syntax representation of the type of the value
%%    a literal percent sign; consumes no value
</code></pre><p>Boolean:</p>
<pre><code>%t    the word true or false
</code></pre><p>Integer:</p>
<pre><code>%b    base 2
%c    the character represented by the corresponding Unicode code point
%d    base 10
%o    base 8
%q    a single-quoted character literal safely escaped with Go syntax.
%x    base 16, with lower-case letters for a-f
%X    base 16, with upper-case letters for A-F
%U    Unicode format: U+1234; same as &quot;U+%04X&quot;
</code></pre><p>Floating-point and complex constituents:</p>
<pre><code>%b    decimalless scientific notation with exponent a power of two,
    in the manner of strconv.FormatFloat with the &apos;b&apos; format,
    e.g. -123456p-78
%e    scientific notation, e.g. -1.234456e+78
%E    scientific notation, e.g. -1.234456E+78
%f    decimal point but no exponent, e.g. 123.456
%F    synonym for %f
%g    %e for large exponents, %f otherwise
%G    %E for large exponents, %F otherwise
</code></pre><p>String and slice of bytes (treated equivalently with these verbs):</p>
<pre><code>%s    the uninterpreted bytes of the string or slice
%q    a double-quoted string safely escaped with Go syntax
%x    base 16, lower-case, two characters per byte
%X    base 16, upper-case, two characters per byte
</code></pre><p>Pointer:</p>
<pre><code>%p    base 16 notation, with leading 0x
</code></pre><p>There is no ‘u’ flag. Integers are printed unsigned if they have unsigned<br>type. Similarly, there is no need to specify the size of the operand (int8,<br>int64).</p>
<p>The default format for %v is:</p>
<pre><code>bool:                    %t
int, int8 etc.:          %d
uint, uint8 etc.:        %d, %x if printed with %#v
float32, complex64, etc: %g
string:                  %s
chan:                    %p
pointer:                 %p
</code></pre><p>Control width and precision:</p>
<pre><code> %f     default width, default precision
%9f    width 9, default precision
%.2f   default width, precision 2
%9.2f  width 9, precision 2
%9.f   width 9, precision 0
</code></pre><h4 id="一些小区别"><a href="#一些小区别" class="headerlink" title="一些小区别"></a>一些小区别</h4><p>函数 fmt.Sprintf 与 Printf 的作⽤是完全相同的，不过前者将格式化后的字符串以返 回值的形式返回给调⽤者，因此你可以在程序中使⽤包含变量的字符串</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;go-doc-fmt-list-all-the-data-below&quot;&gt;&lt;a href=&quot;#go-doc-fmt-list-all-the-data-below&quot; class=&quot;headerlink&quot; title=&quot;go doc fmt list all the 
    
    </summary>
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>go语言中的init()函数</title>
    <link href="http://yoursite.com/2017/01/29/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84init-%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/01/29/go语言中的init-函数/</id>
    <published>2017-01-29T02:43:18.000Z</published>
    <updated>2017-01-29T02:47:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在go语言中,有一类比较特殊的函数,不能够被人为的调用,而是在每个包完成初始化动作后自动执行,而且执行优先级比main函数高.</p>
<p>没一个源文件都可以包含一个或者多个init函数.初始化工作是以单线程执行,并且按照包的依赖关系顺序执行.一个可能的用途是在开始执行程序之前对数据进行检验或者修复,以保证程序状态的正确性.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在go语言中,有一类比较特殊的函数,不能够被人为的调用,而是在每个包完成初始化动作后自动执行,而且执行优先级比main函数高.&lt;/p&gt;
&lt;p&gt;没一个源文件都可以包含一个或者多个init函数.初始化工作是以单线程执行,并且按照包的依赖关系顺序执行.一个可能的用途是在开始执行程
    
    </summary>
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>2017年度flag</title>
    <link href="http://yoursite.com/2017/01/26/2017%E5%B9%B4%E5%BA%A6flag/"/>
    <id>http://yoursite.com/2017/01/26/2017年度flag/</id>
    <published>2017-01-26T01:12:59.000Z</published>
    <updated>2017-01-29T02:48:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>private </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;private &lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Docker学习,常用指令</title>
    <link href="http://yoursite.com/2017/01/24/Docker%E5%AD%A6%E4%B9%A0-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/01/24/Docker学习-常用指令/</id>
    <published>2017-01-24T04:29:04.000Z</published>
    <updated>2017-01-25T13:54:50.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><p>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离， 属于操作系统层面的虚拟化技术。</p>
<a id="more"></a>
<h4 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h4><ul>
<li>docker run -p 2222:22 imagename //运行改image做为container,不存在则会从Docker hub获取并运行; -p 指定本地映射关系,前面是访问地址端口,后面是映射的容器端口</li>
<li>docker exec -it goofy_banach /bin/bash 对比于attach方式,会立即显示进入,并且退出不会导致容器关闭</li>
<li>docker ps //获取正在运行的镜像 -a 所有的镜像</li>
<li>touch Dockerfile //创建docker脚本</li>
<li>cat Dockerfile //查看脚本</li>
<li>docker build -t docker-whale . //创建镜像, -t打tag,后面的.(表示当前目录)不能少</li>
<li>docker tag 7d9495d03763 maryatdocker/docker-whale:latest 标记docker镜像</li>
<li>docker login 登录</li>
<li>docker push maryatdocker/docker-whale 上传到docker hub</li>
<li>docker rmi -f 7d9495d03763/imagename 移除镜像</li>
<li>docker run yourusername/docker-whale</li>
<li>docker images 查看所有镜像</li>
<li>docker rmi $(docker images -q -f dangling=true) 删除无用的悬浮镜像 </li>
<li>docker exec  -it webserver bash 运行命令行并启动</li>
<li>docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]] 提交更新,创建镜像<strong>谨慎使用,因为会对容器环境照成较大影响</strong> //docker commit  –author “Tao Wang <a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x74;&#119;&#x61;&#x6e;&#103;&#50;&#x32;&#49;&#x38;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;">&#x74;&#119;&#x61;&#x6e;&#103;&#50;&#x32;&#49;&#x38;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;</a>“  –message “修改了默认网页” webserver  nginx:v2</li>
<li>docer diff NAMES 查看永久性更新</li>
<li>docker history nginx:v2 查看历史更新</li>
<li>docker rm  删除容器</li>
<li>docker run -it -–entrypoint /bin/bash  karalabe/xgo-latest 强制使用bash启动docker镜像</li>
<li>docker run -it -v /Volumes/Work/go/src/golang.org:/src golang/mobile /bin/bash 挂载宿主机目录到容器</li>
<li>sudo yum upgrade docker 更新docker</li>
<li>docker cp 2e8a06b7cff6:/gopath/src/golang.org/x/mobile/example/GoHello/app/src  Storage-2e8a06b7cff6/</li>
<li>docker logs id/names 查看操作日志</li>
<li>docker top 显示容器进程</li>
<li>docker stats 查看容器进程状态</li>
</ul>
<p>####tag本地镜像并提交到docker仓库<br>step1——找到本地镜像的ID：docker images</p>
<p>step2——登陆Hub：docker login –username=username –password=password –email=email</p>
<p>step3——tag：docker tag <imageid> <namespace>/<image name="">:<version tag="" eg="" latest=""></version></image></namespace></imageid></p>
<p>step4——push镜像：docker push <namespace>/<image name=""></image></namespace></p>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><ul>
<li>mkdir test</li>
<li>cd test</li>
<li>touch Dockerfile</li>
</ul>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ol>
<li>FROM nginx 指定基础镜像,这个是必须的(可以指定一个空白镜像名为scratch)</li>
<li>RUN  没一个RUN代表一层,因此同一个目的的RUN通过&amp;&amp;合并命令,浓缩到一层 (层数限制旧版42,新版127)</li>
<li>COPY  package.json /usr/src/app/ ||  hom?.txt /mydir/</li>
<li>ADD  ubuntu-xenial-core-cloudimg-amd64-root.tar.gz /  src可以是url,加强版的COPY,还可移植性解压缩</li>
<li>docker build -t docker-whale . docker build [选项] &lt;上下文路径/URL/-&gt; .代表当前目录 -t代表tag</li>
<li>ENTRYPOINT 只有最后一个生效 run的时候通过–entrypoint使其生效</li>
</ol>
<h3 id="Docker基本概念"><a href="#Docker基本概念" class="headerlink" title="Docker基本概念"></a>Docker基本概念</h3><p>Docker包括三个基本概念,包含了Docker的整个生命周期</p>
<ul>
<li>镜像(Image)</li>
<li>容器(Container)</li>
<li>仓库(Repository)</li>
</ul>
<h4 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h4><p>Docker镜像,相当于一个root文件系统(操作系统分为内核和用户空间,内核启动后,会挂载root文件系统为用户空间提供支持),镜像不包含任何<strong>动态数据</strong>.提供容器运行时所需的程序、库、资 源、配置等文件外,还包含了一些为运行时准备的一些配置参数（如匿名卷、环境 变量、用户等）.</p>
<h5 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h5><p>镜像包含操作系统完整的root文件系统,体积较大,Docker设计时,采用了<a href="https://en.wikipedia.org/wiki/Union_mount" target="_blank" rel="external">Union FS</a>技术,分层存储的架构.</p>
<p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生 改变，后一层上的任何改变只发生在自己这一层,任何额外的东西应该在该层构建结束前清理掉。</p>
<h4 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h4><p>类比于面向对象程序设计中 的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h4&gt;&lt;p&gt;Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离， 属于操作系统层面的虚拟化技术。&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="运维" scheme="http://yoursite.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>2017阅读记录</title>
    <link href="http://yoursite.com/2017/01/24/2017%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2017/01/24/2017阅读记录/</id>
    <published>2017-01-23T23:44:39.000Z</published>
    <updated>2017-01-23T23:44:53.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一些好的技术文章</title>
    <link href="http://yoursite.com/2017/01/22/%E4%B8%80%E4%BA%9B%E5%A5%BD%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2017/01/22/一些好的技术文章/</id>
    <published>2017-01-22T04:58:08.000Z</published>
    <updated>2017-01-22T05:08:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文旨在收集一些个人比较感兴趣的技术类的文章,希望更多的成长学习.</p>
<h3 id="Linux类"><a href="#Linux类" class="headerlink" title="Linux类"></a>Linux类</h3><ol>
<li><a href="http://blog.chinaunix.net/uid-23069658-id-3142046.html" target="_blank" rel="external">Linux系统中“动态库”和“静态库”那点事儿</a>.  </li>
<li><a href="https://www.gitbook.com/book/leon_lizi/-framework-/details" target="_blank" rel="external">静态库与动态库的使用</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文旨在收集一些个人比较感兴趣的技术类的文章,希望更多的成长学习.&lt;/p&gt;
&lt;h3 id=&quot;Linux类&quot;&gt;&lt;a href=&quot;#Linux类&quot; class=&quot;headerlink&quot; title=&quot;Linux类&quot;&gt;&lt;/a&gt;Linux类&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux系统中动态库和静态库</title>
    <link href="http://yoursite.com/2017/01/22/Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%8A%A8%E6%80%81%E5%BA%93%E5%92%8C%E9%9D%99%E6%80%81%E5%BA%93/"/>
    <id>http://yoursite.com/2017/01/22/Linux系统中动态库和静态库/</id>
    <published>2017-01-22T00:40:53.000Z</published>
    <updated>2017-01-22T04:23:19.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="原文转载自wjlkoorey的博客"><a href="#原文转载自wjlkoorey的博客" class="headerlink" title="原文转载自wjlkoorey的博客"></a>原文转载自<a href="http://blog.chinaunix.net/uid-23069658-id-3142046.html" target="_blank" rel="external">wjlkoorey的博客</a></h5><p>最近一直在学习go语言跨平台编译,在这个过程中也学习了其它很多的内容,今天回顾一下Linux系统下动态库(.so)和静态(.a)的程序那些猫腻.在这之前，我们需要了解一下源代码到可执行程序之间到底发生了什么神奇而美妙的事情。</p>
<p>在Linux操作系统中，普遍使用ELF格式作为可执行程序或者程序生成过程中的中间格式。ELF（Executable and Linking Format，可执行连接格式）是UNIX系统实验室（USL）作为应用程序二进制接口（Application BinaryInterface，ABI）而开发和发布的。工具接口标准委员会（TIS）选择了正在发展中的ELF标准作为工作在32位Intel体系上不同操作系统之间可移植的二进制文件格式。源代码到可执行程序的转换时需要经历如下图所示的过程：</p>
<p><img src="https://encrypted-tbn1.gstatic.com/images?q=tbn:ANd9GcRVaYfvML9MiCHmqr9KBqadX6_DbW8XIiJXlUttBvbfuwWG4Wv3" alt="image"></p>
<ul>
<li>编译是把高级语言编写的程序转换为对应处理器的汇编语言的过程.从本质上来说,编译是一个文本转换的过程.对嵌入式系统而言,一般要把用C语言编写的程序转换成处理器的会变代码.编译过程包含了C语言的语法解析和汇编代码的生成两个步骤.编译一般是逐个文件进行的,对于一个C语言编写的文件,可能还需要进行预处理.</li>
<li>汇编是从会变语言程序生成目标系统的二进制代码(机器码)的过程,机器码的生成和处理器有密切的关系.相对于编译过程的语法解析,汇编的过程相对简单.这是因为对于一款特定的处理器,其汇编语言和二进制的机器代码是一一对应的.汇编过程的输入是汇编代码,这个汇编代码可能来源于编译过程的输出,也可以是直接使用汇编语言书写的程序.</li>
<li>连接是指将汇编生成的多段机器代码组合成一个可执行程序.一般来说,通过汇编和汇编过程,每个源文件将生成一个目标文件.连接器的作用是将这些目标文件组合起来,组合的过程包括了代码段,数据段等部分的合并,以及添加相应的头文件</li>
</ul>
<p>GCC是Linux下主要的程序生成工具,它除了汇编器,编译器,连接器外,还包括一些辅助工具.在下面的分析过程中我会教大家这些工具的基本使用方法.</p>
<p> 作为UNIX操作系统的一种，Linux的操作系统提供了一系列的接口，这些接口被称为系统调用（System Call）。在UNIX的理念中，系统调用“提供的是机制，而不是策略“。C语言的库函数通过调用系统调用来实现，库函数对上层提供了C语言库文件的接口。在应用程序层，通过调用C语言库函数和系统调用来实现功能。一般来说，应用程序大多使用C语言库函数实现其功能，较少使用系统调用。</p>
<p> 那么最后的可执行文件到底是什么样子呢？前面已经说过，这里我们不深入分析ELF文件的格式，只是给出它的一个结构图和一些简单的说明，以方便大家理解。</p>
<p>ELF文件格式包括三种主要的类型：可执行文件、可重定向文件、共享库。</p>
<h4 id="1-可执行文件"><a href="#1-可执行文件" class="headerlink" title="1.可执行文件"></a>1.可执行文件</h4><p>可执行文件包含了代码和数据，是可以直接运行的程序。</p>
<h4 id="2-可重定向文件"><a href="#2-可重定向文件" class="headerlink" title="2.可重定向文件"></a>2.可重定向文件</h4><p>可重定向文件又称为目标文件，它包含了代码和数据（这些数据是和其他重定位文件和共享的object文件一起连接时使用的）。</p>
<p>*.o文件参与程序的连接（创建一个程序）和程序的执行（运行一个程序），它提供了一个方便有效的方法来用并行的视角看待文件的内容，这些*.o文件的活动可以反映出不同的需要。</p>
<p>Linux下，我们可以用gcc -c编译源文件时可将其编译成*.o格式。</p>
<h4 id="3-共享库"><a href="#3-共享库" class="headerlink" title="3.共享库"></a>3.共享库</h4><p>也称为动态库文件，它包含了代码和数据（这些数据是在连接时候被连接器ld和运行时动态连接器使用的）。动态连接器可能称为ld.so.1，libc.so.1或者 ld-linux.so.1。</p>
<p>一个ELF文件从连接器（Linker）的角度看，是一些节的集合；从程序加载器（Loader）的角度看，它是一些段（Segments）的集合。ELF格式的程序和共享库具有相同的结构，只是段的集合和节的集合上有些不同。</p>
<h3 id="那么到底什么是库呢？"><a href="#那么到底什么是库呢？" class="headerlink" title="那么到底什么是库呢？"></a>那么到底什么是库呢？</h3><p>库从本质上来说是一种可执行代码的二进制格式，可以被载入内存中执行。库分静态库和动态库两种。</p>
<p>静态库：这类库的名字一般是libxxx.a，xxx为库的名字。利用静态函数库编译成的文件比较大，因为整个函数库的所有数据都会被整合进目标代码中，他的优点就显而易见了，即编译后的执行程序不需要外部的函数库支持，因为所有使用的函数都已经被编译进去了。当然这也会成为他的缺点，因为如果静态函数库改变了，那么你的程序必须重新编译。</p>
<p>动态库：这类库的名字一般是libxxx.M.N.so，同样的xxx为库的名字，M是库的主版本号，N是库的副版本号。当然也可以不要版本号，但名字必须有。相对于静态函数库，动态函数库在编译的时候并没有被编译进目标代码中，你的程序执行到相关函数时才调用该函数库里的相应函数，因此动态函数库所产生的可执行文件比较小。由于函数库没有被整合进你的程序，而是程序运行时动态的申请并调用，所以程序的运行环境中必须提供相应的库。动态函数库的改变并不影响你的程序，所以动态函数库的升级比较方便。linux系统有几个重要的目录存放相应的函数库，如/lib /usr/lib。</p>
<p>当要使用静态的程序库时，连接器会找出程序所需的函数，然后将它们拷贝到执行文件，由于这种拷贝是完整的，所以一旦连接成功，静态程序库也就不再需要了。然而，对动态库而言，就不是这样。动态库会在执行程序内留下一个标记指明当程序执行时，首先必须载入这个库。由于动态库节省空间，linux下进行连接的缺省操作是首先连接动态库，也就是说，如果同时存在静态和动态库，不特别指定的话，将与动态库相连接。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;原文转载自wjlkoorey的博客&quot;&gt;&lt;a href=&quot;#原文转载自wjlkoorey的博客&quot; class=&quot;headerlink&quot; title=&quot;原文转载自wjlkoorey的博客&quot;&gt;&lt;/a&gt;原文转载自&lt;a href=&quot;http://blog.chinaunix
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="动态库" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    
      <category term="静态库" scheme="http://yoursite.com/tags/%E9%9D%99%E6%80%81%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Android数据持久化</title>
    <link href="http://yoursite.com/2017/01/19/Android%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>http://yoursite.com/2017/01/19/Android数据持久化/</id>
    <published>2017-01-19T08:18:48.000Z</published>
    <updated>2017-01-19T08:19:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天晚上Android项目组的小伙伴一起聊了一下Android数据持久化的几种方式外加一些项目中的总结吧.突然发现一些不怎么用的东西都已经快忘光了,比如说ContentProvider + LoadManger + URIMatcher + CursorAdapter,今天突然提到LoadManager感觉像是一个没接触过的东西,被小伙伴提了一下才记得有这个类的存在,更别提ContentObserver了.有点跑题了还是聊一下Android的数据持久化策略吧!<br><a id="more"></a></p>
<p>##Android数据持久化的方式<br>总所周知,Android共有五种数据持久化的方式,这里是<a href="https://developer.android.com/guide/topics/data/data-storage.html" target="_blank" rel="external">官方文档</a>.通过阅读API Guidance可知,这其中方式分别如下:</p>
<p>###1. SharePreference<br>通常用于存储一些本地化的配置文件,主要分为读和取,操作如下:</p>
<p>1.写入操作</p>
<pre><code>// We need an Editor object to make preference changes.
  // All objects are from android.context.Context
SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);
SharedPreferences.Editor editor = settings.edit();
editor.putBoolean(&quot;silentMode&quot;, mSilentMode);
// Commit the edits!
editor.commit();           
    //finally we can see these file in data/data/packagename/shared_preference if your device has been rooted;   
</code></pre><p>2.读取操作</p>
<pre><code>// Restore preferences
SharedPreferences settings = getSharedPreferences(PREFS_NAME, 0);
//false stands for the default value, you can customize yourself
boolean silent = settings.getBoolean(&quot;silentMode&quot;, false);
</code></pre><p>###2. Internal Storage<br>第一点提到的SharePreference存储的方式最终存放的位置就是在Internal Storage中</p>
<pre><code>String FILENAME = &quot;hello_file&quot;;
String string = &quot;hello world!&quot;;
//finally the file path is data/data/packagename/files/hello_file
//and there are kinds of MODE(MODE_PRIVATE,MODE_APPEND,MODE_WORLD_READABLE,MODE_WORLD_WRITABLE)
FileOutputStream fos = openFileOutput(FILENAME, Context.MODE_PRIVATE);
fos.write(string.getBytes());
fos.close();                    
</code></pre><p>值得注意的是从API 17开MODE_WORLD_READABLE跟MODE_WORLD_WRITABLE已经是deprecated的状态.从API 23开始,由于谷歌收紧了Android系统的权限(Android越来越封闭,苹果越来越开放,目的都是为了体验越来越好!),如果还使用这两个属性会直接抛出异常SecurityException.因此如果你的应用的TargetVersion在API 23,那么如果你想共享应用的内部数据则只能通过主动分享的方式发起共享,详见<a href="https://developer.android.com/training/secure-file-sharing/index.html" target="_blank" rel="external">参考文档</a>.</p>
<p>正如官方文档所提,如果想要存储静态文件,比如说应用的铃声之类的文件,可以放在项目的res/raw/路径下,通过openRawResource(R.raw.fileId)获取对应的资源文件.</p>
<p>####保存Cache文件<br>通过getCacheDir()可以返回app内部的cache文件,该目录即data/data/packagename/cache由系统维护,但是谷歌的官方建议是自行维护1MB左右,该目录会随着应用卸载而被清理掉.其他诸如getFileDir(),getDir()会在后文有个总结性的说明.</p>
<p>###3. External Storage<br>Android的外部存储可以分为可卸载的存储例如SD卡,以及不可卸载的内部存储(Internal Storage).通过USB文件传输模式连接的时候,用户可以对外部存储进行操作.</p>
<p>当用户挂载外部存储或者移除外部存储的时候,应用就无法操作外部存储了.同时外部存储的全局可读特性也决定了它本身并没有安全性可言.</p>
<p>####获取访问外部存储的权限<br>如果你的应用需要读写外部存储则需要在manifest文件中配置如下权限:</p>
<pre><code>&lt;manifest ...&gt;
    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;
    ...
&lt;/manifest&gt;        
</code></pre><p>如果只需要读取权限只需申明READ_EXTERNAL_STORAGE权限即可;如果需要读写权限只需要申明WRITE_EXTERNAL_STORAGE权限即可,因为系统会同时声明读取权限.</p>
<p>注意:从Android4.4开始,如果只需要读写app内部的文件,则无需申明读写权限.</p>
<p>####检查是否具备读写权限<br>无论在什么地方进行外部存储操作的时候你都应该检查外部存储是否处于可用状态.</p>
<pre><code>/*Ckecks if external storage is available for read and write\*/
public boolean isExternalStorageAvailable(){
    String state = Environment.getExternalStorageState();
    return Environment.MEDIA_MOUNTED.equals();
}
</code></pre><p>通过Environment.getExternalStorageState()可以获得外部存储的状态,如连接到电脑,彻底移除,不恰当的移除等等;此时你可以通过判断外部存储的状态来决定是否需要访问外部存储的媒体文件.如下所示为外置存储的不同状态:</p>
<pre><code>public static final String MEDIA_BAD_REMOVAL = &quot;bad_removal&quot;;
public static final String MEDIA_CHECKING = &quot;checking&quot;;
public static final String MEDIA_EJECTING = &quot;ejecting&quot;;
public static final String MEDIA_MOUNTED = &quot;mounted&quot;;
public static final String MEDIA_MOUNTED_READ_ONLY = &quot;mounted_ro&quot;;
public static final String MEDIA_NOFS = &quot;nofs&quot;;
public static final String MEDIA_REMOVED = &quot;removed&quot;;
public static final String MEDIA_SHARED = &quot;shared&quot;;
public static final String MEDIA_UNKNOWN = &quot;unknown&quot;;
public static final String MEDIA_UNMOUNTABLE = &quot;unmountable&quot;;
public static final String MEDIA_UNMOUNTED = &quot;unmounted&quot;;
</code></pre><p>####保存文件共享给其他应用<br>主要是公共的多媒体库,例如MUSIC,PICTURE等等,通过以下方式获得</p>
<pre><code>Environment.getExternalPublicDirectory(String type)
</code></pre><p>其中type可分为如下几种,对应到外部存储的不同位置.</p>
<pre><code>public static String DIRECTORY_ALARMS;
public static String DIRECTORY_DCIM;
public static String DIRECTORY_DOCUMENTS;
public static String DIRECTORY_DOWNLOADS;
public static String DIRECTORY_MOVIES;
public static String DIRECTORY_MUSIC;
public static String DIRECTORY_NOTIFICATIONS;
public static String DIRECTORY_PICTURES;
public static String DIRECTORY_PODCASTS;
public static String DIRECTORY_RINGTONES;
</code></pre><p>####保存应用私有文件<br>如果你的应用有一些私有文件,如音效文件,此时可以在外部存储中创建一个私有的文件目录:</p>
<pre><code>//if you pass null as the type return the root directory
//storage/emulated/0/Android/data/packagename/
//of course you can pass non null type to create a subdirectory
Context.getExternalFilesDir(String type)    
</code></pre><p>从Android 4.4开始,读写应用的私有空间的文件并不需要读写权限,因此如果其他地方无需读写权限的情况下可以通过一下方式申明:</p>
<pre><code>&lt;manifest ...&gt;
    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;
                     android:maxSdkVersion=&quot;18&quot; /&gt;
    ...
&lt;/manifest&gt;
</code></pre><p>这里有个事情需要说明的是,这个应用的私有目录会随着应用的卸载而删除.同时,在媒体库中并不会显示应用的私有文件,因此,如果在你的app中属于用户的文件是不能保存到这个目录的,例如用户购买的音乐.    </p>
<p>有些手机会把内置存储划出来一部分做为外置存储使用(我们现在使用的多数都是这种方式),但是的手机还提供了SD卡卡槽.对于Android 4.3及以下的设备,通过getExternalFilesDir()只能获得内置存储中划出来的那一部分,也就是说并不能获得SD卡部分.从Android4.4开始通过getExternalFilesDir()返回的是一个数组.只有在内置存储划分的外置存储不可用或者占用满的情况下才选择使用SD卡做为应用的私有存储空间.如果想要在Android4.3及以下的设备中获取该路径则通过兼容包ContextCompact.getExternalFilesDirs()获取.</p>
<p>需要注意的是,尽管对于媒体中心(MediaStore)而言,应用外部存储的私有空间是不可见的,但是对于其他具有读取或者写入存储权限的软件而言,放在外部存储的文件是可读可写的.因此,如果你不想你的文件被别的软件使用或者更改的话,就只能放到应用的内部空间了.</p>
<p>####保存缓存文件<br>通过如下方式获得缓存文件的保存目录,缓存目录会随着应用的卸载而被删除:</p>
<pre><code>getExternalCacheDir();
</code></pre><p>跟上面提到的类似,你也可以通过ContextCompact.getExternalCacheDirs()获得SD卡之类的外置存储的缓存路径.</p>
<p>在代码开发的时候我们应该特别注意缓存文件的维护,防止缓存文件占用过多的空间.比如说我们使用一些第三方的框架的时候会让我们配置缓存空间大小.</p>
<p>##Using Databases<br>Android支持SQLite的所有功能,在应用里面创建的数据库能够被应用的任何一个类访问,但是不能在应用外访问.通常可以配合URIMatcher + ContentProvider + SQLiteOpenHelper进行数据库数据共享,列入联系人的获取.</p>
<p>##Using NetWork Connection<br>即数据存储在服务端,通过网络获取持久化数据.</p>
<p>##总结<br>前面基本上是对于官方文档的一种翻译和理解,后面来说一下自己的总结,首先观察一下现象</p>
<pre><code> ///storage/emulated/0/Android/data/com.max.testuninstall/cache
Log.d(TAG, &quot;onCreate: 外部缓存存储&quot; + this.getExternalCacheDir().toString());
//storage/emulated/0/Android/data/com.max.testuninstall/files
Log.d(TAG, &quot;onCreate: 外部私有存储&quot; + this.getExternalFilesDir(null).toString());
///storage/emulated/0
Log.d(TAG, &quot;onCreate: 外部共用存储&quot; + Environment.getExternalStorageDirectory().toString());
///data/user/0/com.max.testuninstall/cache
Log.d(TAG, &quot;onCreate: 内部缓存存储&quot; + this.getCacheDir().toString());
///data/user/0/com.max.testuninstall/files
Log.d(TAG, &quot;onCreate: 内部文件存储&quot; + this.getFilesDir().toString());
///data/user/0/com.max.testuninstall/app_null
Log.d(TAG, &quot;onCreate: 内部文件存储&quot; + this.getDir(null, MODE_PRIVATE).toString());
///data/user/0/com.max.testuninstall/app_hello_world
Log.d(TAG, &quot;onCreate: 内部文件存储&quot; + this.getDir(&quot;hello_world&quot;, MODE_PRIVATE).toString());
///data/user/0/com.max.testuninstall/files(List)
Log.d(TAG, &quot;onCreate: 内部文件存储,返回目录下所有文件&quot; + this.fileList().toString());
String FILENAME = &quot;hello_file&quot;;
String string = &quot;hello world!&quot;;
//data/data/packagename/files/hello_file
FileOutputStream fos = this.openFileOutput(FILENAME, Context.MODE_PRIVATE);
fos.write(string.getBytes());
fos.close();
</code></pre><p>以上对应前文所说的通过不同方式获取内部,外部文件及缓存路径.</p>
<p>###读写权限<br>Internal Storage本身无需声明任何权限即可进行读写操作.External Storage<br>从Android4.4开始读写应用私有空间无需声明读写权限,Android4.3及以下需要声明读写权限.Android系统中写入External Storage权限包含读取External Storage权限.</p>
<p>###应用卸载<br>通过上面对应的日志结合实际操作发现,Context获取的路径在应用卸载的时候会被同时删除,其实这也是可以理解的,毕竟是属于应用私有的文件.通过Environment获得的路径属于外界环境的,所以不会跟随应用的卸载而被删除掉.</p>
<p>###多用户<br>在/storage/emulated/目录下面会有 0(默认用户),如果新建一个用户则是10,再新建则是11依此类推.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天晚上Android项目组的小伙伴一起聊了一下Android数据持久化的几种方式外加一些项目中的总结吧.突然发现一些不怎么用的东西都已经快忘光了,比如说ContentProvider + LoadManger + URIMatcher + CursorAdapter,今天突然提到LoadManager感觉像是一个没接触过的东西,被小伙伴提了一下才记得有这个类的存在,更别提ContentObserver了.有点跑题了还是聊一下Android的数据持久化策略吧!&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android ADB命令大全</title>
    <link href="http://yoursite.com/2017/01/19/Android-ADB%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://yoursite.com/2017/01/19/Android-ADB命令大全/</id>
    <published>2017-01-19T08:13:13.000Z</published>
    <updated>2017-01-19T09:10:20.000Z</updated>
    
    <content type="html"><![CDATA[<pre><code>adb shell dumpsys package packagename //获取所有app的信息
adb shell ps | grep packagename //获取指定app的进程信息
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;adb shell dumpsys package packagename //获取所有app的信息
adb shell ps | grep packagename //获取指定app的进程信息
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="命令行" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Root Nexus 6 Android 7.1 官方镜像</title>
    <link href="http://yoursite.com/2017/01/19/Root-Nexus-6-Android-7-1-%E5%AE%98%E6%96%B9%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2017/01/19/Root-Nexus-6-Android-7-1-官方镜像/</id>
    <published>2017-01-19T06:03:12.000Z</published>
    <updated>2017-01-19T06:31:38.000Z</updated>
    
    <content type="html"><![CDATA[<p> 本教程适用于Android7.1官方系统的Nexus 6 Root, 使用于Android 7.1.1 N6F26Q Nougat,请确保你将要root的是该设备. 原文<a href="http://www.teamandroid.com/2017/01/11/root-nexus-6-android-7-1-1-n6f26q-nougat-official-factory-image/2/" target="_blank" rel="external">地址</a>,可自行查看.<br> <a id="more"></a></p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul>
<li>本教程仅适用于安装 Android 7.1.1 (N6F26Q) 的Nexus 6设备,我自己的美版型号root正常.</li>
<li>手机需要解锁bootloader<a href="http://www.teamandroid.com/2014/12/11/unlock-bootloader-nexus-6/" target="_blank" rel="external">教程</a></li>
<li>系统必须为Android 7.1.1 N6F26Q Nougat官方镜像 <a href="http://www.teamandroid.com/2017/01/11/update-nexus-6-android-7-1-1-n6f26q-nougat-official-factory-image/" target="_blank" rel="external">教程</a></li>
</ul>
<h5 id="详细步骤"><a href="#详细步骤" class="headerlink" title="详细步骤"></a>详细步骤</h5><ol>
<li>下载Android SDK工具<a href="https://developer.android.com/studio/index.html#downloads" target="_blank" rel="external">地址</a>,仅获取命令行工具即可.这个地址需要翻墙</li>
<li>打开开发者选项里面的USB调试</li>
<li>下载<a href="http://www.devfiles.co/download/XYcfXURV/SuperSU-v2.78-201609011115.zip" target="_blank" rel="external">SuperSU</a></li>
<li>拷贝到手机存储空间根目录</li>
<li>下载<a href="http://www.devfiles.co/download/BWxptq2J/twrp-3.0.2-0-shamu.img" target="_blank" rel="external">TWRP</a></li>
<li><p>关机后按音量- 和 关机键进入bootloader模式,使用下载的命令行工具刷入twrp(如果没有添加命令行工具路径到环境变量则需要在放置命令行工具):</p>
<p> fastboot flash recovery twrp-3.0.2-0-shamu.img</p>
</li>
<li><p>刷入完成后,选择RECOVERY模式进入</p>
</li>
<li>选择flash zip from SD card,选中前面的SuperSU XX文件,按电源键确认刷入</li>
<li>最后选择reboot system,重启以后如果有了SuperSU这个app说明root成功了.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 本教程适用于Android7.1官方系统的Nexus 6 Root, 使用于Android 7.1.1 N6F26Q Nougat,请确保你将要root的是该设备. 原文&lt;a href=&quot;http://www.teamandroid.com/2017/01/11/root-nexus-6-android-7-1-1-n6f26q-nougat-official-factory-image/2/&quot;&gt;地址&lt;/a&gt;,可自行查看.&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Root" scheme="http://yoursite.com/tags/Root/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务端更新Android SDK</title>
    <link href="http://yoursite.com/2017/01/19/Linux%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9B%B4%E6%96%B0Android-SDK/"/>
    <id>http://yoursite.com/2017/01/19/Linux服务端更新Android-SDK/</id>
    <published>2017-01-18T16:57:39.000Z</published>
    <updated>2017-01-18T17:00:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间因为新版本需求更新了一下项目的Recycleview版本,对应的SDK也更新了.项目组的几位同事的项目全都因为找不到对应的SDK报错了,后面把自己的SDK拷贝一份给他们才OK(实在想吐槽一下,我觉得做为一个Android程序员翻墙是一项基本的技能).<br><a id="more"></a><br>然而就在今天根据新的安排,后续打包统一走运维.而运维使用的是jenkins集成打包,然后上传到<a href="http://fir.im/" target="_blank" rel="external">fir</a>,测试人员直接下载安装然后进行测试.结果服务端果然出现了同样的错误.</p>
<pre><code>   Could not resolve all dependencies for configuration &apos;:app:_debugCompile&apos;.
   &gt; Could not find com.android.support:recyclerview-v7:23.4.0.
Searched in the following locations:
    https://jcenter.bintray.com/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.pom
    https://jcenter.bintray.com/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.jar
    file:/root/.jenkins/jobs_android/workspace/appbs/recyclerview-v7-23.4.0.jar
    file:/root/.jenkins/jobs_android/workspace/appbs/recyclerview-v7.jar
    file:/usr/local/android/extras/android/m2repository/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.pom
    file:/usr/local/android/extras/android/m2repository/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.jar
    file:/usr/local/android/extras/google/m2repository/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.pom
    file:/usr/local/android/extras/google/m2repository/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.jar
Required by:
    workspace:app:unspecified
    workspace:app:unspecified &gt; com.yanzhenjie:recyclerview-swipe:1.0.1
    &gt; Could not find com.android.support:recyclerview-v7:23.4.0.
Searched in the following locations:
    https://jcenter.bintray.com/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.pom
    https://jcenter.bintray.com/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.jar
    file:/root/.jenkins/jobs_android/workspace/appbs/recyclerview-v7-23.4.0.jar
    file:/root/.jenkins/jobs_android/workspace/appbs/recyclerview-v7.jar
    file:/usr/local/android/extras/android/m2repository/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.pom
    file:/usr/local/android/extras/android/m2repository/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.jar
    file:/usr/local/android/extras/google/m2repository/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.pom
    file:/usr/local/android/extras/google/m2repository/com/android/support/recyclerview-v7/23.4.0/recyclerview-v7-23.4.0.jar
Required by:
    workspace:app:unspecified &gt; com.android.support:design:23.1.1
</code></pre><p>然后我就跟运维的胖哥搜索教程,第一步去Github上面下载了<a href="https://github.com/getlantern/lantern" target="_blank" rel="external">lantern</a> (Lantern都有付费版本了),然后去谷歌搜索Linux update Android SDK,然后找到了官方的<a href="http://tools.android.com/recent/updatingsdkfromcommand-line" target="_blank" rel="external">教程</a>,在GFW的帮助下,并没有什么用.<img src="http://tools.android.com/recent/updatingsdkfromcommand-line/2011-08-19%20tools%20screenshot%20r12%20install%20no-ui%20b.png?attredirects=0" alt="Official Guidance"></p>
<p>第二步,想在运维那里直接使用云梯翻墙更新(这里吐槽一下,云梯实在很不稳定,建议自己买VPS+Shadowsocks才是王道).跟预料的一样,根本连不上.</p>
<p>第三步,其实一开始思路就是错的,用什么谷歌搜索,只有少数的被国家保护的公民才有这种问题啊,所以直接使用百度搜索即可.果然还是自家人懂得自家事,找到了很多<a href="https://segmentfault.com/a/1190000004639481" target="_blank" rel="external">内容</a>.</p>
<pre><code>//step 0:cd 到你安装SDK目录的Tools目录下(例如:/Volumes/work/sdk/tools)

//step 1:设置代理获取可更新列表
./android list sdk --extended --proxy-host android-mirror.bugly.qq.com --proxy-port 8080 -s

//step 2:设置更新代理并选择下载文件,我这里选择的所有 -a
./android update sdk --proxy-host android-mirror.bugly.qq.com --proxy-port 8080 -s -u -a        


//当然你也可以自定义参数
 Updates the SDK by suggesting new platforms to install if available.
Options:
  -f --force     : Forces replacement of a package or its parts, even if
                   something has been modified.
  -n --dry-mode  : Simulates the update but does not download or install
                   anything.
     --proxy-host: HTTP/HTTPS proxy host (overrides settings if defined)
  -s --no-https  : Uses HTTP instead of HTTPS (the default) for downloads.
  -t --filter    : A filter that limits the update to the specified types of
                   packages in the form of a comma-separated list of
                   [platform, system-image, tool, platform-tool, doc, sample,
                   source]. This also accepts the identifiers returned by
                   &apos;list sdk --extended&apos;.
  -u --no-ui     : Updates from command-line (does not display the GUI)
     --proxy-port: HTTP/HTTPS proxy port (overrides settings if defined)
  -p --obsolete  : Deprecated. Please use --all instead.
  -a --all       : Includes all packages (such as obsolete and non-dependent
                   ones.)



//step 3:同意license内容,反正你也没的选,然后就会自动下载并解压
Do you accept the license &apos;android-sdk-preview-license-52d11cd2&apos; [y/n]:
</code></pre><p>这里代理服务器其实蛮多的,参考<a href="http://www.androiddevtools.cn/" target="_blank" rel="external">AndroidDev</a>,不懂翻墙人士的福音.深圳地区设置腾讯代理以后下载速度基本上都是2-3M起,速度非常快.</p>
<p><strong>使用上面命令行是因为Linux Server没有可用图形操作界面,如果有图形操作界面的话还是不要使用这种方式了</strong>,把时间花在更有用的地方吧!毕竟我们是一群需求没定好就能把项目做完的码农!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间因为新版本需求更新了一下项目的Recycleview版本,对应的SDK也更新了.项目组的几位同事的项目全都因为找不到对应的SDK报错了,后面把自己的SDK拷贝一份给他们才OK(实在想吐槽一下,我觉得做为一个Android程序员翻墙是一项基本的技能).&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="自动构建" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/"/>
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
  </entry>
  
</feed>
