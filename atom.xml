<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silence of Heart</title>
  
  <subtitle>最怕彷徨无前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-12T12:46:38.842Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JacenTsao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java-深入理解Java虚拟机-对象的创建,内存布局,访问定位</title>
    <link href="http://yoursite.com/2019/03/11/java-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA-%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80-%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/"/>
    <id>http://yoursite.com/2019/03/11/java-深入理解Java虚拟机-对象的创建-内存布局-访问定位/</id>
    <published>2019-03-11T13:07:38.000Z</published>
    <updated>2019-03-12T12:46:38.842Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2-3-1-对象的创建"><a href="#2-3-1-对象的创建" class="headerlink" title="2.3.1. 对象的创建"></a>2.3.1. 对象的创建</h4><p>对象的创建主要过程包含了类加载检查、对象内存分配、并发处理、内存空间初始化、对象设置、执行init方法等。主要流程如下：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190311214054.png" alt=""></p><h5 id="1-类加载检查"><a href="#1-类加载检查" class="headerlink" title="1. 类加载检查"></a>1. 类加载检查</h5><p>虚拟机遇到一条new指令时，首先讲去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，则首先要执行相应的类加载过程。</p><h5 id="2-分配内存"><a href="#2-分配内存" class="headerlink" title="2. 分配内存"></a>2. 分配内存</h5><p>对象所需内存的大小在类加载完成后便可完全确定（对象的内存布局），为对象分配空间的任务等同于把一块确定大小的内存从java堆中划分出来。 </p><p>根据堆中的内存是否规整（选用哪种方式取决于Java堆是否规整，而Java堆是否规整取决于jvm采用的内存收集器是否有compact功能）分两种内存分配方式：</p><ul><li><strong>指针碰撞（Bump the Pointer）</strong> 假设Java堆中的内存是绝对规整的，所有用过的内存都放在一边，空闲的放在一边，中间放着一个指针做为分界点的指示器，那分配内存就是把这个指针向空闲空间移动分配的内存大小的距离。</li><li><strong>空闲列表（Free List）</strong> Java堆中的内存不连续的情况下，jvm维护一个列表，记录哪些内存空间可用，哪些内存空间不可用。当进行内存分配的时候，在空闲列表中找一块空间足够大的内存块分配内存。</li></ul><h5 id="3-并发处理"><a href="#3-并发处理" class="headerlink" title="3. 并发处理"></a>3. 并发处理</h5><p>对象创建在虚拟机是一个非常频繁的行为，即使是只修改一个指针的位置，在并发情况下也并不是线程安全的，可能出现正在给A对象分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况。解决这个问题有两种方案：</p><ul><li><strong>同步</strong> 对内存分配的动作进行同步处理–实际上虚拟机采用CAS配置失败重试的方式保证更新操作的原子性。</li><li><strong>本地线程分配缓冲(Thread Local Allocation Buffer)</strong> 把内存分配的动作按照线程划分在不同的空间之中进行。即每个线程在Java堆中预先分配一小块内存。哪个线程需要分配内存，就在那个线程的TLAB上分配，只有当TLAB的空间不足的重新分配TLAB的时候才需要线程同步锁定。jvm配置参数-XX:+/-UseTLAB</li></ul><h5 id="4-内存空间初始化"><a href="#4-内存空间初始化" class="headerlink" title="4. 内存空间初始化"></a>4. 内存空间初始化</h5><p>虚拟机将分配到的内存空间初始化为零值（不包括对象头），如果使用TLAB，这一过程也可以提前至TLAB分配时进行。</p><p>这一过程可以让对象在使用的时候不用赋值就可以使用。</p><h5 id="5-对象设置"><a href="#5-对象设置" class="headerlink" title="5. 对象设置"></a>5. 对象设置</h5><p>虚拟机对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分带年龄等信息。这些信息存放在对象头中。</p><h5 id="6-对象init"><a href="#6-对象init" class="headerlink" title="6. 对象init()"></a>6. 对象init()</h5><p>从虚拟机的角度来看，对象已经产生了。从Java角度来看，对象的创建才刚刚开始-init()方法还没有执行，对象的所有字段都还是零值。</p><p>所以，一般来说由字节码是否跟随invokespecial指令所决定，执行new指令之后会接着执行init方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才选完全产生出来。</p><h4 id="2-3-2-对象的内存布局"><a href="#2-3-2-对象的内存布局" class="headerlink" title="2.3.2. 对象的内存布局"></a>2.3.2. 对象的内存布局</h4><p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Object Head）、实例数据（Instance Data）和对齐填充（Padding）。</p><h5 id="1-对象头"><a href="#1-对象头" class="headerlink" title="1. 对象头"></a>1. 对象头</h5><p>HotSpot虚拟机的对象头包含两部分信息： </p><h6 id="1-存储对象运行时数据"><a href="#1-存储对象运行时数据" class="headerlink" title="1. 存储对象运行时数据"></a>1. 存储对象运行时数据</h6><p>哈希码、GC分代年龄、锁状态标志、线程所持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位虚拟机（未开启<a href="https://wiki.openjdk.java.net/display/HotSpot/CompressedOops" target="_blank" rel="noopener">压缩指针1</a>，<a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/oops/markOop.hpp" target="_blank" rel="noopener">指针压缩2</a>）中分别为32bit和64bit，官方称他为Mark Word。</p><h6 id="2-类型指针"><a href="#2-类型指针" class="headerlink" title="2. 类型指针"></a>2. 类型指针</h6><p>类型指针，即对象指向它的<a href="https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener">类元数据</a>的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><p>并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身。(句柄方式访问对象的话是通过类型数据指针来查找的)</p><p>如果对象是一个Java数组，对象头中还存有记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中无法确定数组的大小</p><h5 id="2-实例数据"><a href="#2-实例数据" class="headerlink" title="2. 实例数据"></a>2. 实例数据</h5><p>实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无论从父类继承而来或者在子类中定义的，都需要记录起来。这部分的存储顺序会收到虚拟机的分配策略参数（FieldsAllocationStyle）和字段在Java源码中定义的顺序的影响。HotSpot虚拟机默认的分配策略位longs/doubles、ints、shorts/chars、bytes、booleans、oops（Ordinary Object Pointers），从分配策略来看，相同宽度的字段总是分配到一起。在满足这个前提条件的情况下，在父类中定义的变量回出现在种类之前。如果CompactFiles参数值位true（默认为true），那么子类中较窄的变量也可能回插入到父类的变量空隙之中。</p><h5 id="3-填充数据"><a href="#3-填充数据" class="headerlink" title="3. 填充数据"></a>3. 填充数据</h5><p>起到占位符的作用，由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换而言之对象的大小必须是8字节的整数倍。而对象头刚好是8字节的整数倍（1倍或者2倍）。因此，当对象的实例数据不是8字节的整数倍的时候，需要通过填充数据来补全。</p><h4 id="2-3-3-对象的访问定位"><a href="#2-3-3-对象的访问定位" class="headerlink" title="2.3.3. 对象的访问定位"></a>2.3.3. 对象的访问定位</h4><p>Java程序通过栈上面的reference数据来确定使用的具体对象。由于reference类型在Java虚拟机中只规定了一个指向对象的引用，并没有定义这个引用通过何种方式去定位、访问堆中的对象的具体位置，所以对象的访问方式也是取决于虚拟机的实现而定的。目前主流的访问方式有使用句柄和直接内存指针两种。</p><ul><li>使用句柄的方式访问，那么Java堆中将会划分一块内存做为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息。如下图所示：</li></ul><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190312%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1.png" alt=""></p><ul><li>使用直接指针访问，那么Java堆对象的布局中就必须考虑如何防止访问数据类型数据的相关信息，而reference中存储的直接就是对象地址。</li></ul><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190312%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1.png" alt=""></p><p>这两种对象的访问方式各有优势，使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动（垃圾回收时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要修改。</p><p>使用直接指针访问的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常平凡，因此这类开销积少成多也是一项非常可观的执行成本。Sun Hotspot采用的就是直接指针访问的方式，但是从真个软件开发范围来看，使用句柄的方式十分常见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;2-3-1-对象的创建&quot;&gt;&lt;a href=&quot;#2-3-1-对象的创建&quot; class=&quot;headerlink&quot; title=&quot;2.3.1. 对象的创建&quot;&gt;&lt;/a&gt;2.3.1. 对象的创建&lt;/h4&gt;&lt;p&gt;对象的创建主要过程包含了类加载检查、对象内存分配、并发处理、内存
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
      <category term="对象" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>homebrew更新阿里源</title>
    <link href="http://yoursite.com/2019/03/08/homebrew%E6%9B%B4%E6%96%B0%E9%98%BF%E9%87%8C%E6%BA%90/"/>
    <id>http://yoursite.com/2019/03/08/homebrew更新阿里源/</id>
    <published>2019-03-08T13:54:20.000Z</published>
    <updated>2019-03-08T13:56:04.914Z</updated>
    
    <content type="html"><![CDATA[<h4 id="替换为阿里源"><a href="#替换为阿里源" class="headerlink" title="替换为阿里源"></a>替换为阿里源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 替换brew.git:</span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class="line"># 替换homebrew-core.git:</span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class="line"># 应用生效</span><br><span class="line">brew update</span><br><span class="line"># 替换homebrew-bottles:</span><br><span class="line">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&apos; &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h4 id="还原为官方源"><a href="#还原为官方源" class="headerlink" title="还原为官方源"></a>还原为官方源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 重置brew.git:</span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"># 重置homebrew-core.git:</span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line">#删除zshrc HOMEBREW_BOTTLE_DOMAIN内容</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;替换为阿里源&quot;&gt;&lt;a href=&quot;#替换为阿里源&quot; class=&quot;headerlink&quot; title=&quot;替换为阿里源&quot;&gt;&lt;/a&gt;替换为阿里源&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="homebrew" scheme="http://yoursite.com/tags/homebrew/"/>
    
      <category term="阿里源" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>java-深入理解Java虚拟机-Java内存区域与内存溢出异常</title>
    <link href="http://yoursite.com/2019/03/07/java-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2019/03/07/java-深入理解Java虚拟机-Java内存区域与内存溢出异常/</id>
    <published>2019-03-07T14:21:36.000Z</published>
    <updated>2019-03-12T14:15:50.610Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2-2-运行时数据区域-Java-VM-runtime-data-areas"><a href="#2-2-运行时数据区域-Java-VM-runtime-data-areas" class="headerlink" title="2.2 运行时数据区域(Java VM runtime data areas)"></a>2.2 运行时数据区域(Java VM runtime data areas)</h4><p> Java虚拟机在执行Java程序的过程中会把它管理的内存划分位若干个不同的数据区域，这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而简历和销毁。如下图所示，Java运行时数据区域分为以下几个部分：</p><p> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190312jvm-runtime-data-area.png" alt=""></p><h5 id="2-2-1-程序计数器-Program-Counter-Register"><a href="#2-2-1-程序计数器-Program-Counter-Register" class="headerlink" title="2.2.1  程序计数器(Program Counter Register)"></a>2.2.1  程序计数器(Program Counter Register)</h5><p>程序计数器是一块较小的内存空间，可以看做当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器完成。</p><p>由于Java虚拟机的多线程是通过线程切换cpu时间片实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要一个独立的PC计数器，各个线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（Undefined）。此区域内存是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p><h5 id="2-2-2-Java虚拟机栈（Java-VIrtual-Machine-Stacks）"><a href="#2-2-2-Java虚拟机栈（Java-VIrtual-Machine-Stacks）" class="headerlink" title="2.2.2 Java虚拟机栈（Java VIrtual Machine Stacks）"></a>2.2.2 Java虚拟机栈（Java VIrtual Machine Stacks）</h5><p>于PC counter一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同事回创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>虚拟机栈中的局部变量表存放了编译期可知的各种功能基本数据类型（boolean、byte、char、int、short、long、double、float)、对象引用（reference类型，它不等通于对象本身，可能是一个指向对象起始地址的引用指针，也可能是只想一个代表对象的句柄或其他与此对象相关的位置）和returnAddress（只想了一条字节码指令的地址）。</p><p>在Java虚拟机规范中，对这个区域规定了两种异常情况：</p><ul><li>StackOverflowError 线程请求的虚拟机栈深度大于虚拟机所允许的最大深度。</li><li>OutOfMemoryError 如果虚拟机栈可以动态扩展，扩展时无法申请到足够的内存的时候。</li></ul><h5 id="2-2-3-本地方法栈（Native-Method-Stacks）"><a href="#2-2-3-本地方法栈（Native-Method-Stacks）" class="headerlink" title="2.2.3 本地方法栈（Native Method Stacks）"></a>2.2.3 本地方法栈（Native Method Stacks）</h5><p>本地方法栈和虚拟机栈所发挥的作用非常相似的，他们之间的区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈为虚拟机使用到的Native方法服务。同样的本地方法栈也会抛出StackOverflowError和OutOfMemoryError。</p><h5 id="2-2-4-Java堆（Java-Heap）"><a href="#2-2-4-Java堆（Java-Heap）" class="headerlink" title="2.2.4 Java堆（Java Heap）"></a>2.2.4 Java堆（Java Heap）</h5><p>对于大多数应用来说，Java堆是Java虚拟机所管理的内存中最大的一块。Java堆是线程共享的一块内存区域，在虚拟机启动时创建。</p><p>此区域的唯一目的就是存放对象实例，在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配，但是随着JIT（Just-In-Time）编译器的反战和逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么绝对了。</p><p>Java堆是垃圾回收器管理的主要区域，Java堆垃圾回收采用分代收集算法，该区域的划分和虚拟机配置参数如下，分为两大块Young Generation和Old Generation，Permanent Generation属于接下来要讲的方法区。而Young Generation又可以细分为Eden（伊甸区）、From Survivor、To Survivor区。</p><p><img src="https://github.com/jacentsao/picbed/blob/master/img/markdownJava%20Heap%20Construction.gif?raw=true" alt=""></p><h5 id="2-2-5-方法区（Method-Area）"><a href="#2-2-5-方法区（Method-Area）" class="headerlink" title="2.2.5 方法区（Method Area）"></a>2.2.5 方法区（Method Area）</h5><p>方法区也是线程共享的内存区域，他用于存储已被Java虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法去描述为堆的一个逻辑部分，但是它有一个别名叫做非堆（Non-Heap），目的应该是与Java堆区分开来。</p><p>方法区又被称之为永久带（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说使用永久带来实现方法区而已。这样HotSpot的垃圾收集器就可以像管理Java堆一样管理这部分内存，省去专门为方法区开发内存管理代码的工作。对于其它虚拟机来说不存在方法区。</p><p>在jdk1.8之前，永久带在虚拟机运行时数据区域的分块如下：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190312jdk1.7jvm-runtime-data-area.png" alt=""></p><p>在jdk1.8时，永久带被合并至Metaspace，如下所示：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190312jdk1.8%20jvm%20runtime%20data%20area%20.png" alt=""></p><p>根据Java虚拟机规范的规定，当方法区无法满足内存分配的需求时，将抛出OutOfMemoryError异常。</p><h5 id="2-2-6-运行时常量池（Runtime-Constant-Pool）"><a href="#2-2-6-运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="2.2.6 运行时常量池（Runtime Constant Pool）"></a>2.2.6 运行时常量池（Runtime Constant Pool）</h5><p>运行时常量池时方法区的一部分，受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p><h5 id="2-2-7-直接内存（Direct-Memory）"><a href="#2-2-7-直接内存（Direct-Memory）" class="headerlink" title="2.2.7 直接内存（Direct Memory）"></a>2.2.7 直接内存（Direct Memory）</h5><p>直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。由于此区域也可能导致OutOfMemoryError异常，故放在一起讲解。</p><p>在JDK1.4中心加入了NIO(New Input Output)类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/0方式，他可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象做为这块内存的引用操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><p>该区域收到本机总内存大小以及处理器寻址控件的限制，动态扩展时如果申请不到内存会出现OutOfMemoryError异常。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;2-2-运行时数据区域-Java-VM-runtime-data-areas&quot;&gt;&lt;a href=&quot;#2-2-运行时数据区域-Java-VM-runtime-data-areas&quot; class=&quot;headerlink&quot; title=&quot;2.2 运行时数据区域(Java
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>阶段性总结 2016.03-2019.02</title>
    <link href="http://yoursite.com/2019/01/30/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93-2016-03-2019-02/"/>
    <id>http://yoursite.com/2019/01/30/阶段性总结-2016-03-2019-02/</id>
    <published>2019-01-30T03:10:51.000Z</published>
    <updated>2019-01-30T03:10:51.146Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>协程有什么好处</title>
    <link href="http://yoursite.com/2019/01/29/%E5%8D%8F%E7%A8%8B%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84/"/>
    <id>http://yoursite.com/2019/01/29/协程有什么好处/</id>
    <published>2019-01-29T09:52:35.000Z</published>
    <updated>2019-01-29T09:56:52.191Z</updated>
    
    <content type="html"><![CDATA[<p>引用来源<a href="https://www.zhihu.com/question/20511233/answer/24260355" target="_blank" rel="noopener">知乎，协程的好处有哪些</a>。</p><p>作者：阿猫<br>链接：<a href="https://www.zhihu.com/question/20511233/answer/24260355" target="_blank" rel="noopener">https://www.zhihu.com/question/20511233/answer/24260355</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><ul><li><p>一开始大家想要同一时间执行那么三五个程序，大家能一块跑一跑。特别是UI什么的，别一上计算量比较大的玩意就跟死机一样。于是就有了并发，从程序员的角度可以看成是多个独立的逻辑流。内部可以是多cpu并行，也可以是单cpu时间分片，能快速的切换逻辑流，看起来像是大家一块跑的就行。</p></li><li><p>但是一块跑就有问题了。我计算到一半，刚把多次方程解到最后一步，你突然插进来，我的中间状态咋办，我用来储存的内存被你覆盖了咋办？所以跑在一个cpu里面的并发都需要处理上下文切换的问题。进程就是这样抽象出来个一个概念，搭配虚拟内存、进程表之类的东西，用来管理独立的程序运行、切换。</p></li><li><p>后来一电脑上有了好几个cpu，好咧，大家都别闲着，一人跑一进程。就是所谓的<strong>并行</strong>。</p></li><li><p>因为程序的使用涉及大量的计算机资源配置，把这活随意的交给用户程序，非常容易让整个系统分分钟被搞跪，资源分配也很难做到相对的公平。所以核心的操作需要陷入内核(kernel)，切换到操作系统，让老大帮你来做。</p></li><li>有的时候碰着I/O访问，阻塞了后面所有的计算。空着也是空着，老大就直接把CPU切换到其他进程，让人家先用着。当然除了I\O阻塞，还有时钟阻塞等等。一开始大家都这样弄，后来发现不成，太慢了。为啥呀，一切换进程得反复进入内核，置换掉一大堆状态。进程数一高，大部分系统资源就被进程切换给吃掉了。后来搞出<strong>线程</strong>的概念，大致意思就是，这个地方阻塞了，但我还有其他地方的逻辑流可以计算，这些逻辑流是共享一个地址空间的，不用特别麻烦的切换页表、刷新TLB，只要把寄存器刷新一遍就行，能比切换进程开销少点。</li><li>如果连时钟阻塞、 线程切换这些功能我们都不需要了，自己在进程里面写一个逻辑流调度的东西。那么我们即可以利用到并发优势，又可以避免反复系统调用，还有进程切换造成的开销，分分钟给你上几千个逻辑流不费力。这就是<strong>用户态线程</strong>。</li><li>从上面可以看到，实现一个用户态线程有两个必须要处理的问题：一是碰着阻塞式I\O会导致整个进程被挂起；二是由于缺乏时钟阻塞，进程需要自己拥有调度线程的能力。如果一种实现使得每个线程需要自己通过调用某个方法，主动交出控制权。那么我们就称这种用户态线程是协作式的，即是协程。</li><li><strong>本质上协程就是用户空间下的线程</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引用来源&lt;a href=&quot;https://www.zhihu.com/question/20511233/answer/24260355&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知乎，协程的好处有哪些&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;作者：阿猫&lt;br&gt;链接：
      
    
    </summary>
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>云游四方-大理-丽江-香格里拉-泸沽湖</title>
    <link href="http://yoursite.com/2018/12/24/%E4%BA%91%E6%B8%B8%E5%9B%9B%E6%96%B9-%E5%A4%A7%E7%90%86-%E4%B8%BD%E6%B1%9F-%E9%A6%99%E6%A0%BC%E9%87%8C%E6%8B%89-%E6%B3%B8%E6%B2%BD%E6%B9%96/"/>
    <id>http://yoursite.com/2018/12/24/云游四方-大理-丽江-香格里拉-泸沽湖/</id>
    <published>2018-12-24T01:00:16.000Z</published>
    <updated>2019-01-02T06:06:28.982Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这个是草稿，实在写不下去了</strong></p><h3 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h3><p>原计划时加上往返路程一共九天，最终只呆了八天回来了，感觉有点累。</p><ul><li>2018-12-15 深圳 - 昆明 - 大理 大理天气阴天7-18℃</li><li>2018-12-16 崇圣寺三塔公园 - 洱海骑行 大理天气多云5-18℃</li><li>2018-12-17 甘海子 - 玉龙雪山 - 蓝月谷 丽江天气晴6-19℃</li><li>2018-12-18 长江第一湾 - 虎跳峡 - 普达措国家公园 大雪零下6-零上3℃ </li><li>2018-12-19 香巴拉时轮坛城 - 象山公园 - 独克宗 晴 </li><li>2018-12-20 泸沽湖观景台 - 猪槽船 - 篝火晚会 晴</li><li>2018-12-21 草海 - 走婚桥 - 摩梭家访 晴</li><li>2018-12-22 洱海骑行 - 采草莓 - 深圳 晴</li></ul><a id="more"></a><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>云南海拔高，紫外线很强烈，记得一定要带防晒的，要不一下子就晒黑了。</li><li>天气干燥，记得带保水的，不行大宝就很合适。</li><li>一定要带保温杯，很多地方都有热水打，多喝温水，不要直接喝冷水。</li><li>不要随便就被人拉这里去玩那里去玩，防止被坑，尽量走线上平台交易，至少还能打差评。</li><li>带一些零食，有时候坐车三四个小时，可以吃点东西，或者吃不惯的时候也可以填一下肚子。</li><li>如果能带墨镜的话尽量带上，太阳太强烈了，拍照的时候不方便。</li><li>去寺庙不要戴帽子，寺庙内不要拍照，不要踩人家门槛，左脚先跨过去，观光一般顺时针绕行，你可以不信仰，但是还是要尊重别人的习俗。</li><li>备点一元零钱，很多地方上厕所要收费，以备不时之需。</li></ol><h3 id="具体行程"><a href="#具体行程" class="headerlink" title="具体行程"></a>具体行程</h3><h4 id="day1（2018-12-15-周六-天气多云，气温）深圳-昆明-大理"><a href="#day1（2018-12-15-周六-天气多云，气温）深圳-昆明-大理" class="headerlink" title="day1（2018-12-15 周六 天气多云，气温）深圳 - 昆明 - 大理"></a>day1（2018-12-15 周六 天气多云，气温）深圳 - 昆明 - 大理</h4><p>第一天严格意义来说一直是在赶路的，主要是说一下时间。我们是早上7：35-10：15从深圳到昆明的飞机。然后转乘地铁从昆明长水机场到昆明火车站，再乘车前往大理。</p><ul><li><strong>深圳 - 昆明长水机场</strong> 耗时约2小时，票价1400左右，两人</li><li><strong>昆明长水机场 - 昆明火车站</strong> 地铁6元/人，耗时约一个小时，从机场中心站坐6号线经过3站到达东部汽车站，转乘地铁3号线,经过6站, 到达东风广场站，再转乘地铁2号线,经过2站, 到达环城南路站。建议在这里下车，因为去昆明火车站下车也要绕着火车站走很远（大约800米），而且人又少，还不如在环城南路站下车，走北京路到达火车站正门。另外也可以直接坐从机场到昆明站的大巴，时间可能更短，25元/人。</li><li><strong>昆明火车站 - 大理火车站</strong> 耗时约2小时，一等座231元/人，D4120动车。走到昆明火车站才发现没有买票，临时买的12：57的火车票，云南的火车旅游线都很宽敞，一等座远远大于深圳的一些一等座，非常舒适。下午15：05到达大理火车站。</li><li><strong>大理火车站 - 大理古城</strong> 耗时约1小时，3元/人。从大理火车站出来以后可以看到广场上面有很多8路车，PS：也有很多私人在拉客，15元/人，感觉没啥必要。回来的时候不堵车才30多分钟就到了。这里是从大理火车站坐到大理古城东门的风花雪月酒店站下车，如果不知道怎么去客栈的话可以叫客栈老板过来接就好了。请大家务必注意的是，门口有很多推荐住房什么乱七八糟的，建议大家都在网上订好，至少你还能给差评，现场的就是无保障，容易被人宰，尤其是你不会砍价的时候。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181225092610%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%A4%A7%E7%90%86%E5%8F%A4%E5%9F%8E.jpg" alt=""></li><li><strong>大理古城 - 才村码头</strong> 耗时十分钟左右，8元。因为我们到的时候已经四点多了，所以放完东西我们就去了才村码头转转。大理古城出来有很多那种电动车，从大理古城过去砍价到8元（有人叫20元，果断砍价）。一路上可以看到很多耕种的本地人，还有很多草莓园，我们返程去大理的时候有过去采摘（25元/斤），特别香甜，比深圳便宜多了。乘车过去才村码头拍拍照，然后转了一下湖滨生态园。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181225092242%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%89%8D%E6%9D%91%E7%A0%81%E5%A4%B4%E6%B9%BF%E5%9C%B0%E5%85%AC%E5%9B%AD.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181227230938%E6%B4%B1%E6%B5%B7%E7%AC%AC%E4%B8%80%E6%99%9A.jpg" alt=""></li><li><strong>才村码头 - 大理古城</strong> 稍晚天冷就返回大理古城准备用餐。</li><li><strong>大理古城 - 人民路</strong> 向客栈老板打听以后决定去人民路吃点东西，沿着人民路逛了一圈，感觉实在是跟别的古城没什么区别，走到洋人街附近的时候就绕回去了。中间见识了一路的烤榴莲，银饰店，以及各种本地的水果如：人参果，蛇皮果之类的（水果不要买多，可能吃不惯）。晚餐实在是不知道吃什么就在路边随便找了一家店吃，结果随便了一个本地的那种自助烧烤，有一块石板撒上油自己烤的那种，非常难吃，建议不要吃。</li><li><strong>回客栈休息</strong> </li></ul><h4 id="day2（2018-12-16-周日）-崇圣寺三塔公园-才村码头-大理古城-洱海环行"><a href="#day2（2018-12-16-周日）-崇圣寺三塔公园-才村码头-大理古城-洱海环行" class="headerlink" title="day2（2018-12-16 周日） 崇圣寺三塔公园-才村码头-大理古城-洱海环行"></a>day2（2018-12-16 周日） 崇圣寺三塔公园-才村码头-大理古城-洱海环行</h4><p>原计划时早上起床去才村码头看日出的（云南这个季节的日出大概是在八点左右，七点四十左右天已经开始变白，具体的时间可以通过天气app查看日出日落的时间），因为打不到车，然后太早了没地方租车所以耽搁了，然后一下子睡到了九点多才起来。吃完了早餐以后，就去了崇圣寺三塔公园。</p><ul><li><strong>大理古城 - 崇圣寺三塔公园</strong> 从大理古城到崇圣寺三塔公园大概也就一两公里，我们是用滴滴打车过去的，一般13，14元即可。</li><li><strong>崇圣寺三塔公园 - 大理古城</strong> 从公园会去以后基本上已经到了午餐时间，在大理古城又找不到什么好吃的，所以我们就在东门进来一点的地方吃了一个云南的米线，味道一般。</li><li><strong>大理古城 - 洱海骑行</strong> 美。</li><li><strong>大理古城 - 丽江</strong> 耗时约2-3小时，费用60-100/人不等。我们这里是找客栈老板帮我们订的，有个不好的点是一个小面包车在大理古城一直转接人，可能要一个小时或者更短。我们订的七点半的车，结果六点四十就来接人了，饭还没吃完。然后跟这他接人转了快一个小时。所以不要轻易找客栈老板，还不如自己打车去车站，时间可控一些。到达丽江以后我们是到的丽江高快客运站，位于丽江古城的西北角，还有一个丽江客运站位于丽江古城的南边一公里左右的地方。我们那个客栈老板就有点分不清位置，让我绕了一圈去南门的分店。</li></ul><h5 id="崇圣寺三塔公园"><a href="#崇圣寺三塔公园" class="headerlink" title="崇圣寺三塔公园"></a>崇圣寺三塔公园</h5><p>我们是在飞猪订的景区门票，包含了崇圣寺三塔公园里面的单程电动车票，一般建议下行的时候才坐电动车，其实也可以不坐电动车。崇圣寺三塔公园其实很小，玩两个小时绰绰有余，套票里面包含了三塔倒影公园（下午四点到五点时最佳时间，因为我们是上午去的，所以就略过了这个景点）。其实比较理想的是上午去苍山-洗马潭，下午去崇圣寺三塔公园。由于天气不是很好，我们把这一个行程略掉了，晚上提前去丽江古城。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228205158%E5%B4%87%E5%9C%A3%E5%AF%BA.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228205604%E5%B4%87%E5%9C%A3%E5%AF%BA.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228214126%E8%B6%85%E5%A4%A7%E6%9D%BE%E6%9E%9C.jpg" alt=""></p><h5 id="洱海骑行"><a href="#洱海骑行" class="headerlink" title="洱海骑行"></a>洱海骑行</h5><p>下午本来也没想好干什么，后来就想着去骑电动车环游洱海，不过我们两个人都不会骑电动车（我还是八年以前学过，但是没学会就放弃了）。在路边小店租车的时候，老板一听说我们不会骑，立马就从主动推销改为了主动拒绝，这个是挺好的。后来我实在没忍住在网上租了一个（主要是考虑到飞猪有免押金），到喜洲往返的55元，环洱海的110元（价格代表能够跑的距离，一旦跑达到没电是一件非常痛苦的事情。我老婆的一个朋友现在每次跟人说都是不要去云南就是因为电动车骑到一半没电了，而且赶上下雨）。环洱海大概120公里，路况不好且骑的不会快，加上停下来拍照肯定是需要一天的时间的，所以我们选择了喜洲往返的套餐，现在想想这是去大理做的最明智的一件事情了。在飞猪上面下单以后，大概过了十几分钟老板把电动车送过来（古城内都是送的，还的时候老板也是古城内上门取的）。一路上真的是看到了很多很多漂亮的风景，主要是云南的天太蓝了，感觉美的不真实。<br><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228160519erhaiqixing.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228160642erhaiqixing.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228160744erhaiqixing.jpg" alt=""></p><h4 id="day3（2018-12-17-周一）甘海子-丽江玉龙雪山-蓝月谷"><a href="#day3（2018-12-17-周一）甘海子-丽江玉龙雪山-蓝月谷" class="headerlink" title="day3（2018-12-17 周一）甘海子-丽江玉龙雪山-蓝月谷"></a>day3（2018-12-17 周一）甘海子-丽江玉龙雪山-蓝月谷</h4><p>这里报的是那种一天的团，基本上都是六点半到七点半来四处接人，所以起的很早，我们一行加导游一共九人。费用是369元/人，含午餐，中午基本上都是那种腊排骨煮鸡肉，加上一些菜，加了辣椒酱后味道还可以。然后还有一罐氧气，和一件防寒服，就是那种大衣样式的。行李的话是直接丢在昨晚睡觉的客栈。</p><ul><li><strong>丽江古城 - 甘海子</strong> 不知道为啥甘海子也算一个景点，刚到甘海子还很早，特别冷，随便拍了下照片就走了。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228205955ganhaizi.jpg" alt=""></li><li><strong>甘海子 - 玉龙雪山</strong> 先是在山脚下坐大巴到山腰去排队坐缆车，淡季都排了半个小时。进去的地方有卖一些巧克力之类的，不要买，除非你很饿，所谓抗高原反应就是心理暗示罢了。带好旅行社发的氧气提前吸一下就好了，有备无患。坐上缆车也就几分钟就到了山上，然后往上有一个100多米高德台阶可以走，体力充沛可以爬一下，我们当时爬到了中间的小卖部那里，然后我老婆头晕就下来了。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210125%E7%8E%89%E9%BE%99%E9%9B%AA%E5%B1%B1.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210204%E7%8E%89%E9%BE%99%E9%9B%AA%E5%B1%B1.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210243%E7%8E%89%E9%BE%99%E9%9B%AA%E5%B1%B1.jpg" alt=""></li><li><strong>玉龙雪山 - 蓝月谷</strong> 返回山腰的时候也是坐缆车，然后坐到蓝月谷的大巴车，道终点站下车以后司机过来接我们去午餐。午餐完毕以后导游又把我们送到下大巴的蓝月谷，然后大家自由活动，沿着蓝月谷的几个湖网上。蓝月谷的水确实非常的漂亮，有几个湖视清澈见底的，也有几个就是蓝色的湖水，如梦如幻。蓝月谷的水是玉龙雪山融化的雪水，比较凉，之所以看起来是蓝色是因为水中富含铜离子，所以蓝月谷的水是不能饮用的。这里因为晚上没有休息好，早上又起得很早，直接导致下午头痛的不行。然后我老婆又一直叫我摆姿势拍照，录视频，头痛到不行不行的，最后还给我脸色看，委屈blabla。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210340%E8%93%9D%E6%9C%88%E8%B0%B7.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210418%E8%93%9D%E6%9C%88%E8%B0%B7.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210502%E8%93%9D%E6%9C%88%E8%B0%B7.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210536%E8%93%9D%E6%9C%88%E8%B0%B7.jpg" alt=""></li><li><strong>蓝月谷 - 丽江古城</strong> 蓝月谷走完以后，导游开车到上游的桥那里直接接我们一起返回丽江古城勒。到了客栈五点多刚刚好。</li></ul><h4 id="day4（2018-12-18-周二）长江第一湾-虎跳峡-普达措国家公园-藏王土司宴"><a href="#day4（2018-12-18-周二）长江第一湾-虎跳峡-普达措国家公园-藏王土司宴" class="headerlink" title="day4（2018-12-18 周二）长江第一湾-虎跳峡-普达措国家公园-藏王土司宴"></a>day4（2018-12-18 周二）长江第一湾-虎跳峡-普达措国家公园-藏王土司宴</h4><p>之所以今天来香格里拉也是冲着下雪过来的，运气真好，还真下雪了，遇上了香格里拉2018年的第一场雪。可把我老婆这个广东人高兴坏了，打成了人生成就：人生的第一场雪。本来行程里面周三才是普达措，由于我们是散客拼团，所以导游的行程是第一天（周二）去普达措，正好是下雪的时候。算是非常完美了，因为晚上雪停了，然后第二天晴天雪融化了。</p><p>此次是散客拼团，一个大巴车只有22人，一个藏族女导游叫拉姆，一个司机，算是淡季的福利吧。团里面有一个北京的四人大家庭，爸爸妈妈，女儿女婿，爸爸有点像网上说的朝阳群众，热心，管的宽。还有一对来自成都的叔叔阿姨，阿姨的模样和行为一看就是那种特别幸福的女人。前面还有两位是来自黑龙江的东北大汉，父子两。其他的没什么交集，所以记不清。</p><ul><li><strong>长江第一湾</strong> 无法理解长江第一湾也是个景点</li><li><strong>虎跳峡</strong> 耗时约1小时。虎跳峡确实是一个值得一去的地方，我们去的时候水流不是很急，风特别大，大概玩了一个小时就走了。</li><li><strong>午餐</strong> 这一顿午餐是我在云南吃过的最差的一顿了，七八个素菜，全靠老乡腿脚品尝的牦牛肉酱和松茸下饭了。</li><li><strong>普达措国家公园</strong> 吃完饭接着往普达措赶，天渐渐下起了雪，车外白雪茫茫，车上广东人一路上高兴的直跳。去普达措的路上导游会推荐大家去买氧气瓶和高原维能，氧气好像是68/瓶，高原维能是48/支，导游推荐大家一人两瓶氧气，两瓶高原维能，其实完全没必要。我们昨天在玉龙雪山的氧气瓶还有剩下两瓶，完全够用了。只要保证一人一瓶完全够了，还有富余。普达措国家公园上去的时候等了半个小时大巴，下来的时候等了快五十分钟大巴，这点是非常让人诟病的。上去的时候我们是在属都湖下车，不行3.3公里到达终点站坐车下来的。</li><li><strong>藏王土司宴</strong> 晚上吃饭在藏王土司宴，就是一人一个小火锅，中间会有藏民跳舞还有跟大家互动的过程。</li></ul><h5 id="长江第一湾"><a href="#长江第一湾" class="headerlink" title="长江第一湾"></a>长江第一湾</h5><p>正如前面所说，有点搞不懂这么一个地方怎么会算得上一个景点，感觉就是一个很普通的地方。当然了，也有可能是我们来得季节不对吧。</p><h5 id="虎跳峡"><a href="#虎跳峡" class="headerlink" title="虎跳峡"></a>虎跳峡</h5><p><strong><a href="https://zh.wikipedia.org/wiki/%E8%99%8E%E8%B7%B3%E5%B3%A1" target="_blank" rel="noopener">虎跳峡</a></strong>是中国云南省丽江一處峡谷，位于玉龙与中甸之间的金沙江干流上。相传金沙江逢枯水期时，有猛虎下山，在此江中的礁石上稍一脚后腾空便越过，故称「虎跳峡」，江中的礁石則稱作「虎跳石」。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211544hutiaoxia.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211438hutiaoxia.jpg" alt=""> </p><p>虎跳峡因该是一个比较有名的景点，我们去的时候刚好是枯水季节，没有领略到虎跳峡的雄浑壮阔，不过也正式因为这样，所以才看到了虎跳石。下车往上看对面云雾缭绕，山顶还有积雪，前方就是悬崖，山涧风很大，有一点冷。沿着台阶往下走，往下看还是有一点瘆人的。走到下面平台的时候，大家都在标志性的虎跳石那里合影留念，还好不是旅游旺季，排队拍了个照。旁边有一些很脏的玻璃栈道，应该是涨水的时候水冲的。尽管是枯水季节，但是也能听到水流冲击的声音，想想要是洪水季节，该是何等的壮阔呀。</p><h5 id="普达措国家公园"><a href="#普达措国家公园" class="headerlink" title="普达措国家公园"></a>普达措国家公园</h5><p><strong><a href="https://zh.wikipedia.org/wiki/%E6%99%AE%E8%BE%BE%E6%8E%AA%E5%9B%BD%E5%AE%B6%E5%85%AC%E5%9B%AD" target="_blank" rel="noopener">普达措国家公园</a></strong>位于云南省迪庆藏族自治州香格里拉市境内，最高海拔4159.1米，年平均气温5.4℃。至今保持完整的原始森林生态系统，奥运火炬香格里拉站的传递就曾经在这里进行。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211627%E6%99%AE%E8%BE%BE%E6%8E%AA%E5%9B%BD%E5%AE%B6%E5%85%AC%E5%9B%AD.jpg" alt="">  <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211708%E6%99%AE%E8%BE%BE%E6%8E%AA%E5%9B%BD%E5%AE%B6%E5%85%AC%E5%9B%AD.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211831%E6%99%AE%E8%BE%BE%E6%8E%AA%E5%9B%BD%E5%AE%B6%E5%85%AC%E5%9B%AD.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211902%E6%99%AE%E8%BE%BE%E6%8E%AA%E5%9B%BD%E5%AE%B6%E5%85%AC%E5%9B%AD.jpg" alt=""></p><h5 id="藏王土司宴"><a href="#藏王土司宴" class="headerlink" title="藏王土司宴"></a>藏王土司宴</h5><p><strong>藏王土司宴</strong>吃小火锅，进门的时候会有人<em>献哈达</em>拍照，后面会打印出来问你是否要，如果需要的话是20元/张。进门坐下入席坐下以后，当地的藏民会载歌载舞欢迎大家的到来，总的来说气氛还不错，会有一些互动环节。不过味道的话比较一般吧，可以免费加菜，会有藏民吃的煮土豆，饼，还有青稞酒之类的。我们团里一个可爱的成都大叔喝了一些酒以后还上去唱了两曲，然后阿姨还上去献了哈达，特别有爱。不过宴会进行到晚声的时候突然停电了，所以后面的篝火晚会就取消了。 <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211941%E8%97%8F%E7%8E%8B%E5%9C%9F%E5%8F%B8%E5%AE%B4.jpg" alt=""></p><h5 id="酒店休息"><a href="#酒店休息" class="headerlink" title="酒店休息"></a>酒店休息</h5><p>停电以后大伙就坐旅行车回到了酒店休息，结果酒店也没有电，一直在用发电机发电，提着行李到了房间以后就准备洗漱休息了。房间的配置相当不错，开始听说给我们订的是单间我还挺纳闷的，结果一进房间远超预期。房间里面已经有油汀预热了，还是蛮舒服的，不会像空调那么一股味道还特别干燥。不过我们的房间对着酒店的发电机，特别吵，对我没啥大的影响，对我老婆影响比较大。而且凌晨一点多的时候整个酒店直接就没电了，第二天起来用的是手机照明。</p><h4 id="day5（2018-12-19-周三）香巴拉时轮坛城-龟山公园-独克宗古城"><a href="#day5（2018-12-19-周三）香巴拉时轮坛城-龟山公园-独克宗古城" class="headerlink" title="day5（2018-12-19 周三）香巴拉时轮坛城-龟山公园-独克宗古城"></a>day5（2018-12-19 周三）香巴拉时轮坛城-龟山公园-独克宗古城</h4><p>今天是两天的香格里拉行程的第二天，早上七点四十导游预约了叫早服务，八点洗漱完毕去到餐厅层吃饭。早餐是有花卷，白粥，蛋糕，咸菜，面条，一人一个鸡蛋，对于我们俩来说只要有白粥咸菜就算是okay了。早餐完八点二十司机接我们去到另一个酒店接另外的部分团员，结果他们一上车就来抱怨早餐难吃，只有白粥，然后听我们说早餐有那么多选择大伙又叽叽喳喳的聊了一会。</p><ul><li><strong>香巴拉时轮坛城</strong>香巴拉时轮坛城严格意义来讲是一个现代化的建筑，大家也可以去看看古色古香的松赞林寺，不过去看看也是不错的。</li><li><strong>龟山公园</strong>这里有一个很大的转经筒，需要很多人合力才能转起来，大家可以试试。</li><li><strong>独克宗古城</strong>我们只是在下面的红军纪念馆和旁边的博物馆转了一下，没有去独克宗古城游玩，淡季人也比较少，加上积雪较多地面丝滑，就没有过去转了。</li></ul><h5 id="香巴拉时轮坛城"><a href="#香巴拉时轮坛城" class="headerlink" title="香巴拉时轮坛城"></a>香巴拉时轮坛城</h5><p>稍晚，大伙到了香巴拉时轮坛城，导游买票以后大伙乘电梯到达八楼，有坛城里面的工作人员带领大家参观。带我们团的是一个汉族的小伙，他老家是云南的，在拉萨的佛学院学成以后申请回香巴拉时轮坛城工作。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212014%E9%A6%99%E5%B7%B4%E6%8B%89%E6%97%B6%E8%BD%AE%E5%9D%9B%E5%9F%8E.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212038%E9%A6%99%E5%B7%B4%E6%8B%89%E6%97%B6%E8%BD%AE%E5%9D%9B%E5%9F%8E.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212135%E9%A6%99%E5%B7%B4%E6%8B%89%E6%97%B6%E8%BD%AE%E5%9D%9B%E5%9F%8E.jpg" alt=""></p><p>香巴拉时轮坛城从2005年开始修建，耗时十年建成，2015年初期只向宗教人士和政府官员开放，后来响应习主席的号召开始面向大众开放。到达八层以后，工作人员向我们介绍了香巴拉时轮坛城的一些知识，因为对历史背景不太了解，一下子就忘了。中间还介绍了天珠，转经筒，唐卡，等等，不过坛城里面都是<strong>禁止拍照</strong>的，只有在坛城外面才可以拍照。</p><p>沿着楼梯往下走的时候工作人员一边转着转经筒，一边带我们来到了佛祖佛母的善恶相的侧面参观，中间有对佛祖佛母做了一个大致的介绍。例如踩在脚下代表欲望，贪婪的男人，和抬佛祖佛母脚的女人在祈求佛祖佛母放过自己的男人。然后当我们走到下面的烧酥油灯的地方，大家可以花个十几二十块买一盏小的，或者花个几十块买一盏大的酥油灯去许一个愿，祈求平安幸福，告诫心灵。可能大家会比较关心如果愿望达成了是否需要还愿，工作人员也有说到在大乘佛教里面是没有必要还愿这一说的，所以大家也不用返回去还愿。</p><h5 id="龟山公园"><a href="#龟山公园" class="headerlink" title="龟山公园"></a>龟山公园</h5><p><a href="https://baike.baidu.com/item/%E9%BE%9F%E5%B1%B1%E5%85%AC%E5%9B%AD/13382104" target="_blank" rel="noopener">龟山公园</a>有着世界上最大的转经筒，从下面沿着满是积雪的石阶小心翼翼的往上走，来到上面的庙前。然后走到世界上最大的转经筒之前，招呼上同行的旅人，大伙一起合力转了一圈转经筒。感觉还是不错的，然后顺便在边上拍拍照。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212356%E8%BD%AC%E7%BB%8F%E7%AD%92.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212441%E8%BD%AC%E7%BB%8F%E7%AD%92.jpg" alt=""></p><h5 id="独克宗古城"><a href="#独克宗古城" class="headerlink" title="独克宗古城"></a>独克宗古城</h5><p><a href="https://baike.baidu.com/item/%E7%8B%AC%E5%85%8B%E5%AE%97%E5%8F%A4%E5%9F%8E/8643301" target="_blank" rel="noopener">独克宗古城</a>在2014年的时候一场大火把整个古城付之一炬，后面翻修了以后人气不是特别好，后面政府就规定每个去香格里拉的旅行团都要去独克宗转一下，算是政策性增加人气吧。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212157%E7%8B%AC%E5%85%8B%E5%AE%97.jpg" alt=""></p><p>集合以后导游就开始问大伙有谁要去看看蜜蜡和天珠的，我们团有个一家三口跟这导游去看几十分钟，其他人因为下雨全都在路边屋檐下等着。等他们回来以后说看中一个天珠，要价八万，这里完全不建议大家去购买这些。首先天珠本身就是最近几年炒的厉害的，尤其是李连杰佩戴以后，另外也无法辨别真伪。</p><p>人齐以后大家一起到大巴车出发，这里有个小插曲。一对小情侣去了边上的面包店买面包，但是发车的时候导游以为他们到了，所以直接开车走了，然后小情侣打电话给导游，司机就转回去接他们。司机很不客气的说我的油费都比你们的面包值钱了，本身来讲就是这个导游自己失职了还来指责游客。</p><h5 id="午餐及返程"><a href="#午餐及返程" class="headerlink" title="午餐及返程"></a>午餐及返程</h5><p>出发以后准备去用餐，到了一个藏民家以后上到二楼有很多卖藏红花，天麻，松茸，牦牛肉之类的。大家依次坐下以后等了很久都不见上菜上饭，一问才知道是导游说上菜才会上菜，结果导游又一直在等着我们买东西了。催了好几次以后才开始上菜，有点恶心巴拉的，饭菜也不怎么样。午餐过后下楼导游还让我们填了一个表给她评分，违心的填了一个好。</p><p>中午用餐完以后大伙就乘车准备返回丽江了。这发现一个很有意思的地方，去往丽江方向的大巴车都需要清洗以后才能进程。这应该算是一个政策性扶贫了，为当地民众谋生计。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212532%E8%BF%94%E7%A8%8B.jpg" alt=""></p><p>下午五点多到达丽江以后导游没有像出发的时候一样送回各个酒店，而是在几个集中的地方下人，远的就给了十元车费。</p><h5 id="晚餐及住宿"><a href="#晚餐及住宿" class="headerlink" title="晚餐及住宿"></a>晚餐及住宿</h5><p>晚上依然住在丽江古城，不过这一次从城南住到了城北，打车到客栈放完行李以后我们就启程打车去往花马街吃饭。</p><p>到了花马街入口的时候我们下车不行准备路上看看吃什么，路边的店很多都是烧着个篝火，然后会有一些阿姨穿着民族服饰跳舞。走着走着来到了一个新开的超市前面，老婆决定去买一些零食带上填肚子，然后我的书包又被塞满了。逛完超市以后我们也不是很想接着走了，所以看了下边上的店，有一个叫阿勒丘食府的店，马路两边有两家，看了下口碑，有套餐。进去问了以后结果不支持，但是我们俩又不想走了，就坐下来看了一下菜单点了几个菜。一个土豆丝，一个黄花菜炒蛋，一个毛血旺，份量都很足，但是味道就一般了。</p><p>吃完饭以后打算徒步走回去，沿着丽江古城里面的小河一直往下走呀走呀。中间有很多酒吧，人气特别好，不过我们两个没有进去，而是慢慢走呀走，走回酒店以后洗漱休息。毕竟明天还要赶早起床出发去泸沽湖。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212611%E4%B8%BD%E6%B1%9F%E5%8F%A4%E5%9F%8E.jpg" alt=""></p><h4 id="day6（2018-12-20-周四）金沙江-泸沽湖观景台-泸沽湖-猪槽船-篝火晚会"><a href="#day6（2018-12-20-周四）金沙江-泸沽湖观景台-泸沽湖-猪槽船-篝火晚会" class="headerlink" title="day6（2018-12-20 周四）金沙江-泸沽湖观景台-泸沽湖-猪槽船-篝火晚会"></a>day6（2018-12-20 周四）金沙江-泸沽湖观景台-泸沽湖-猪槽船-篝火晚会</h4><p>从丽江到泸沽湖大概三四个小时的车程，我们两个报的是两天的团</p><p>早上六点半开始起床收拾东西，洗漱完毕出发，在路口买了早餐以后等车过来。本来约的是7:15的车，结果到了7:20才到，估摸着应该是人太多太分散了。果然，这个散客团居然有40个游客，外加一个导游一个司机。大概到八点左右才把整个团的人接齐了，出发去泸沽湖。</p><ul><li><strong>金沙江</strong> 其实金沙江并不是我们行程中的一个景点，只是会路过而已，但是这一段路的金沙江实在太美了，所以就点出来一下。</li><li><strong>泸沽湖观景台</strong> 鸟瞰泸沽湖全境，适合拍拍照。</li><li><strong>泸沽湖</strong> 来到泸沽湖边上，近距离欣赏泸沽湖的美景。</li><li><strong>猪槽船</strong> 乘船登录小岛，可以在岸边买几个面包边乘船边喂食海鸥，湖中间还有鸳鸯之类的。也可以选择绕小岛环行一周，30元/人</li><li><strong>情人树</strong> 其实就是一颗普通的树，不过可以在附近拍一下不同方向的泸沽湖。</li></ul><h5 id="金沙江"><a href="#金沙江" class="headerlink" title="金沙江"></a>金沙江</h5><p>这里说的金沙江是从丽江到泸沽湖的丽宁公路段，这一段路的金沙江水是那种碧绿的颜色，像是大大的绿宝石，美不胜收。丽宁公路很多地方都是那种从山顶一直走之字型往下的路线，所以从车窗往外看就是悬崖，看着有点腿软。其实可以想象以前如果没有这条路，可能金沙江两岸山头的两户人家会老死不相往来。难以想象的是修建这条路到底付出了多大的代价，包括人力，物力，甚至是很多生命。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212711%E9%87%91%E6%B2%99%E6%B1%9F.jpg" alt=""></p><p>不过也正是有了丽宁公路，才有了泸沽湖的发展，以前从丽江到泸沽湖需要七八个小时的车程，现在只需要三四个小时。</p><h5 id="泸沽湖观景台"><a href="#泸沽湖观景台" class="headerlink" title="泸沽湖观景台"></a>泸沽湖观景台</h5><p>大概十一点多来到了泸沽湖观景台，这里可以鸟瞰整个泸沽湖。在这里看的时候其实没什么感觉，因为云南的天，云南的湖都是一样的碧水蓝天，看多了会觉得千篇一律。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212843%E4%BD%A0%E7%9C%8B%E6%B3%B8%E6%B2%BD%E6%B9%96.jpg" alt=""></p><p>呆了几分钟以后就到停车的地方坐着休息，然后等其他团员上车出发。</p><h5 id="午餐"><a href="#午餐" class="headerlink" title="午餐"></a>午餐</h5><p>午餐一般般，只有一只本地的烤鸡稍微好吃点，另外每桌会有两瓶酒，一瓶是男士喝的，味重，一瓶女士喝的，基本上没有酒味。大概十来个菜吧，还有一个哈掉的肥腊肉。</p><h5 id="泸沽湖-amp-amp-猪槽船"><a href="#泸沽湖-amp-amp-猪槽船" class="headerlink" title="泸沽湖 &amp;&amp; 猪槽船"></a>泸沽湖 &amp;&amp; 猪槽船</h5><p>午餐完就是到乘坐猪槽船的地方了，路边有卖喂食海鸥的面包的本地人，后面坐船的时候如果扔面包会有很多海鸥过来抢食，边还有散养的鸡。</p><p>来到岸边大家排队登船，一个船可以坐八个游客，外加船头两名划船的船夫，以及船尾一名掌管方向的船夫。出发往湖中小岛划去的时候船夫会介绍泸沽湖的景点，比如说女神山，还有四川和云南的交界处，其他等等。大家只用穿好救生衣（救生衣上面是有编号的，代表船号，往返都智能乘坐同一个船），坐在床上即可，也可以投食海鸥，这样子就可以近距离的拍摄海鸥了。划到中间的时候，船夫会问大家需不需要划船环岛（30元/人，感觉还是可以的），如果不需要的话就送到岛的登陆处，需要的话就带大家绕行一周。这个时候如果不愿意的话就可以叫船夫先送到小岛，然后让其他愿意的人环岛。我们选择了环岛，环岛的这一段水的可见度特别好，来到四川云南交界处的时候还喝了几口泸沽湖的水，不知道会不会像西游记里面说的一样怀孕，哈哈。这一段可选的路程，感觉30元还是蛮不错的。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213055%E7%8C%AA%E6%A7%BD%E8%88%B9.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213122%E7%8C%AA%E6%A7%BD%E8%88%B9.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213211%E7%8C%AA%E6%A7%BD%E8%88%B9.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213319%E7%8C%AA%E6%A7%BD%E8%88%B9.jpg" alt=""></p><p>环行小岛一周以后，大家来到登陆小岛的地方上岸，岛上有一个小小的寺庙，寺庙外面是一圈的转经筒。顺时钟转了一圈以后边上是一个挂满了许愿牌的地方，我们拍了一会照片就下岛乘船返回了。</p><p>返回以后很多人还没有回来，然后我们又找了一个人少一点的地方去继续伟大的拍照事业。等到大家人齐了以后我们开始出发去下一站，有点忘记晚上吃的是什么了。用完餐去了本地的酒店入住，里面有空调，不过泸沽湖的晚上还是蛮冷的。</p><h5 id="篝火晚会"><a href="#篝火晚会" class="headerlink" title="篝火晚会"></a>篝火晚会</h5><p>七点二十的时候导游带我们去了本地的篝火晚会，门票好像是30元每人。进门的时候又是常规操作献哈达拍照（打印的照片收费20元/人），不过这个一点都不走心，哈达就是随便扔，而且拍照还拍眯眼了。</p><p>邀请了一男一女两位游客去点火，然后就是一群摩梭族的阿哥阿妹围着篝火跳本地的特色舞蹈，跳了一会就邀请大家上去跟着一起跳。说是阿哥阿妹，其实好多都是大妈。据说是因为很多游客听说了本地的习俗以后喜欢去挠手心，所以年轻的都不去了。</p><p>我们呆了一小会觉得冷就返回酒店休息了。</p><h4 id="day7（2018-12-21-周五）摩梭家访-丽江-大理"><a href="#day7（2018-12-21-周五）摩梭家访-丽江-大理" class="headerlink" title="day7（2018-12-21 周五）摩梭家访-丽江-大理"></a>day7（2018-12-21 周五）摩梭家访-丽江-大理</h4><p>今天是返程回丽江，上午就一个摩梭家访，其实就是一个卖银饰品的推荐会顺带讲一些本地的风土人情。</p><ul><li><strong>草海&amp;&amp;走婚桥</strong> 草海是一块很大的湿地，算是一个很漂亮的地方，不过我们去的季节草都枯萎了，走婚桥就在草海的边上。</li><li><strong>摩梭家访</strong> 听当地的风土人情，大型银饰品推销会。</li></ul><h5 id="草海-amp-amp-走婚桥"><a href="#草海-amp-amp-走婚桥" class="headerlink" title="草海&amp;&amp;走婚桥"></a>草海&amp;&amp;走婚桥</h5><p>早上在酒店用完餐以后大家出发到了草海和走婚桥，早上的泸沽湖还是蛮冷的，大家下车冻的直哆嗦。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213417%E8%8D%89%E6%B5%B7.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213451%E8%8D%89%E6%B5%B7.jpg" alt=""></p><p>照例就是拍照，拍照，拍照。据说走婚桥是不能一次走到头的，寓意是走到头了。我们走上去感觉也没什么特别的就找了个人少的地方拍照。路边有本地人在卖苹果，核桃，苹果才5元一斤，比深圳便宜多了，我们顺便买了两个。上车吃的时候发现很甜，后悔没有多买几个。</p><h5 id="摩梭家访"><a href="#摩梭家访" class="headerlink" title="摩梭家访"></a>摩梭家访</h5><p>摩梭家访应该是一个比较有名的浏览行程吧，我看几乎是每个团基本上都会去，可能是因为政策性扶持吧。</p><p>从草海出发以后到摩梭家访的村子，据说这里有很多这样子的村落，大家轮流接待，然后每个村子挑选出来人接待。</p><p>到了村口以后有两个本地的阿妹在等着接大家去家里，然后团里分成两组分别跟这他们过去。到达他们家里祖母房以后就开始讲解，大意如下：</p><ol><li>不能踩门槛，门槛代表佛祖的肩膀，左脚先跨过去。</li><li>摩梭族孩子了13岁会有一个成人礼，比较郑重。</li><li>摩梭族生孩子是站着生的。</li><li>摩梭族孩子需要生下来是健康的，且会放在祖母房一个晚上，如果熬不过就熬不过。熬过了才能或者走出祖母房。</li><li>高原发烧超过二十分钟很有可能烧坏脑子，摩梭族有很厉害的退烧方法。</li><li>摩梭族给祖母和孩子都是用的银碗，可以杀毒之类的。</li><li>摩梭族的祖母房的进门右边的高台是给喇嘛活佛坐的，旁边的小门是人死了以后暂存尸体的。</li><li>摩梭族实行火葬，不保留骨灰，火葬的时间由喇嘛活佛算的。</li><li>拿银的梳子刮你的化妆品，手什么的，告诉你有毒，可以买个银饰去鉴别。</li><li>。。。。。。。。</li></ol><p>讲完以后就带去村上的银饰店呆着，银子16.8~22.8元/克不等，不知真假，看网上有人说里面刮开是黄铜色的也有。总的来说建议去正规的地方买吧，没必要在那里购买。</p><h5 id="午餐-1"><a href="#午餐-1" class="headerlink" title="午餐"></a>午餐</h5><p>从摩梭家访出来以后继续出发，路上用餐非常一般，最搞笑的是两位回族的朋友只能吃泡面，想想也是惨。</p><p>吃完饭，在边上又买了一个苹果，一个梨，味道不错，就是皮有点厚。呆了一会以后大家乘车继续往丽江走，果不其然，路上又有一个专门洗车的地方。中间导游有推销牛肉干，先是拿了一些给大家品尝，试了以后感觉味道不错就买了一包400克/100元。</p><p>到达丽江以后快五点，吃了一碗面以后打车去到丽江古城南面的丽江客运站乘车去往大理古城。从丽江客运站买票去到下关（84元/人加保险），中间是经过大理古城的，开始一直还不知道。</p><h5 id="晚餐"><a href="#晚餐" class="headerlink" title="晚餐"></a>晚餐</h5><p>两个多小时达到大理古城后，直奔酒店，放下行李以后就出来开始继续逛大理古城找吃的。这次我们在人民路转了十多分钟就放弃了，真的是没什么吃的，一度想去中间的金拱门用餐。返回东门主干道那条路的时候路边已经有很多小摊了，有一个烧烤店人挺多的，我们就坐下点了一些菜，味道还真不错。吃完在边上再买了一些煎饺返回酒店吃，老板现包的，味道也很好。</p><h4 id="day8（2018-12-22-周六）洱海环游-摘草莓"><a href="#day8（2018-12-22-周六）洱海环游-摘草莓" class="headerlink" title="day8（2018-12-22 周六）洱海环游-摘草莓"></a>day8（2018-12-22 周六）洱海环游-摘草莓</h4><p>因为早上想去洱海看日出，所以我们昨晚租了一个八点送到的电动车，还是在前面那个店租的。不过运气不好的是这个车好像有点问题，有电的时候也显示要充电，估计是天太冷了。</p><p>骑上摩托车以后先到了才村码头，在这里如果来的早或者晚就不会需要游船票进来，刚好看到日出的时候，其实一般般，因为洱海就一点点大，没什么特别的。呆了一小会出发去吃了个早餐，油条，豆浆，鸡蛋，稀饭。</p><p>吃完早餐以后出发洱海骑行，由于上次是往北边的喜洲骑的，这次我们往南边下关方向骑。结果一路上很少有海边的景色，都是很多民居，所以如果骑行建议大家还是往北边走。早上骑车是真的冷，一路上一直在想，自己到底怎么想不通为啥要大冬天早上来骑摩托车。不过比较幸运的是我们找到了几个人少，而且特别漂亮的地方拍照。其实骑车没有骑多远，主要时间就花在拍照上面了。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213534%E6%B4%B1%E6%B5%B7%E6%97%A5%E5%87%BA.jpg" alt=""></p><p>大概到了11:20，在我的再三催促下老婆大人才恋恋不舍的坐上摩托车返程，中午太阳强一些以后骑车舒服多了，所以大家冬天如果在洱海骑车建议就从大理古城往喜洲方向骑，四点之前要返程，要不晚上也太冷了。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213627%E6%B4%B1%E6%B5%B7%E9%AA%91%E8%A1%8C.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213735%E6%B4%B1%E6%B5%B7%E9%AA%91%E8%A1%8C.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213759%E6%B4%B1%E6%B5%B7%E9%AA%91%E8%A1%8C.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213821%E6%B4%B1%E6%B5%B7%E9%AA%91%E8%A1%8C.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213930%E6%B4%B1%E6%B5%B7%E9%AA%91%E8%A1%8C.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213957%E6%B4%B1%E6%B5%B7%E9%AA%91%E8%A1%8C.jpg" alt=""></p><p>骑车返回大理古城的时候老婆提议去采摘草莓，想想这大好的天气，确实可以采一下草莓。从大理古城到才村码头路上有很多可以采草莓的地方，随便找了家问了一下25元/斤，价格很不错，比很多地方都便宜。看了一下地里的草莓，很多都熟透了，走在中间都能闻到很浓的香味，应该是很好吃。我们挑了一些熟的，个头不是很大的草莓，顺便拍了个小视频优化大舅哥家的小侄女。</p><p>采完草莓以后骑车继续往大理古城走，我们实在是想不到吃什么东西就打算去人民路吃金拱门了。骑车过去的时候路过洋人街有挺多的云南樱花，特别漂亮。在金拱门点了个套餐吃完后返回客栈拿了行李乘坐8路车前往大理火车站，只花了40分钟就到了。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228214044%E6%B4%8B%E4%BA%BA%E8%A1%97.jpg" alt=""></p><p>从大理火车站到昆明火车站两个小时，这次买的是二等座145元/人。五点多一点到达昆明火车站以后，由于我们预约了从昆明火车站到昆明长水机场的接机服务，但是接机的司机堵车堵了好久一直到六点十分才过来，中间等的时间太长了，我们就在边上吃了点零食，然后逛了一下超市。</p><p>六点十分司机过来接我们以后大概花了三十多分钟就从昆明火车站到了长水机场，比转乘地铁快很多。这一天刚好是冬至，农历十六，窗外的月亮特别圆，而且比在低海拔地区看到的更大，再加上云南的天比较干净，看得特别清晰。</p><p>晚上十点五十左右到达深圳，刚好快赶上末班地铁了，一路顺顺利利的到家了。此行八天七夜的云南之行圆满结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;这个是草稿，实在写不下去了&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;行程&quot;&gt;&lt;a href=&quot;#行程&quot; class=&quot;headerlink&quot; title=&quot;行程&quot;&gt;&lt;/a&gt;行程&lt;/h3&gt;&lt;p&gt;原计划时加上往返路程一共九天，最终只呆了八天回来了，感觉有点累。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2018-12-15 深圳 - 昆明 - 大理 大理天气阴天7-18℃&lt;/li&gt;
&lt;li&gt;2018-12-16 崇圣寺三塔公园 - 洱海骑行 大理天气多云5-18℃&lt;/li&gt;
&lt;li&gt;2018-12-17 甘海子 - 玉龙雪山 - 蓝月谷 丽江天气晴6-19℃&lt;/li&gt;
&lt;li&gt;2018-12-18 长江第一湾 - 虎跳峡 - 普达措国家公园 大雪零下6-零上3℃ &lt;/li&gt;
&lt;li&gt;2018-12-19 香巴拉时轮坛城 - 象山公园 - 独克宗 晴 &lt;/li&gt;
&lt;li&gt;2018-12-20 泸沽湖观景台 - 猪槽船 - 篝火晚会 晴&lt;/li&gt;
&lt;li&gt;2018-12-21 草海 - 走婚桥 - 摩梭家访 晴&lt;/li&gt;
&lt;li&gt;2018-12-22 洱海骑行 - 采草莓 - 深圳 晴&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="走四方" scheme="http://yoursite.com/tags/%E8%B5%B0%E5%9B%9B%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>hexo-使用nginx部署</title>
    <link href="http://yoursite.com/2018/12/13/hexo-%E4%BD%BF%E7%94%A8nginx%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/12/13/hexo-使用nginx部署/</id>
    <published>2018-12-13T00:38:25.000Z</published>
    <updated>2018-12-24T00:58:36.575Z</updated>
    
    <content type="html"><![CDATA[<p>通常使用hexo在本地调试运行的时候我们运行<code>hexo s</code>即可，如果我们想要部署博客供人访问的时候就要采用别的方式了。我这里选择的是使用nginx部署：</p><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>安装nginx可以参考<a href="http://www.runoob.com/linux/nginx-install-setup.html" target="_blank" rel="noopener">菜鸟教程</a></p><h4 id="使用nginx配置hexo"><a href="#使用nginx配置hexo" class="headerlink" title="使用nginx配置hexo"></a>使用nginx配置hexo</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>   /usr/local/blog/jacentsao.github.io/.deploy_git;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获得免费的https证书"><a href="#获得免费的https证书" class="headerlink" title="获得免费的https证书"></a>获得免费的https证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yum install epel-release</span><br><span class="line"><span class="meta">$</span> yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br><span class="line"><span class="meta">$</span> yum install python2-certbot-nginx</span><br><span class="line"><span class="meta">$</span> yum install -y certbot</span><br><span class="line">//获取证书</span><br><span class="line"><span class="meta">$</span> certbot certonly --standalone -d example.com --agree-tos --email yourmail</span><br></pre></td></tr></table></figure><h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">       <span class="attribute">server_name</span>  localhost;</span><br><span class="line">       <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">       <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/yourdomain/fullchain.pem;</span><br><span class="line">       <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/yourdomain/privkey.pem;</span><br><span class="line">       .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动更新证书"><a href="#自动更新证书" class="headerlink" title="自动更新证书"></a>自动更新证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//自动刷新证书（证书有效期90天）</span><br><span class="line"><span class="meta">$</span> 10 1 * */2 * certbot renew --pre-hook "systemctl stop nginx" --post-hook "systemctl start nginx"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常使用hexo在本地调试运行的时候我们运行&lt;code&gt;hexo s&lt;/code&gt;即可，如果我们想要部署博客供人访问的时候就要采用别的方式了。我这里选择的是使用nginx部署：&lt;/p&gt;
&lt;h4 id=&quot;安装nginx&quot;&gt;&lt;a href=&quot;#安装nginx&quot; class=&quot;h
      
    
    </summary>
    
      <category term="博客编写" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>自由行-搭建ss服务器</title>
    <link href="http://yoursite.com/2018/12/12/%E8%87%AA%E7%94%B1%E8%A1%8C-%E6%90%AD%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2018/12/12/自由行-搭建ss服务器/</id>
    <published>2018-12-12T11:32:02.000Z</published>
    <updated>2018-12-24T00:58:36.576Z</updated>
    
    <content type="html"><![CDATA[<p>详细安装配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> curl -O https://copr.fedorainfracloud.org/coprs/librehat/shadowsocks/repo/epel-7/librehat-shadowsocks-epel-7.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> yum install -y shadowsocks-libev</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> python get-pip.py</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> pip install --upgrade pip</span><br><span class="line"></span><br><span class="line">//修改配置，主要是设置端口和密码</span><br><span class="line"><span class="meta">$</span> vim /etc/shadowsocks.json</span><br><span class="line">    &#123;</span><br><span class="line">    "server": "0.0.0.0",</span><br><span class="line">    "local_address": "127.0.0.1",</span><br><span class="line">    "local_port": 1080,</span><br><span class="line">    "port_password": &#123;</span><br><span class="line">        "26888": "yourpassword",</span><br><span class="line">        "26889": "yourpassword"</span><br><span class="line">    &#125;,</span><br><span class="line">    "timeout": 600,</span><br><span class="line">    "method": "aes-256-cfb"</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//添加ss系统服务</span><br><span class="line"><span class="meta">$</span> vim /etc/systemd/system/shadowsocks.service</span><br><span class="line">    [Unit]</span><br><span class="line">    Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">    [Service]</span><br><span class="line">    TimeoutStartSec=0</span><br><span class="line">    ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">    [Install]</span><br><span class="line">    WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">//启动ss服务   </span><br><span class="line"><span class="meta">$</span>  systemctl enable shadowsocks</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;详细安装配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
      
    
    </summary>
    
      <category term="自由行" scheme="http://yoursite.com/categories/%E8%87%AA%E7%94%B1%E8%A1%8C/"/>
    
    
      <category term="自由行" scheme="http://yoursite.com/tags/%E8%87%AA%E7%94%B1%E8%A1%8C/"/>
    
      <category term="shadowsocks" scheme="http://yoursite.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Java - 搭建RocketMQ开发环境</title>
    <link href="http://yoursite.com/2018/12/04/Java-%E6%90%AD%E5%BB%BARocketMQ%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/12/04/Java-搭建RocketMQ开发环境/</id>
    <published>2018-12-04T08:34:43.000Z</published>
    <updated>2018-12-24T00:58:36.575Z</updated>
    
    <content type="html"><![CDATA[<p>今天尝试搭建一下RocketMQ开发环境，特此记录下搭建流程和搭建过程中遇到的一些问题。</p><p>首先根据官网的<a href="https://rocketmq.apache.org/docs/quick-start/" target="_blank" rel="noopener">教程</a>搭建。</p><h3 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul><li>64bit OS, Linux/Unix/Mac is recommended;</li><li>64bit JDK 1.8+;</li><li>Maven 3.2.x;</li><li>Git;</li><li>4g+ free disk for Broker server</li></ul><h4 id="下载，构建"><a href="#下载，构建" class="headerlink" title="下载，构建"></a>下载，构建</h4><p>下载源码或者release的版本，下载地址: <a href="https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.3.2/rocketmq-all-4.3.2-source-release.zip" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.3.2/rocketmq-all-4.3.2-source-release.zip</a></p><p>如果下载的是源码的话需要使用maven进行编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">&gt;</span> unzip rocketmq-all-4.3.2-source-release.zip</span><br><span class="line"><span class="meta">&gt;</span> cd rocketmq-all-4.3.2/</span><br><span class="line"><span class="meta">&gt;</span> mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line"><span class="meta">&gt;</span> cd distribution/target/apache-rocketmq</span><br></pre></td></tr></table></figure><p>如果不是源码的话直接进入解压后的文件即可。</p><h4 id="启动Name-Server"><a href="#启动Name-Server" class="headerlink" title="启动Name Server"></a>启动Name Server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> nohup sh bin/mqnamesrv &amp;</span><br><span class="line"><span class="meta">&gt;</span> tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line">The Name Server boot success...</span><br><span class="line">以上是官网提供的示例。我遇到的情况是输出倒了当前目录下的nohup.out文件中，使用tail 或者vim确定Name Server是否正常启动</span><br></pre></td></tr></table></figure><h4 id="启动Broker"><a href="#启动Broker" class="headerlink" title="启动Broker"></a>启动Broker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class="line"><span class="meta">&gt;</span> tail -f ~/logs/rocketmqlogs/broker.log </span><br><span class="line">The broker[%s, 172.30.30.233:10911] boot success...</span><br><span class="line">同样的在nohub.out中查看</span><br></pre></td></tr></table></figure><h4 id="发送和接收消息"><a href="#发送和接收消息" class="headerlink" title="发送和接收消息"></a>发送和接收消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//告诉客户端需要发送到哪个服务端</span><br><span class="line"><span class="meta">&gt;</span> export NAMESRV_ADDR=localhost:9876</span><br><span class="line"><span class="meta">&gt;</span> sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId= ...</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br><span class="line"><span class="meta">ConsumeMessageThread_%</span>d Receive New Messages: [MessageExt...</span><br></pre></td></tr></table></figure><h4 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> sh bin/mqshutdown broker</span><br><span class="line">The mqbroker(36695) is running...</span><br><span class="line">Send shutdown request to mqbroker(36695) OK</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> sh bin/mqshutdown namesrv</span><br><span class="line">The mqnamesrv(36664) is running...</span><br><span class="line">Send shutdown request to mqnamesrv(36664) OK</span><br></pre></td></tr></table></figure><h3 id="简单的示例"><a href="#简单的示例" class="headerlink" title="简单的示例"></a>简单的示例</h3><p>官网地址<a href="https://rocketmq.apache.org/docs/simple-example/" target="_blank" rel="noopener">https://rocketmq.apache.org/docs/simple-example/</a></p><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h4><p>由于我们使用的是maven管理工具,gradle的依赖可以参考官网。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-发送同步消息"><a href="#2-1-发送同步消息" class="headerlink" title="2.1 发送同步消息"></a>2.1 发送同步消息</h4><p>同步消息适合于很多场景，例如重要消息的通知，SMS通知，SMS系统市场。其他都在官网，可以多多看看文档。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//Instantiate with a producer group name.</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span></span><br><span class="line">            DefaultMQProducer(<span class="string">"please_rename_unique_group_name"</span>);</span><br><span class="line">        <span class="comment">// Specify name server addresses.</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line">        <span class="comment">//Launch the instance.</span></span><br><span class="line">        producer.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//Create a message instance, specifying topic, tag and message body.</span></span><br><span class="line">            Message msg = <span class="keyword">new</span> Message(<span class="string">"TopicTest"</span> <span class="comment">/* Topic */</span>,</span><br><span class="line">                <span class="string">"TagA"</span> <span class="comment">/* Tag */</span>,</span><br><span class="line">                (<span class="string">"Hello RocketMQ "</span> +</span><br><span class="line">                    i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="comment">/* Message body */</span></span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//Call send message to deliver message to one of brokers.</span></span><br><span class="line">            SendResult sendResult = producer.send(msg);</span><br><span class="line">            System.out.printf(<span class="string">"%s%n"</span>, sendResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Shut down once the producer instance is not longer in use.</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, MQClientException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Instantiate with specified consumer group name.</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"please_rename_unique_group_name"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// Specify name server addresses.</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Subscribe one more more topics to consume.</span></span><br><span class="line">        consumer.subscribe(<span class="string">"TopicTest"</span>, <span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">// Register callback to execute on arrival of messages fetched from brokers.</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class="line"><span class="function"><span class="params">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">                System.out.printf(<span class="string">"%s Receive New Messages: %s %n"</span>, Thread.currentThread().getName(), msgs);</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Launch the consumer instance.</span></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"Consumer Started.%n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="1-error-39-Cannot-allocate-memory-39"><a href="#1-error-39-Cannot-allocate-memory-39" class="headerlink" title="1. error=&#39;Cannot allocate memory&#39;"></a>1. <code>error=&#39;Cannot allocate memory&#39;</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000005fb000000, 8589934592, 0) failed; error='Cannot allocate memory' (errno=12)</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"><span class="meta">#</span> Native memory allocation (malloc) failed to allocate 8589934592 bytes for committing reserved memory.</span><br><span class="line"><span class="meta">#</span> An error report file with more information is saved as:</span><br><span class="line"><span class="meta">#</span> /usr/local/mq/rocketmq-all-4.3.2-bin-release/hs_err_pid6845.log</span><br><span class="line">Unrecognized VM option 'MetaspaceSize=128m'</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will exit.</span><br></pre></td></tr></table></figure><p>将bin目录下的runbroker.sh的虚拟机配置调整如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn125m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span><br></pre></td></tr></table></figure><p>同样的如果nameserver有问题也要相应的进行调整。</p><h4 id="2-Exception-in-thread-quot-main-quot-org-apache-rocketmq-remoting-exception-RemotingTooMuchRequestException-sendDefaultImpl-call-timeout"><a href="#2-Exception-in-thread-quot-main-quot-org-apache-rocketmq-remoting-exception-RemotingTooMuchRequestException-sendDefaultImpl-call-timeout" class="headerlink" title="2. Exception in thread &quot;main&quot; org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout"></a>2. <code>Exception in thread &quot;main&quot; org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout</code></h4><p>由于RocktMQ没有绑定网卡ip导致，如果服务器有多网卡配置的时候，或者虚拟机。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//生成配置信息</span><br><span class="line">echo "brokerIP1=10.2.x.x" &gt; broker.properties</span><br><span class="line"></span><br><span class="line">//broker绑定ip</span><br><span class="line">nohup sh bin/mqbroker -n 10.2.x.x:9876 -c ./broker.properties autoCreateTopicEnable=true &amp;</span><br></pre></td></tr></table></figure></p><h4 id="3-Unrecognized-VM-option-39-MetaspaceSize-128m-39"><a href="#3-Unrecognized-VM-option-39-MetaspaceSize-128m-39" class="headerlink" title="3. Unrecognized VM option &#39;MetaspaceSize=128m&#39;"></a>3. <code>Unrecognized VM option &#39;MetaspaceSize=128m&#39;</code></h4><p>Java版本太低出现报错，此时需要升级到Java8，或者将该配置移除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unrecognized VM option 'MetaspaceSize=128m'</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br></pre></td></tr></table></figure><p>移除以后即：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn125m"</span><br></pre></td></tr></table></figure><h4 id="4-No-route-info-of-this-topic"><a href="#4-No-route-info-of-this-topic" class="headerlink" title="4. No route info of this topic"></a>4. <code>No route info of this topic</code></h4><pre><code>1. 请检查服务器端口是否是开放的2. 可以试一下关闭客户端的防火墙再去请求试试。3. 检查服务器是否有执行export NAMESRV_ADDR=localhost:9876</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天尝试搭建一下RocketMQ开发环境，特此记录下搭建流程和搭建过程中遇到的一些问题。&lt;/p&gt;
&lt;p&gt;首先根据官网的&lt;a href=&quot;https://rocketmq.apache.org/docs/quick-start/&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>hexo-多设备之间无缝衔接</title>
    <link href="http://yoursite.com/2018/11/28/hexo-%E5%A4%9A%E8%AE%BE%E5%A4%87%E4%B9%8B%E9%97%B4%E6%97%A0%E7%BC%9D%E8%A1%94%E6%8E%A5/"/>
    <id>http://yoursite.com/2018/11/28/hexo-多设备之间无缝衔接/</id>
    <published>2018-11-28T14:56:04.000Z</published>
    <updated>2018-12-24T00:58:36.576Z</updated>
    
    <content type="html"><![CDATA[<p>最开始使用hexo的时候是在自己的Mac上面搭的，那时候每天都是背着自己的电脑上下班也没觉得不方便。后来老婆跟我在一起以后老是嫌弃我过安检的时候要走有包通道，非常耗时。所以就放弃了带自己的电脑上班，改为专门使用公司提供的Windows工作。这个时候就必须要把家里的电脑和公司的电脑的博客进行同步了。</p><!-- --><h4 id="安装依赖工具"><a href="#安装依赖工具" class="headerlink" title="安装依赖工具"></a>安装依赖工具</h4><ol><li>安装node</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//下载</span><br><span class="line"><span class="meta">$</span> wget https://nodejs.org/dist/v10.14.0/node-v10.14.0-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">//解压</span><br><span class="line"><span class="meta">$</span> tar xf node-v10.14.0-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">//放到usr/local/node目录下</span><br><span class="line"><span class="meta">$</span> mkdir /usr/local/node</span><br><span class="line"><span class="meta">$</span> mv node-v10.14.0-linux-x64   /usr/local/node</span><br><span class="line"></span><br><span class="line">//配置环境变量</span><br><span class="line"><span class="meta">$</span> vim ~/.zshrc</span><br><span class="line"><span class="meta">$</span> /usr/local/node/node-v10.14.0-linux-x64/bin 添加到环境变量中</span><br><span class="line"><span class="meta">$</span> source ~/.zshrc 刷新</span><br><span class="line"><span class="meta">$</span> node -v 确认node是否安装ok</span><br></pre></td></tr></table></figure><h4 id="获取hexo博客源码"><a href="#获取hexo博客源码" class="headerlink" title="获取hexo博客源码"></a>获取hexo博客源码</h4><p>将自己的博客通过各种方式获取到当前设备，比如我自己用的是git。如下所示是我的源码分支：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181212195458hexo-sourcefile.png" alt=""></p><p>以下是我的生成的网页的分支：<br><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181212200121hexo-master.png" alt=""></p><p>另外再把主题单独弄一个<a href="https://github.com/jacentsao/hexo-theme-next" target="_blank" rel="noopener">项目</a>进行同步。</p><p>我的做法是先拉取网页代码分支，然后进入目录以后再拉取一份切换到源码分支并改名叫.deploy_git</p><h4 id="安装启动hexo"><a href="#安装启动hexo" class="headerlink" title="安装启动hexo"></a>安装启动hexo</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g hexo-cli</span><br><span class="line"><span class="meta">$</span> npm install hexo --save</span><br><span class="line"><span class="meta">$</span> hexo s --debug</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最开始使用hexo的时候是在自己的Mac上面搭的，那时候每天都是背着自己的电脑上下班也没觉得不方便。后来老婆跟我在一起以后老是嫌弃我过安检的时候要走有包通道，非常耗时。所以就放弃了带自己的电脑上班，改为专门使用公司提供的Windows工作。这个时候就必须要把家里的电脑和公司
      
    
    </summary>
    
      <category term="博客编写" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Stub简介</title>
    <link href="http://yoursite.com/2018/11/28/Stub%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2018/11/28/Stub简介/</id>
    <published>2018-11-28T08:37:00.000Z</published>
    <updated>2018-11-28T08:49:10.603Z</updated>
    
    <content type="html"><![CDATA[<p>Stub 本意是指桩，具体含义如下：</p><ul><li>n. 存根；烟蒂；树桩；断株</li><li>vt. 踩熄；连根拔除</li><li>n. (Stub)人名；(挪、瑞典)斯图布</li></ul><p>在计算机语言中指<a href="https://zh.wikipedia.org/wiki/桩_(计算机" target="_blank" rel="noopener">维基百科</a>)。</p><p>桩[1]（Stub / Method Stub）是指用来替换一部分功能的程序段。桩程序可以用来模拟已有程序的行为（比如一个远端机器的过程）或是对将要开发的代码的一种临时替代。因此，打桩技术在程序移植、分布式计算、通用软件开发和测试中用处很大。</p><p>以下是桩程序的一个例子（伪码）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">    Temperature = ThermometerRead(Outside)</span><br><span class="line">    IF Temperature &gt; 40 THEN</span><br><span class="line">         PRINT &quot;It&apos;s HOT!&quot;</span><br><span class="line">    END IF</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">BEGIN ThermometerRead(Source insideOrOutside)</span><br><span class="line">     RETURN 28</span><br><span class="line">END ThermometerRead</span><br></pre></td></tr></table></figure><p>上例中的伪码调用了 ThermometerRead函数，其返回一个温度。由于ThermometerRead需要去读取硬件设备，而这个函数现在还没能开发完成，不能正常工作。ThermometerRead只是简单的返回了一个合理的值，这样主程序就能正常调用这个函数，并继续接下来的开发了。可以注意到，虽然它接受了一个Source类型的参数，表明需要返回的温度是内部还是外部的，实际上并没有对这个参数进行任何使用。</p><p>桩程序是一段并不执行任何实际功能的程序，只对接受的参数进行声明并返回一个合法值。这个返回值通常只是一个对于调用者来讲可接受的值即可。桩通常用在对一个已有接口的临时替换上，实际的接口程序在未来再对桩程序进行替换。</p><p>在远程方法调用（RMI）中将客户辅助对象称之为Stub（桩）；将服务辅助对象称之为skeleton[2]（骨架）。</p><p>RMI的过程是：客户对象一旦被调用，客户对象调用stub，stub调用网络远端的skeleton，而skeleton最终调用真正的服务对象。由此，在调用客户对象的时候，感觉上就是直接调用了真正的服务对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Stub 本意是指桩，具体含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n. 存根；烟蒂；树桩；断株&lt;/li&gt;
&lt;li&gt;vt. 踩熄；连根拔除&lt;/li&gt;
&lt;li&gt;n. (Stub)人名；(挪、瑞典)斯图布&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在计算机语言中指&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go程序设计语言(The Go Programming Language)</title>
    <link href="http://yoursite.com/2018/07/23/Go%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80-The-Go-Programming-Language/"/>
    <id>http://yoursite.com/2018/07/23/Go程序设计语言-The-Go-Programming-Language/</id>
    <published>2018-07-23T15:27:02.000Z</published>
    <updated>2018-11-28T01:27:42.908Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第2章-程序结构"><a href="#第2章-程序结构" class="headerlink" title="第2章 程序结构"></a>第2章 程序结构</h4><h5 id="2-1-名称"><a href="#2-1-名称" class="headerlink" title="2.1 名称"></a>2.1 名称</h5><ul><li><p>Go通过首字母的大小写来决定是否包外可见，大写代表可以被包外引用，小写意味着只能包内使用</p></li><li><p>Go使用驼峰命名的方式，不使用小写+下划线的方式</p></li><li><p>Go中，名称的作用域越大，使用越长且更有意义的名称</p></li></ul><h5 id="2-2-声明"><a href="#2-2-声明" class="headerlink" title="2.2 声明"></a>2.2 声明</h5><ul><li>var 变量</li><li>const 常量</li><li>type 类型</li><li>func 函数</li></ul><h5 id="2-3-变量"><a href="#2-3-变量" class="headerlink" title="2.3 变量"></a>2.3 变量</h5><p>var 声明创建一个具体类型的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var name type = expression</span><br></pre></td></tr></table></figure><p>类型和表达式可以省略一个，省略类型自动根据表达式推导类型，省略表达式则变量取默认值（数字为0，布尔型为FALSE，字符串为””，接口和引用类型(slice、指针、map、通道、函数为nil)，数组或结构体这样的符合类型，零值是所有元素或成员的零值）</p><h6 id="2-3-1-短变量声明"><a href="#2-3-1-短变量声明" class="headerlink" title="2.3.1 短变量声明"></a>2.3.1 短变量声明</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i, j := 0,1</span><br><span class="line">i,j = j, i</span><br><span class="line">i:= 1</span><br></pre></td></tr></table></figure><h5 id="2-3-2-指针"><a href="#2-3-2-指针" class="headerlink" title="2.3.2 指针"></a>2.3.2 指针</h5><p>变量是存储值的地方</p><p>指针的值是一个变量的地址。一个指针指示值所保存的位置。不是所有的值都有地址，但是所有的变量都有。使用指针可以在不知道变量名的情况下间接更新或者使用变量的值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第2章-程序结构&quot;&gt;&lt;a href=&quot;#第2章-程序结构&quot; class=&quot;headerlink&quot; title=&quot;第2章 程序结构&quot;&gt;&lt;/a&gt;第2章 程序结构&lt;/h4&gt;&lt;h5 id=&quot;2-1-名称&quot;&gt;&lt;a href=&quot;#2-1-名称&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>使用docker安装WordPress</title>
    <link href="http://yoursite.com/2018/05/31/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85WordPress/"/>
    <id>http://yoursite.com/2018/05/31/使用docker安装WordPress/</id>
    <published>2018-05-31T00:40:17.000Z</published>
    <updated>2018-11-28T01:27:42.917Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下载WorldPress镜像"><a href="#下载WorldPress镜像" class="headerlink" title="下载WorldPress镜像"></a>下载WorldPress镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ sudo docker pull wordpress:latest</span><br><span class="line">$ sudo docker pull mysql</span><br><span class="line">$ docker run --name docker-mysql -e MYSQL_ROOT_PASSWORD=KingDee@2017 -d mysql:5.7</span><br><span class="line">$ docker run --name docker-wordpress --link docker-mysql:mysql -p 6000:80 -d wordpress</span><br><span class="line"></span><br><span class="line">$ 安装插件：https://wordpress.org/plugins/useso-take-over-google/</span><br><span class="line"></span><br><span class="line">$ docker run -p 3306:3306 --name e-mysql -e MYSQL_ROOT_PASSWORD=10086.com -d mysql:5.7</span><br><span class="line"></span><br><span class="line">$ docker exec -it 88dab2f338c6 bash  </span><br><span class="line">$ mysql -uroot -p -h localhost</span><br><span class="line">$ use mysql</span><br><span class="line"></span><br><span class="line">$ docker run -p 6379:6379 -v $PWD/data:/data  -d redis:3.2 redis-server --appendonly yes</span><br><span class="line"></span><br><span class="line">$ docker exec -it  b1125e1d09b8  redis-cli</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;下载WorldPress镜像&quot;&gt;&lt;a href=&quot;#下载WorldPress镜像&quot; class=&quot;headerlink&quot; title=&quot;下载WorldPress镜像&quot;&gt;&lt;/a&gt;下载WorldPress镜像&lt;/h4&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Zheng项目学习</title>
    <link href="http://yoursite.com/2018/05/14/Zheng%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/05/14/Zheng项目学习/</id>
    <published>2018-05-14T15:12:04.000Z</published>
    <updated>2018-11-28T01:27:42.912Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h4><h5 id="1-安装redis"><a href="#1-安装redis" class="headerlink" title="1. 安装redis"></a>1. 安装redis</h5><p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。</p><h6 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h6><p>从Github上面下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/MicrosoftArchive/redis/releases</span><br></pre></td></tr></table></figure></p><h6 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ brew install redis</span><br><span class="line"></span><br><span class="line">To have launchd start redis now and restart at login:</span><br><span class="line">  brew services start redis</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  redis-server /usr/local/etc/redis.conf</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">$ redis-cli 进入redis命令</span><br></pre></td></tr></table></figure><h5 id="2-安装zookeeper"><a href="#2-安装zookeeper" class="headerlink" title="2. 安装zookeeper"></a>2. 安装zookeeper</h5><p>Zookeeper是一种分布式协调服务，用于管理大型主机。在分布式环境中协调和管理服务是一个复杂的过程，Zookeeper通过其简单的架构和API解决了这些问题。Zookeeper允许开发人员专注与核心应用程序逻辑，而不必担心应用程序的分布式特征。</p><p>分布式应用正在运行的一组系统成为<strong>集群</strong>，集群中运行的每台机器称为<strong>节点</strong>。</p><h6 id="Macos通过brew安装"><a href="#Macos通过brew安装" class="headerlink" title="Macos通过brew安装"></a>Macos通过brew安装</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew install zookeeper</span><br><span class="line">To have launchd start zookeeper now and restart at login:</span><br><span class="line">  brew services start zookeeper</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  zkServer start</span><br></pre></td></tr></table></figure><h6 id="从Apache官网下载"><a href="#从Apache官网下载" class="headerlink" title="从Apache官网下载"></a>从Apache官网下载</h6><p>下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://mirror.bit.edu.cn/apache/zookeeper/stable/zookeeper-3.4.12.tar.gz</span><br></pre></td></tr></table></figure><p>下载解压以后需要更改配置文件</p><ol><li>在解压的目录下新建配置文件zoo.cfg</li><li>新增以下配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tickTime = 2000dataDir = /path/to/zookeeper/dataclientPort = 2181initLimit = 5syncLimit = 2</span><br></pre></td></tr></table></figure><ol><li>启动解压目录下的zkServer.sh(linux)或者zkServer.cmd(Windows)</li><li>启动解压目录下的zkCli.sh(linux)或者zkCli.cmd(Windows)</li></ol><h5 id="3-安装-Apache-ActiveMQ"><a href="#3-安装-Apache-ActiveMQ" class="headerlink" title="3. 安装 Apache ActiveMQ"></a>3. 安装 Apache ActiveMQ</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew install apache-activemq</span><br><span class="line">To have launchd start activemq now and restart at login:</span><br><span class="line">  brew services start activemq</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  activemq start</span><br></pre></td></tr></table></figure><h5 id="4-安装MySQL"><a href="#4-安装MySQL" class="headerlink" title="4. 安装MySQL"></a>4. 安装MySQL</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ brew install mysql</span><br><span class="line">We&apos;ve installed your MySQL database without a root password. To secure it run:</span><br><span class="line">    mysql_secure_installation</span><br><span class="line"></span><br><span class="line">MySQL is configured to only allow connections from localhost by default</span><br><span class="line"></span><br><span class="line">To connect run:</span><br><span class="line">    mysql -uroot</span><br><span class="line"></span><br><span class="line">To have launchd start mysql now and restart at login:</span><br><span class="line">  brew services start mysql</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  mysql.server start</span><br></pre></td></tr></table></figure><h5 id="5-安装jenkins"><a href="#5-安装jenkins" class="headerlink" title="5. 安装jenkins"></a>5. 安装jenkins</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Note: When using launchctl the port will be 8080.</span><br><span class="line"></span><br><span class="line">To have launchd start jenkins now and restart at login:</span><br><span class="line">  brew services start jenkins</span><br><span class="line">Or, if you don&apos;t want/need a background service you can just run:</span><br><span class="line">  jenkins</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/jenkins/2.121: 7 files, 74.4MB, built in 42 seconds</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-环境配置&quot;&gt;&lt;a href=&quot;#1-环境配置&quot; class=&quot;headerlink&quot; title=&quot;1. 环境配置&quot;&gt;&lt;/a&gt;1. 环境配置&lt;/h4&gt;&lt;h5 id=&quot;1-安装redis&quot;&gt;&lt;a href=&quot;#1-安装redis&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>内网部署yapi接口管理平台</title>
    <link href="http://yoursite.com/2018/05/13/%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2yapi%E6%8E%A5%E5%8F%A3%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/"/>
    <id>http://yoursite.com/2018/05/13/离线部署yapi接口管理平台/</id>
    <published>2018-05-13T14:29:29.000Z</published>
    <updated>2018-11-28T01:27:42.920Z</updated>
    
    <content type="html"><![CDATA[<p>YApi 是一个可本地部署的、打通前后端及QA的、可视化的接口管理平台，<a href="https://yapi.ymfe.org" target="_blank" rel="noopener">项目官网</a>,<a href="https://github.com/YMFE/yapi" target="_blank" rel="noopener">Github地址</a>。</p><p>本文是对自己在多平台内网部署的时候的过程及遇到的问题的记录。</p><a id="more"></a><h4 id="内网部署"><a href="#内网部署" class="headerlink" title="内网部署"></a>内网部署</h4><h5 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h5><ul><li>nodejs (7.6+)</li><li>mongodb (2.6+)</li><li>git </li></ul><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>使用yapi-cli工具部署。执行yapi sever启动可视化部署程序。</p><h5 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h5><p>cd  {项目目录}<br>yapi ls //查看版本号列表<br>yapi update //更新到最新版本<br>yapi update -v {Version} //更新到指定版本</p><h4 id="centos安装环境"><a href="#centos安装环境" class="headerlink" title="centos安装环境"></a>centos安装环境</h4><h5 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h5><p>使用EPEL安装nodejs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ yum info epel-release  检查是否有安装</span><br><span class="line"></span><br><span class="line">$ sudo yum install epel-release 安装epel</span><br><span class="line"></span><br><span class="line">$ sudo yum install -y nodejs 安装nodejs</span><br><span class="line"></span><br><span class="line">$ sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">$ sudo npm install -g n</span><br><span class="line"></span><br><span class="line">$ sudo n stable 安装最新的稳定版本</span><br></pre></td></tr></table></figure><h5 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h5><p>1 . 创建文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/yum.repos.d/mongodb-org.repo</span><br></pre></td></tr></table></figure><p>2 . 复制下面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.6]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc</span><br></pre></td></tr></table></figure><p>国内的服务器替换 baseurl 为阿里源,否则你回感受来自共产主义的负加成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/6/mongodb-org/stable/x86_64/</span><br></pre></td></tr></table></figure><p>我搭建的时候用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/7Server/mongodb-org/3.2/x86_64/</span><br></pre></td></tr></table></figure><p>下载速度很快但是每次卡在最后一步，最后把3.2版本改为3.6以后一下载就安装好了</p><p>3 . 更新文件，安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum udpate </span><br><span class="line">$ yum -y install mongodb=org</span><br></pre></td></tr></table></figure><h5 id="配置nginx代理"><a href="#配置nginx代理" class="headerlink" title="配置nginx代理"></a>配置nginx代理</h5><p>由于centos是丢在一台Windows机器的Vmware WorkStation上面，所以还用了nginx反向代理yapi，配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">            proxy_pass   http://127.0.0.1:3011;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Macos安装"><a href="#Macos安装" class="headerlink" title="Macos安装"></a>Macos安装</h4><p>由于开了全局代理，终端翻墙，安装过程基本按照<a href="https://github.com/suxiaoxin/yapi_user_guide/blob/master/mac%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.md" target="_blank" rel="noopener">官方教程</a>过程很流畅。</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>做开发，一要网络好，二要代理好。感谢GCD，感谢阿里巴巴。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;YApi 是一个可本地部署的、打通前后端及QA的、可视化的接口管理平台，&lt;a href=&quot;https://yapi.ymfe.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目官网&lt;/a&gt;,&lt;a href=&quot;https://github.com/YMFE/yapi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github地址&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文是对自己在多平台内网部署的时候的过程及遇到的问题的记录。&lt;/p&gt;
    
    </summary>
    
      <category term="api" scheme="http://yoursite.com/categories/api/"/>
    
    
      <category term="api" scheme="http://yoursite.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>java - lambda学习笔记</title>
    <link href="http://yoursite.com/2018/04/10/java-lambda%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/10/java-lambda学习笔记/</id>
    <published>2018-04-10T07:39:36.000Z</published>
    <updated>2018-11-28T01:27:42.915Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>后端性能测试1</title>
    <link href="http://yoursite.com/2018/03/20/%E5%90%8E%E7%AB%AF%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%951/"/>
    <id>http://yoursite.com/2018/03/20/后端性能测试1/</id>
    <published>2018-03-20T13:05:15.000Z</published>
    <updated>2018-11-28T01:27:42.918Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做Golang上线前的准备工作，包括部署和性能测试，本次主要记录性能测试相关的内容，以免自己遗忘。</p><h4 id="ab命令行测试-Apache-Benchmark"><a href="#ab命令行测试-Apache-Benchmark" class="headerlink" title="ab命令行测试(Apache Benchmark)"></a>ab命令行测试(Apache Benchmark)</h4><p>首先想到的是简单的性能测试工具ab（Apache Benchmark），MacOS应该是自带了ab测试工具，Windows的话需要自行安装配置，可以参考一下<a href="https://stackoverflow.com/questions/7327099/how-to-install-apache-bench-on-windows-7" target="_blank" rel="noopener">链接</a>。</p><p>安装好ab工具以后在终端输入ab可以看到很多参数，其中常用的参数有：</p><ul><li>-n requests 请求次数量</li><li>-c concurency 并发的请求数量</li><li>-t timelimit 请求的次数限制，默认值为-n 50000</li><li>-s timeout 请求的单次超时，默认值为30s</li><li>-p postfile 发送文件中的请求，配合-T 使用</li><li>-T Content-type 默认值’text/plain’</li></ul><p>以下一个完整的ab测试post请求如下：</p><figure class="highlight plain"><figcaption><span>-n 100 -c 10 -p ./login.txt -T 'application/json'</span><a href="http://127.0.0.1:5174/" target="_blank" rel="noopener">```</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">即100次请求，并发数为10，指定当前目录下的login.txt文件中的json数据发送到服务器localhost，5174端口。以下是login.txt中的文件内容:</span><br></pre></td></tr></table></figure><p>{“test”:”test”,”cmd”:”test”}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 测试结果分析</span><br><span class="line"></span><br><span class="line">以下是以请求百度首页模拟100人总计10000此访问来进行ab测试返回分析:</span><br></pre></td></tr></table></figure></p><p>ab -n 10000 -c 100  <a href="https://www.baidu.com/index.html" target="_blank" rel="noopener">https://www.baidu.com/index.html</a><br>//ApacheBenchmark软件申明<br>This is ApacheBench, Version 2.3 &lt;$Revision: 1807734 $&gt;<br>Copyright 1996 Adam Twiss, Zeus Technology Ltd, <a href="http://www.zeustech.net/" target="_blank" rel="noopener">http://www.zeustech.net/</a><br>Licensed to The Apache Software Foundation, <a href="http://www.apache.org/" target="_blank" rel="noopener">http://www.apache.org/</a></p><p>//测试的网址<br>Benchmarking www.baidu.com (be patient)</p><p>//请求的进度<br>Completed 1000 requests<br>Completed 2000 requests<br>Completed 3000 requests<br>Completed 4000 requests<br>Completed 5000 requests<br>SSL handshake failed (1).<br>140735932269448:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22/libressl/ssl/s23_clnt.c:565:<br>Completed 6000 requests<br>Completed 7000 requests<br>SSL handshake failed (1).<br>140735932269448:error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol:/BuildRoot/Library/Caches/com.apple.xbs/Sources/libressl/libressl-22/libressl/ssl/s23_clnt.c:565:<br>Completed 8000 requests<br>Completed 9000 requests<br>Completed 10000 requests<br>Finished 10000 requests</p><p>//百度的服务器软件信息<br>Server Software:        BWS/1.1<br>//被测试的主机地址<br>Server Hostname:        www.baidu.com<br>//https的默认端口<br>Server Port:            443<br>//加密协议<br>SSL/TLS Protocol:       TLSv1.2,ECDHE-RSA-AES128-GCM-SHA256,2048,128<br>//加密服务器名称<br>TLS Server Name:        www.baidu.com</p><p>//文档的路径<br>Document Path:          /index.html<br>//文档的大小<br>Document Length:        227 bytes</p><p>//并发数<br>Concurrency Level:      100<br>//测试总的时间<br>Time taken for tests:   146.932 seconds<br>//完成的请求数量<br>Complete requests:      10000<br>//失败的次数<br>Failed requests:        2<br>   (Connect: 0, Receive: 0, Length: 2, Exceptions: 0)<br>//总的数据传输量，包括请求头和文本内容<br>Total transferred:      8718256 bytes<br>//请求的文档总大小 227 <em> 10000 （总计一万次请求）- 2 </em> 227（两次失败）<br>HTML transferred:       2269546 bytes<br>//每秒完成的请求数量 10000/146.932<br>Requests per second:    68.06 [#/sec] (mean)<br>//每个请求的平均耗时<br>Time per request:       1469.317 [ms] (mean)<br>//服务器完成一个请求的耗时<br>Time per request:       14.693 [ms] (mean, across all concurrent requests)<br>//服务器的吞吐率<br>Transfer rate:          57.94 [Kbytes/sec] received</p><p>//连接信息<br>Connection Times (ms)<br>              min  mean[+/-sd] median   max<br>Connect:        0 1220 947.0   1170   45274<br>Processing:    14  234 227.0    116    2292<br>Waiting:       13  220 214.9    114    2291<br>Total:        107 1454 961.3   1301   46006</p><p>//完成请求比例的耗时，如下完成90%的耗时为1990ms<br>Percentage of the requests served within a certain time (ms)<br>  50%   1301<br>  66%   1377<br>  75%   1464<br>  80%   1540<br>  90%   1990<br>  95%   2221<br>  98%   2827<br>  99%   2972<br> 100%  46006 (longest request)<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做Golang上线前的准备工作，包括部署和性能测试，本次主要记录性能测试相关的内容，以免自己遗忘。&lt;/p&gt;
&lt;h4 id=&quot;ab命令行测试-Apache-Benchmark&quot;&gt;&lt;a href=&quot;#ab命令行测试-Apache-Benchmark&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="性能" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD/"/>
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>数据库学习2 - 语法</title>
    <link href="http://yoursite.com/2018/01/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A02-%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/01/07/数据库学习2-语法/</id>
    <published>2018-01-07T02:05:32.000Z</published>
    <updated>2018-11-28T01:27:42.919Z</updated>
    
    <content type="html"><![CDATA[<h5 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h5><ul><li>如果查询的列名在用到的两个或者多个表中不重复，则对这一列的引用不用加表名限制</li><li>视图和基表数据是同步更新的，视图不能创建索引</li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;如果查询的列名在用到的两个或者多个表中不重复，则对这一列的引用不用加表名限制&lt;/li&gt;
&lt;li&gt;视图和基表数据是
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习笔记1</title>
    <link href="http://yoursite.com/2017/12/30/Kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2017/12/30/Kotlin学习笔记1/</id>
    <published>2017-12-30T03:47:39.000Z</published>
    <updated>2018-11-28T01:27:42.909Z</updated>
    
    <content type="html"><![CDATA[<p>随着Kotlin的越来越火热，对于Android开发者而言学习Kotlin也变成了一个必要的过程了。</p><h5 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h5><h6 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class User(name: String, age: Int) &#123;&#125; //如果类没有内容则大括号可以省略掉</span><br></pre></td></tr></table></figure><p>构造函数的函数体，即下列代码的init块中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class User(name: String, age: Int) &#123;</span><br><span class="line">init &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h6><p>默认任何类都是继承基础类Any（类似于java中的Object），但是我们可以继承其它类。所有的类默认都是final的，因此如果我们要让别的类继承的话就需要声明open或者abstract关键字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class User(name: String, age: Int)</span><br><span class="line"></span><br><span class="line">class Max(name: String, age: Int, gender: String) : User(name, age)</span><br></pre></td></tr></table></figure><p>如上所示，如果只有单个构造器时，需要从父类继承下来的构造器中指定需要的参数，类似于java super关键字</p><h6 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h6><p>函数使用fun声明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fun add(x: Int, y: Int): Int &#123;</span><br><span class="line">       return x + y</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">  func add(x: Int, y: Int) : Int = x+y</span><br><span class="line">   </span><br><span class="line"> 无返回值的函数，会返回Unit，于java中的void类似，但是Unit是一个真正的对象</span><br></pre></td></tr></table></figure><h6 id="构造方法和函数参数"><a href="#构造方法和函数参数" class="headerlink" title="构造方法和函数参数"></a>构造方法和函数参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">toast(&quot;hell&quot;) //使用默认的Toast.LENGTH_LONG</span><br><span class="line">toast(&quot;hell&quot;,Toast.LENGTH_LONG)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun toast(msg: String, length: Int = Toast.LENGTH_LONG) &#123;//执行函数默认值，避免方法重载</span><br><span class="line">        Toast.makeText(this,msg, length).show()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着Kotlin的越来越火热，对于Android开发者而言学习Kotlin也变成了一个必要的过程了。&lt;/p&gt;
&lt;h5 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h5&gt;&lt;h6 id=
      
    
    </summary>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>gomobile相关的错误处理</title>
    <link href="http://yoursite.com/2017/12/19/gomobile%E7%9B%B8%E5%85%B3%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2017/12/19/gomobile相关的错误处理/</id>
    <published>2017-12-19T04:16:06.000Z</published>
    <updated>2018-11-28T01:27:42.913Z</updated>
    
    <content type="html"><![CDATA[<p><strong>务必确认在构建非Windows包的时候，根目录下面无syso版本信息文件，否则各种各样的奇葩错误</strong></p><h5 id="seq-android-c-213-3-error"><a href="#seq-android-c-213-3-error" class="headerlink" title="seq_android.c:213:3: error"></a>seq_android.c:213:3: error</h5><figure class="highlight plain"><figcaption><span>go build -pkgdir</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># _/var/folders/w4/75xgx41n2bb7mm3m0dxbp0d40000gn/T/gomobile-work-159245723/gomobile_bind</span><br><span class="line">seq_android.c:213:3: error: implicitly declaring library function &apos;memcpy&apos; with type &apos;void *(void *, const void *, unsigned long)&apos; [-Werror,-Wimplicit-function-declaration]</span><br><span class="line">seq_android.c:213:3: note: include the header &lt;string.h&gt; or explicitly provide a declaration for &apos;memcpy&apos;</span><br></pre></td></tr></table></figure><p>解决方案</p><p><code>https://github.com/golang/go/issues/22766 seq_android.c:213:3: error</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;务必确认在构建非Windows包的时候，根目录下面无syso版本信息文件，否则各种各样的奇葩错误&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;seq-android-c-213-3-error&quot;&gt;&lt;a href=&quot;#seq-android-c-213-3-er
      
    
    </summary>
    
    
  </entry>
  
</feed>
