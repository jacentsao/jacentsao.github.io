<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silence of Heart</title>
  <subtitle>最怕彷徨无前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-07T02:13:51.634Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JacenTsao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库学习2 - 语法</title>
    <link href="http://yoursite.com/2018/01/07/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A02-%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/01/07/数据库学习2-语法/</id>
    <published>2018-01-07T02:05:32.000Z</published>
    <updated>2018-01-07T02:13:51.634Z</updated>
    
    <content type="html"><![CDATA[<h5 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h5><ul>
<li>如果查询的列名在用到的两个或者多个表中不重复，则对这一列的引用不用加表名限制</li>
<li>视图和基表数据是同步更新的，视图不能创建索引</li>
<li></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;如果查询的列名在用到的两个或者多个表中不重复，则对这一列的引用不用加表名限制&lt;/li&gt;
&lt;li&gt;视图和基表数据是
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习笔记1</title>
    <link href="http://yoursite.com/2017/12/30/Kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2017/12/30/Kotlin学习笔记1/</id>
    <published>2017-12-30T03:47:39.000Z</published>
    <updated>2017-12-30T05:58:05.627Z</updated>
    
    <content type="html"><![CDATA[<p>随着Kotlin的越来越火热，对于Android开发者而言学习Kotlin也变成了一个必要的过程了。</p>
<h5 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h5><h6 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class User(name: String, age: Int) &#123;&#125; //如果类没有内容则大括号可以省略掉</div></pre></td></tr></table></figure>
<p>构造函数的函数体，即下列代码的init块中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class User(name: String, age: Int) &#123;</div><div class="line">	init &#123;</div><div class="line">		...</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h6><p>默认任何类都是继承基础类Any（类似于java中的Object），但是我们可以继承其它类。所有的类默认都是final的，因此如果我们要让别的类继承的话就需要声明open或者abstract关键字。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class User(name: String, age: Int)</div><div class="line"></div><div class="line">class Max(name: String, age: Int, gender: String) : User(name, age)</div></pre></td></tr></table></figure>
<p>如上所示，如果只有单个构造器时，需要从父类继承下来的构造器中指定需要的参数，类似于java super关键字</p>
<h6 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h6><p>函数使用fun声明:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fun add(x: Int, y: Int): Int &#123;</div><div class="line">       return x + y</div><div class="line">   &#125;</div><div class="line">  </div><div class="line">  func add(x: Int, y: Int) : Int = x+y</div><div class="line">   </div><div class="line"> 无返回值的函数，会返回Unit，于java中的void类似，但是Unit是一个真正的对象</div></pre></td></tr></table></figure>
<h6 id="构造方法和函数参数"><a href="#构造方法和函数参数" class="headerlink" title="构造方法和函数参数"></a>构造方法和函数参数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">toast(&quot;hell&quot;) //使用默认的Toast.LENGTH_LONG</div><div class="line">toast(&quot;hell&quot;,Toast.LENGTH_LONG)</div><div class="line"></div><div class="line"></div><div class="line">fun toast(msg: String, length: Int = Toast.LENGTH_LONG) &#123;//执行函数默认值，避免方法重载</div><div class="line">        Toast.makeText(this,msg, length).show()</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着Kotlin的越来越火热，对于Android开发者而言学习Kotlin也变成了一个必要的过程了。&lt;/p&gt;
&lt;h5 id=&quot;基础语法&quot;&gt;&lt;a href=&quot;#基础语法&quot; class=&quot;headerlink&quot; title=&quot;基础语法&quot;&gt;&lt;/a&gt;基础语法&lt;/h5&gt;&lt;h6 id=
    
    </summary>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>gomobile相关的错误处理</title>
    <link href="http://yoursite.com/2017/12/19/gomobile%E7%9B%B8%E5%85%B3%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2017/12/19/gomobile相关的错误处理/</id>
    <published>2017-12-19T04:16:06.000Z</published>
    <updated>2017-12-19T04:22:17.574Z</updated>
    
    <content type="html"><![CDATA[<p><strong>务必确认在构建非Windows包的时候，根目录下面无syso版本信息文件，否则各种各样的奇葩错误</strong></p>
<h5 id="seq-android-c-213-3-error"><a href="#seq-android-c-213-3-error" class="headerlink" title="seq_android.c:213:3: error"></a>seq_android.c:213:3: error</h5><figure class="highlight plain"><figcaption><span>go build -pkgdir=/Users/Eveee/Storage/go/pkg/gomobile/pkg_android_arm64 -buildmode=c-shared -o=/var/folders/w4/75xgx41n2bb7mm3m0dxbp0d40000gn/T/gomobile-work-159245723/android/src/main/jniLibs/arm64-v8a/libgojni.so</span><a href="/var/folders/w4/75xgx41n2bb7mm3m0dxbp0d40000gn/T/gomobile-work-159245723/androidlib/main.go">failed: exit status 2</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># _/var/folders/w4/75xgx41n2bb7mm3m0dxbp0d40000gn/T/gomobile-work-159245723/gomobile_bind</div><div class="line">seq_android.c:213:3: error: implicitly declaring library function &apos;memcpy&apos; with type &apos;void *(void *, const void *, unsigned long)&apos; [-Werror,-Wimplicit-function-declaration]</div><div class="line">seq_android.c:213:3: note: include the header &lt;string.h&gt; or explicitly provide a declaration for &apos;memcpy&apos;</div></pre></td></tr></table></figure>
<p>解决方案</p>
<p><code>https://github.com/golang/go/issues/22766 seq_android.c:213:3: error</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;务必确认在构建非Windows包的时候，根目录下面无syso版本信息文件，否则各种各样的奇葩错误&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&quot;seq-android-c-213-3-error&quot;&gt;&lt;a href=&quot;#seq-android-c-213-3-er
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Go语言实战阅读笔记2</title>
    <link href="http://yoursite.com/2017/12/11/Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B02/"/>
    <id>http://yoursite.com/2017/12/11/Go语言实战阅读笔记2/</id>
    <published>2017-12-11T13:47:03.000Z</published>
    <updated>2017-12-13T14:35:24.291Z</updated>
    
    <content type="html"><![CDATA[<p>&amp;符号的意思是对变量取地址<br>*符号的意思是对指针取值</p>
<p>*和 &amp; 可以互相抵消,同时注意，*&amp;可以抵消掉，但&amp;*是不可以抵消的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;amp;符号的意思是对变量取地址&lt;br&gt;*符号的意思是对指针取值&lt;/p&gt;
&lt;p&gt;*和 &amp;amp; 可以互相抵消,同时注意，*&amp;amp;可以抵消掉，但&amp;amp;*是不可以抵消的&lt;/p&gt;

    
    </summary>
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go语言实战阅读笔记1</title>
    <link href="http://yoursite.com/2017/12/11/Go%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2017/12/11/Go语言实战阅读笔记1/</id>
    <published>2017-12-11T13:31:36.000Z</published>
    <updated>2017-12-11T13:45:00.449Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-1-Go语言的特性"><a href="#1-1-Go语言的特性" class="headerlink" title="1.1 Go语言的特性"></a>1.1 Go语言的特性</h5><h6 id="1-1-1-高效的开发速度和编译速度"><a href="#1-1-1-高效的开发速度和编译速度" class="headerlink" title="1.1.1  高效的开发速度和编译速度"></a>1.1.1  高效的开发速度和编译速度</h6><p>Golang编译没有从编译代码到执行代码的中间过程，用动态语言编写应用程序可以快速看到输出。代价是，动态语言不提供静态语言提供的类型安全特性，不得不大量使用测试套件来避免在运行的时候出现类型错误这类bug</p>
<h6 id="1-1-2-天然的并发支持"><a href="#1-1-2-天然的并发支持" class="headerlink" title="1.1.2 天然的并发支持"></a>1.1.2 天然的并发支持</h6><h6 id="1-1-2-1-goroutine"><a href="#1-1-2-1-goroutine" class="headerlink" title="1.1.2.1 goroutine"></a>1.1.2.1 goroutine</h6><p>不同于java和C需要编写大量额外的代码来使用线程，Golang在同一个线程中并行多个goroutine，net/http库直接使用了内置的goroutine，每个接收到的请求都在自己的goroutine中运行。goroutine使用的内存相对于线程而言更少，Go语言在运行时会自动在配置的一组逻辑处理器上调度执行goroutine。每个逻辑处理器绑定到一个操作系统上。这样子让用户的应用程序执行效率更高，而开发工作量显著减少。</p>
<h6 id="1-1-2-1-通道"><a href="#1-1-2-1-通道" class="headerlink" title="1.1.2.1 通道"></a>1.1.2.1 通道</h6><p>通道是一种在goroutine中进行安全的数据通信的数据结构，帮助用户避免其它语言里面常见的共享内存访问的问题</p>
<p>并发最难得部分就是要确保其他并发运行的进行、线程或goroutine不会以外修改用户的数据。在线程不安全的情况下访问和修改共享变量往往会带来灾难性的后果，在其它语言中，通常要通过复杂的锁规则来防止对一个全局变量或者共享内存造成不同步的修改</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-1-Go语言的特性&quot;&gt;&lt;a href=&quot;#1-1-Go语言的特性&quot; class=&quot;headerlink&quot; title=&quot;1.1 Go语言的特性&quot;&gt;&lt;/a&gt;1.1 Go语言的特性&lt;/h5&gt;&lt;h6 id=&quot;1-1-1-高效的开发速度和编译速度&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>数据库学习1</title>
    <link href="http://yoursite.com/2017/12/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A01/"/>
    <id>http://yoursite.com/2017/12/01/数据库学习1/</id>
    <published>2017-12-01T13:18:50.000Z</published>
    <updated>2018-01-07T02:05:11.536Z</updated>
    
    <content type="html"><![CDATA[<h5 id="使用Navicat连接Mamp-Pro"><a href="#使用Navicat连接Mamp-Pro" class="headerlink" title="使用Navicat连接Mamp Pro"></a>使用Navicat连接Mamp Pro</h5><ol>
<li>新建mysql连接</li>
<li>输入端口号，用户名和密码（默认都是root）</li>
<li>use socket，打勾。输入/Applications/MAMP/tmp/mysql/mysql.sock</li>
</ol>
<h5 id="使用命令行操作mysql"><a href="#使用命令行操作mysql" class="headerlink" title="使用命令行操作mysql"></a>使用命令行操作mysql</h5><ol>
<li>执行 /Applications/MAMP/Library/bin 目录下的mysql即可进入命令行操作界面</li>
</ol>
<h5 id="使用golang连接数据库"><a href="#使用golang连接数据库" class="headerlink" title="使用golang连接数据库"></a>使用golang连接数据库</h5><ol>
<li><code>db, err := sql.Open(&quot;mysql&quot;, &quot;root:root@unix(/Applications/MAMP/tmp/mysql/mysql.sock)/mysql&quot;)</code></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;使用Navicat连接Mamp-Pro&quot;&gt;&lt;a href=&quot;#使用Navicat连接Mamp-Pro&quot; class=&quot;headerlink&quot; title=&quot;使用Navicat连接Mamp Pro&quot;&gt;&lt;/a&gt;使用Navicat连接Mamp Pro&lt;/h5&gt;&lt;ol&gt;

    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>ssh使用之文件拷贝</title>
    <link href="http://yoursite.com/2017/11/30/ssh%E4%BD%BF%E7%94%A8%E4%B9%8B%E6%96%87%E4%BB%B6%E6%8B%B7%E8%B4%9D/"/>
    <id>http://yoursite.com/2017/11/30/ssh使用之文件拷贝/</id>
    <published>2017-11-30T12:53:21.000Z</published>
    <updated>2017-11-30T12:57:48.409Z</updated>
    
    <content type="html"><![CDATA[<p>最近想学习一下Golang,自己买了一个188一年的京东云服务器，准备丢点东西上去，过程实在是各种折腾，门外汉的痛苦。</p>
<h4 id="ssh传输文件"><a href="#ssh传输文件" class="headerlink" title="ssh传输文件"></a>ssh传输文件</h4><pre><code>上传文件
scp /path/filename username@servername:/path
下载文件
scp username@servername:/path/filename /var/www/local_dir（本地目录）
下载目录
scp -r username@servername:/var/www/remote_dir/（远程目录） /var/www/local_dir（本地目录）
上传目录
scp  -r local_dir username@servername:remote_dir
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想学习一下Golang,自己买了一个188一年的京东云服务器，准备丢点东西上去，过程实在是各种折腾，门外汉的痛苦。&lt;/p&gt;
&lt;h4 id=&quot;ssh传输文件&quot;&gt;&lt;a href=&quot;#ssh传输文件&quot; class=&quot;headerlink&quot; title=&quot;ssh传输文件&quot;&gt;&lt;/
    
    </summary>
    
      <category term="SSH" scheme="http://yoursite.com/categories/SSH/"/>
    
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Android-基础-FileProvider使用</title>
    <link href="http://yoursite.com/2017/10/27/Android-%E5%9F%BA%E7%A1%80-FileProvider%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/10/27/Android-基础-FileProvider使用/</id>
    <published>2017-10-27T14:49:48.000Z</published>
    <updated>2017-10-28T00:47:56.466Z</updated>
    
    <content type="html"><![CDATA[<p>移动平台对于安全和隐私是越来越注重了，Android在权限方面也在不断的收紧，一定程度上对于流氓软件还是有克制作用的。</p>
<p>今天学习了一下<a href="https://developer.android.com/training/secure-file-sharing/setup-sharing.html" target="_blank" rel="external">FileProvider</a>和<a href="https://developer.android.com/reference/android/support/v4/content/FileProvider.html#getUriForFile(android.content.Context, java.lang.String, java.io.File" target="_blank" rel="external">文档</a>)的基本使用：</p>
<h5 id="1-定义Provider"><a href="#1-定义Provider" class="headerlink" title="1.定义Provider"></a>1.定义Provider</h5><p>首先要在MManifest文件中定义一个Provider，其中authorities=包名.fileprovider。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    package=&quot;com.example.myapp&quot;&gt;</div><div class="line">    &lt;application</div><div class="line">        ...&gt;</div><div class="line">        &lt;provider</div><div class="line">            android:name=&quot;android.support.v4.content.FileProvider&quot;</div><div class="line">            android:authorities=&quot;com.example.myapp.fileprovider&quot;</div><div class="line">            android:grantUriPermissions=&quot;true&quot;</div><div class="line">            android:exported=&quot;false&quot;&gt;</div><div class="line">            &lt;meta-data</div><div class="line">                android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;</div><div class="line">                android:resource=&quot;@xml/filepaths&quot; /&gt;</div><div class="line">        &lt;/provider&gt;</div><div class="line">        ...</div><div class="line">    &lt;/application&gt;</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure>
<h5 id="2-创建filepaths文件"><a href="#2-创建filepaths文件" class="headerlink" title="2.创建filepaths文件"></a>2.创建filepaths文件</h5><p>在res目录下面新建一个xml目录，并在新建的xml目录下面创建一个filepaths的文件，内容如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;paths xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;files-path name=&quot;my_images&quot; path=&quot;images/&quot;/&gt;</div><div class="line">    ...</div><div class="line">&lt;/paths&gt;</div></pre></td></tr></table></figure>
<p>定义的路径又分为如下几种，分别对应内部存储和外部存储</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;  Context.getFilesDir().</div><div class="line">&lt;cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;  getCacheDir().</div><div class="line">&lt;external-path name=&quot;name&quot; path=&quot;path&quot; /&gt;  Environment.getExternalStorageDirectory().</div><div class="line">&lt;external-files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;Context#getExternalFilesDir(String) Context.getExternalFilesDir(null).</div><div class="line">&lt;external-cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt; Context.getExternalCacheDir().</div></pre></td></tr></table></figure>
<p>其中，name是出于安全考虑用于替换path显示的，path则是真实的次级目录</p>
<h5 id="3-创建一个可分享的Uri"><a href="#3-创建一个可分享的Uri" class="headerlink" title="3.创建一个可分享的Uri"></a>3.创建一个可分享的Uri</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">File imagePath = new File(Context.getFilesDir(), &quot;images&quot;);</div><div class="line">File newFile = new File(imagePath, &quot;default_image.jpg&quot;);</div><div class="line">Uri contentUri = FileProvider.getUriForFile(getContext(), &quot;com.mydomain.fileprovider&quot;, newFile);</div></pre></td></tr></table></figure>
<p>最终获取到的Uri是<code>content://com.mydomain.fileprovider/my_images/default_image.jpg</code>，可以看到实际的images路径被替换为my_images了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动平台对于安全和隐私是越来越注重了，Android在权限方面也在不断的收紧，一定程度上对于流氓软件还是有克制作用的。&lt;/p&gt;
&lt;p&gt;今天学习了一下&lt;a href=&quot;https://developer.android.com/training/secure-file-sha
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="FileProdvider" scheme="http://yoursite.com/tags/FileProdvider/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 代理设置</title>
    <link href="http://yoursite.com/2017/10/22/Android-Studio-%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/10/22/Android-Studio-代理设置/</id>
    <published>2017-10-22T08:16:15.000Z</published>
    <updated>2018-01-12T02:11:25.734Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为Lantern老是出问题，又买了一个搬瓦工的，搭建好后速度还是可以的，Youtube上面1080P没有卡顿现象。但是各种工具的是使用又出现了问题，所以特意记录一下，节省下次切换工具配置的时间。</p>
<h4 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h4><p>首先是配置git的代理，以下是http(s)配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global https.proxy &apos;http://127.0.0.1:1080&apos;</div><div class="line">git config --global http.proxy &apos;http://127.0.0.1:1087&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global https.proxy &apos;http://127.0.0.1: 65322&apos;</div><div class="line">git config --global http.proxy &apos;http://127.0.0.1: 65322&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export http_proxy=http://127.0.0.1:1087;</div><div class="line">export https_proxy=http://127.0.0.1:1087;</div></pre></td></tr></table></figure>
<h4 id="Gradle配置"><a href="#Gradle配置" class="headerlink" title="Gradle配置"></a>Gradle配置</h4><p>在全局的gradle.properties中添加以下配置，这样子每个项目的gradle同步都回使用ss代理了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">systemProp.http.proxyHost=127.0.0.1</div><div class="line">systemProp.http.proxyPort=1087</div><div class="line">systemProp.https.proxyHost=127.0.0.1</div><div class="line">systemProp.https.proxyPort=1087</div></pre></td></tr></table></figure>
<h4 id="Android-Studio代理设置"><a href="#Android-Studio代理设置" class="headerlink" title="Android Studio代理设置"></a>Android Studio代理设置</h4><p>目前来看启用自动代理即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因为Lantern老是出问题，又买了一个搬瓦工的，搭建好后速度还是可以的，Youtube上面1080P没有卡顿现象。但是各种工具的是使用又出现了问题，所以特意记录一下，节省下次切换工具配置的时间。&lt;/p&gt;
&lt;h4 id=&quot;git配置&quot;&gt;&lt;a href=&quot;#git配置&quot; 
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Proxy" scheme="http://yoursite.com/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>ssh免登录</title>
    <link href="http://yoursite.com/2017/10/22/ssh%E5%85%8D%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2017/10/22/ssh免登录/</id>
    <published>2017-10-22T00:47:53.000Z</published>
    <updated>2017-10-22T01:41:37.906Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h4><p><a href="https://zh.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="external">Secure Shell</a>（缩写为SSH），由IETF的网络工作小组（Network Working Group）所制定；SSH为一项创建在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。</p>
<p>平时我们会通过ssh远程登录我们的主机来进行管理，在Mac下面一般我会通过自带的Terminal或者<a href="https://www.iterm2.com/" target="_blank" rel="external">iterm2</a>直接登录，而在Windows下面的话通常会使用<a href="http://www.putty.org/" target="_blank" rel="external">Putty</a>进行登录。                </p>
<h4 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">基本登录</div><div class="line">ssh user@host (用户名+主机地址)</div><div class="line"></div><div class="line">如果本机用户名跟远程的主机用户名一致，可以省略掉用户</div><div class="line">ssh host</div><div class="line"></div><div class="line">ssh默认端口是22，如果端口不是默认值则需要指定端口登录</div><div class="line">ssh user@host -p 1111 指定端口1111，使用用户user登录到主机</div><div class="line"></div><div class="line">在输入完上面的指令以后接下来就是输入密码了，此处就不再累述了</div></pre></td></tr></table></figure>
<h4 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h4><p>在上面的流程中，我们每次都需要重新输入密码才能够进行登录，那么可不可以免密码直接登录了，答案当然是可以的了。</p>
<p>通过公钥登录可以实现免密码登录，首先在客户端生成一对公钥私钥，然后将公钥添加到远程主机的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">具体流程如下：</div></pre></td></tr></table></figure></p>
<ol>
<li>在客户端生成一对公钥私钥<br> ssh-keygen<br>这个时候在目录~/.ssh/下面就会生成id_rsa.pub（公钥），id_rsa（私钥）</li>
<li>将公钥拷贝到远程主机<br> ssh-copy-id user@host<br>```</li>
</ol>
<p>经过上述流程我们就实现了ssh免密码登录的流程了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Secure_Shell&quot; target=&quot;_
    
    </summary>
    
      <category term="shell" scheme="http://yoursite.com/categories/shell/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Android - 性能优化第五季</title>
    <link href="http://yoursite.com/2017/09/12/Android-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%AC%AC%E4%BA%94%E5%AD%A3/"/>
    <id>http://yoursite.com/2017/09/12/Android-性能优化第五季/</id>
    <published>2017-09-12T14:13:01.000Z</published>
    <updated>2017-09-12T15:10:57.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Android-Performance-Pattern-Season-5"><a href="#Android-Performance-Pattern-Season-5" class="headerlink" title="Android Performance Pattern Season 5"></a>Android Performance Pattern Season 5</h4><h5 id="1-Thread-Performance"><a href="#1-Thread-Performance" class="headerlink" title="1. Thread Performance"></a>1. Thread Performance</h5><p>The main process(UI Thread) does this:</p>
<ul>
<li>System Events</li>
<li>Input Events</li>
<li>Application</li>
<li>Service</li>
<li>Alarm</li>
<li>UI Drawing</li>
</ul>
<p>If there is a large chunk of work between an input event and its callback, then the user will have to wait a longer than expected to see results. If render is not finished in 16ms(60frame/s), and it will cause dropped frame. </p>
<p>So android provide lot of solution to this heavy task:</p>
<ul>
<li>AsyncTask support serial single progress and parallel on a pool of threads managed by AsyncTask</li>
<li>HandlerThread</li>
<li>ThreadPool</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Android-Performance-Pattern-Season-5&quot;&gt;&lt;a href=&quot;#Android-Performance-Pattern-Season-5&quot; class=&quot;headerlink&quot; title=&quot;Android Performance 
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Performance" scheme="http://yoursite.com/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Android - 通过hierarchy View来分析布局</title>
    <link href="http://yoursite.com/2017/08/28/Android-%E9%80%9A%E8%BF%87hierarchy-View%E6%9D%A5%E5%88%86%E6%9E%90%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2017/08/28/Android-通过hierarchy-View来分析布局/</id>
    <published>2017-08-28T12:49:49.000Z</published>
    <updated>2017-08-28T13:41:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hierarchy Viewer是Android device monitor内嵌的一个工具，可以通过这个工具来检查你的层次视图的属性和Layout的速度。他能够帮你找到层次布局结构的性能瓶颈，帮助你简化层次布局减少过度绘制。</p>
<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>如果使用Android模拟器的话可以略过这一段。否则的话，需要对你的设备进行如下的配置：</p>
<p>注意：你的设备需要时Android4.1及以上API版本</p>
<ol>
<li>打开设备的开发者模式</li>
<li>在你的开发电脑上设置环境变ANDROID_HVPROTO=ddm，这个变量告诉Hierarchy Viewer使用和DDMS协议一致的ddm协议来连接你的设备。但是host只能够有一个进程连接到设备，所以你必须关闭其他通过Hierarchy Viewer运行的DDMS会话</li>
</ol>
<h4 id="开始使用Hierarchy-Viewer"><a href="#开始使用Hierarchy-Viewer" class="headerlink" title="开始使用Hierarchy Viewer"></a>开始使用Hierarchy Viewer</h4><p>打开Android device monitor后如下图所示：</p>
<ol>
<li>连接你的设备到电脑。</li>
<li>打开Android Studio，运行一个软件到你的设备</li>
<li>在Android Studio-Tools-Android-Android device monitor。</li>
<li>选择Hierarchy View</li>
<li>在左边的窗口双击你的包名。</li>
</ol>
<p><img src="https://developer.android.com/images/tools/performance/hierarchy-viewer/gettingstarted_image005.png" alt=""></p>
<h4 id="熟悉工具"><a href="#熟悉工具" class="headerlink" title="熟悉工具"></a>熟悉工具</h4><p>下图是Hierarchy Viewer的面板:</p>
<p><img src="https://developer.android.com/images/tools/performance/hierarchy-viewer/gettingstarted_image008.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hierarchy Viewer是Android device monitor内嵌的一个工具，可以通过这个工具来检查你的层次视图的属性和Layout的速度。他能够帮你找到层次布局结构的性能瓶颈，帮助你简化层次布局减少过度绘制。&lt;/p&gt;
&lt;h4 id=&quot;开始&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Performance" scheme="http://yoursite.com/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Android - Performance and View Hierarchies</title>
    <link href="http://yoursite.com/2017/08/27/Android-Performance-and-View-Hierarchies/"/>
    <id>http://yoursite.com/2017/08/27/Android-Performance-and-View-Hierarchies/</id>
    <published>2017-08-27T13:10:02.000Z</published>
    <updated>2017-08-28T12:48:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>布局的层次对于应用的性能影响也是很显著的。</p>
<h4 id="布局和测量性能"><a href="#布局和测量性能" class="headerlink" title="布局和测量性能"></a>布局和测量性能</h4><p>渲染本身包含了Layout和Measure两个过程，系统在这两个过程中确定View hierarchy的具体位置。Measure过程确定了View的尺寸和边界，Layout过程则确定了View在屏幕的位置。</p>
<p>这两个过程本身会占用一些系统的资源。当然，大多数时候，这个过程占用的系统资源较少，不会对性能造成显著的影响。但是，如果你的应用需要添加或者移除View对象就会显著开销更多的资源，例如Recycleview回收或者复用。或者当一个View对象需要重绘来满足它的约束的时候，也会占用更多的资源。例如，给一个WRAP_CONTENT的View对象设置文本，会导致重绘。</p>
<p>如果一个渲染过程过长，就会导致无法在16ms内渲染完一帧，这就会导致掉帧，动画也会变得卡顿。</p>
<p>由于UI的绘制是处于主线程的，所以对于这些导致卡顿的问题需要优化，从而让我们的应用变得流畅。</p>
<h5 id="管理复杂度：Layout相关"><a href="#管理复杂度：Layout相关" class="headerlink" title="管理复杂度：Layout相关"></a>管理复杂度：Layout相关</h5><p>Android布局允许你嵌套UI对象，这种嵌套经常会导致额外的开销。当你的应用渲染一个Layout的对象，应用同时需要渲染它的所有的子View。对于一个复杂的Layout，有时候系统只有在第一次加载的时候会比较占用系统资源。例如，你的应用中有一个复杂的复用过的Recycleview，系统需要加载所有的对象。其他例子，一个微不足道的变化可能会导致视图层次的一系列的重绘。</p>
<p>Layout过程中视图层次的嵌套会显著导致绘制的时间增加。因此，越少层次的嵌套，Layout过程花费的时间就越少。</p>
<p>如果你使用RelativeLayout，但是你也可能在不使用weight属性的情况下，通过使用LinearLayout实现。另外，如果你的target版本是Android7.0的话，你还可以使用ConstraintLayout，这是一个用于替换RelativeLayout的布局，它是一个功能类似，性能更好的RelativeLayout。</p>
<h5 id="“双重税收”"><a href="#“双重税收”" class="headerlink" title="“双重税收”"></a>“双重税收”</h5><p>一般来说，系统执行Layout或者Measure过程是非常快的。但是，对于一些很复杂的Layout，系统可能需要多次绘制才能够最终确定所有对象的位置。这种超过一次的Layout和Measure过程就是所谓的双重税收。</p>
<p>例如，当你使用一个可以通过一个View对象确定另一个View对象的位置的RelativeLayout容器。系统会执行以下步骤：</p>
<ol>
<li>根据每一个子View的约束条件，逐个执行Layout和Measure过程</li>
<li>使用前面的数据，同时计算View的weight，来给相对的View找到一个合适的位置</li>
<li>再次执行Layout过程来确定这些相对位置的View</li>
<li>执行下一个渲染过程</li>
</ol>
<p>如果你的视图层次越多，那么潜在性能问题就越多。</p>
<p>除了RelativeLayout其他容器也会导致双重税收。例如：</p>
<ul>
<li>水平的线性布局会导致两次Layout和Measure过程。如果你给线性布局添加了<a href="https://developer.android.com/reference/android/widget/LinearLayout.html#attr_android:measureWithLargestChild" target="_blank" rel="external">measureWithLargestChild</a>（其实是由于使用了weight属性的View的尺寸等于最大的子View的最小尺寸）也有可能由于要进行第二次Layout和Measure来确定每一个View对象的大小。</li>
<li>GridLayout同样也有类似的问题。这个容器同样允许相对位置，正常情况下，GridLayout会通过预处理确定号子View的相对关系来避免双重税收。但是，如果Layout使用了weight或者Gravity的时候，它的预处理就没了，当容器是RelativeLayout的时候系统可能需要多次执行这个过程。</li>
</ul>
<p>多次的Layout和Measure过程本身并不是一个性能负担。但是，他们会在某些场景下成为一种负担。我们应该对以下的情况保持足够的警惕：</p>
<ul>
<li>布局层次的根布局</li>
<li>布局层次过多</li>
<li>一个界面产生很多的实例，例如ListView</li>
</ul>
<h4 id="诊断布局层次问题"><a href="#诊断布局层次问题" class="headerlink" title="诊断布局层次问题"></a>诊断布局层次问题</h4><p>布局性能问题受到很多因素的影响而变成了一个复杂的问题。以下是一些帮助你找到性能瓶颈的工具。当然也有一些其他的，没有那么确定性的工具，但也能提供一些提示帮助我们找到问题。</p>
<h5 id="Systrace"><a href="#Systrace" class="headerlink" title="Systrace"></a>Systrace</h5><p><a href="https://developer.android.com/studio/profile/systrace.html" target="_blank" rel="external">Systrace</a>是一个Android SDK内嵌的诊断性能问题的工具。这个工具允许我们查看整个设备的时间信息，允许你查看什么时候会因为Layout的性能问题影响到设备的性能。</p>
<h5 id="GPU呈现模式"><a href="#GPU呈现模式" class="headerlink" title="GPU呈现模式"></a>GPU呈现模式</h5><h5 id="lint检查"><a href="#lint检查" class="headerlink" title="lint检查"></a>lint检查</h5><h5 id="Hierarchy-Viewer"><a href="#Hierarchy-Viewer" class="headerlink" title="Hierarchy Viewer"></a>Hierarchy Viewer</h5><h4 id="解决布局层次问题"><a href="#解决布局层次问题" class="headerlink" title="解决布局层次问题"></a>解决布局层次问题</h4><h5 id="减少无用的嵌套"><a href="#减少无用的嵌套" class="headerlink" title="减少无用的嵌套"></a>减少无用的嵌套</h5><h5 id="使用merge-include标签"><a href="#使用merge-include标签" class="headerlink" title="使用merge/include标签"></a>使用merge/include标签</h5><h5 id="整体替换新的Layout"><a href="#整体替换新的Layout" class="headerlink" title="整体替换新的Layout"></a>整体替换新的Layout</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;布局的层次对于应用的性能影响也是很显著的。&lt;/p&gt;
&lt;h4 id=&quot;布局和测量性能&quot;&gt;&lt;a href=&quot;#布局和测量性能&quot; class=&quot;headerlink&quot; title=&quot;布局和测量性能&quot;&gt;&lt;/a&gt;布局和测量性能&lt;/h4&gt;&lt;p&gt;渲染本身包含了Layout和Measure
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="performance" scheme="http://yoursite.com/tags/performance/"/>
    
  </entry>
  
  <entry>
    <title>Android-性能优化-overdraw</title>
    <link href="http://yoursite.com/2017/08/22/Android-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-overdraw/"/>
    <id>http://yoursite.com/2017/08/22/Android-性能优化-overdraw/</id>
    <published>2017-08-22T15:15:59.000Z</published>
    <updated>2017-08-27T12:33:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在项目的性能之差令人发指，其实主要原因在于：</p>
<ol>
<li>开发人员本身能力有限，同时架构闻所未闻，见所未见。总而言之，搞不定。</li>
<li>产品设计从来都是乱搞，没有整体性的设计(感觉我们的app真是业界毒瘤之典范)</li>
</ol>
<p>不过，我们还是要把能做好的做好了才行。</p>
<h3 id="性能优化-OverDraw"><a href="#性能优化-OverDraw" class="headerlink" title="性能优化-OverDraw"></a>性能优化-OverDraw</h3><p>所谓<strong><a href="https://developer.android.com/topic/performance/rendering/overdraw.html" target="_blank" rel="external">overdraw</a></strong>(过度绘制)就是在一个点上进行了超过一次的绘制。过渡绘制是无意义的，需要我们去优化的，它会浪费GPU资源去渲染一些用户不可见的无意义的图层。关于如何查看过渡绘制，应该都是有所了解的。接下来是关于过度绘制：过度绘制是什么，怎么诊断过度绘制，你该采取何种方式取消除或者减轻过渡绘制。</p>
<h4 id="理解过度绘制"><a href="#理解过度绘制" class="headerlink" title="理解过度绘制"></a>理解过度绘制</h4><p>过渡绘制指的是系统在一个像素点是那个进行了多次的渲染。例如，我们一些堆叠的UI卡片，每一张卡片又隐藏了它的一部分。</p>
<p>当然，系统仍然需要绘制这叠卡片的隐藏部分，因为卡片的绘制是根据<a href="https://zh.wikipedia.org/wiki/%E7%94%BB%E5%AE%B6%E7%AE%97%E6%B3%95" target="_blank" rel="external">画家算法</a>（<strong>“画家算法”表示头脑简单的画家首先绘制距离较远的场景，然后用绘制距离较近的场景覆盖较远的部分。</strong>）。这就是从下到上的顺序。这种渲染顺序允许系统增加合适的透明度给半透明的物体，例如阴影。</p>
<h4 id="查找过度绘制"><a href="#查找过度绘制" class="headerlink" title="查找过度绘制"></a>查找过度绘制</h4><p>Android提供了几种工具帮助你查找影响到你的app性能的过度绘制。这些工具在你的设备上打开<strong>开发者模式</strong>就可以找到。关于更多开发者选项，可以参见<a href="https://developer.android.com/studio/run/device.html#developer-device-options" target="_blank" rel="external">Run Apps on a Hardware Device</a>。</p>
<h4 id="调试GPU过度绘制工具"><a href="#调试GPU过度绘制工具" class="headerlink" title="调试GPU过度绘制工具"></a>调试GPU过度绘制工具</h4><p>调试GPU过度绘制工具使用颜色来代表你的应用在一个像素点上渲染的次数。渲染次数越多，过度绘制就越会影响你的应用性能。</p>
<p>关于如何使用这些工具，请继续往下看：</p>
<h5 id="调试GPU过度绘制查验"><a href="#调试GPU过度绘制查验" class="headerlink" title="调试GPU过度绘制查验"></a>调试GPU过度绘制查验</h5><p>这种检查方法是通过颜色来形象化手机中的过度绘制，有如下好处：</p>
<ul>
<li>显现出应用做了哪些无用的渲染工作</li>
<li>帮助你找到可能能够减少渲染的天花板</li>
</ul>
<p>在开发者选项 - 调试GPU过度绘制 - 选用显示过度绘制区域，然后回到你的应用，这时候你看到的颜色</p>
<ul>
<li>原色：没有过度绘制</li>
<li>蓝色：一次过度绘制</li>
<li>绿色： 两次过度绘制</li>
<li>粉红色： 三次过度绘制</li>
<li>红色：四次或者四次以上的过度绘制</li>
</ul>
<p><img src="https://developer.android.com/images/tools/performance/debug-gpu-overdraw/gettingstarted_image03.png" alt=""> </p>
<p>有时候过度绘制是不可避免的。当你调试你的UI的时候，你的界面应该尽量是原色或者蓝色。</p>
<h5 id="GPU呈现模式分析"><a href="#GPU呈现模式分析" class="headerlink" title="GPU呈现模式分析"></a>GPU呈现模式分析</h5><p>GPU呈现模式会在屏幕显示一个滚动的柱状图，每一个长方形都代表一帧的绘制</p>
<p>在一些低性能的GPU设备上，GPU填满帧缓存区的速度会变得很慢。当很多像素需要绘制的时候，GPU需要花很长的时间来执行新的命令，这就会导致系统对于其它的请求反应变得很慢。</p>
<h4 id="优化过度绘制"><a href="#优化过度绘制" class="headerlink" title="优化过度绘制"></a>优化过度绘制</h4><ol>
<li>减少不必要的背景</li>
<li>扁平化布局，减少布局的层次</li>
<li>少使用transparency属性</li>
</ol>
<h5 id="减少不必要的背景"><a href="#减少不必要的背景" class="headerlink" title="减少不必要的背景"></a>减少不必要的背景</h5><p>布局本身是没有背景的，这就意味着他本身并不需要渲染背景。当布局本身有了背景以后，就意味着她可能会导致过度绘制。</p>
<p>移除不必要的背景是一种快速修复渲染问题的手段。当绘制的背景对于用户来说完全不可见的时候就可以取移除掉这些背景了。例如一个设置了背景色的app，那么定义在Activity中的任意一个容易本身是不需要背景的。</p>
<p>如果需要知道为什么你的app会出现过度绘制，你可以使用<a href="https://developer.android.com/studio/profile/hierarchy-viewer.html" target="_blank" rel="external">Hierarchy View</a>工具。当你使用这个工具的时候，消除所有对于用户不可见的背景。当然，我们可以通过设置一个通用的背景来达到消除不必要的背景的目的，这样子绘制的容器就可以不再定义自己的背景而使用app的通用背景（windowbackgroud）。</p>
<h5 id="减少布局的层次"><a href="#减少布局的层次" class="headerlink" title="减少布局的层次"></a>减少布局的层次</h5><p>不局的过多嵌套同样也会导致过度绘制，同时也会因为节点过深导致视图的加载变慢。我们应该减少UI的重叠绘制，详情参见<a href="https://developer.android.com/topic/performance/optimizing-view-hierarchies.html" target="_blank" rel="external">Optimizing View Hierarchies</a></p>
<h5 id="使用transparency"><a href="#使用transparency" class="headerlink" title="使用transparency"></a>使用transparency</h5><p>使用Alpha值的时候，同捕鱼常规的过度绘制即在同一像素点多次绘制，transparent属性的对象首先需要已经存在的像素进行绘制，然后进行等价的混合。例如，一个黑色字体的TextView通过添加Alpha值来达到灰色的效果，当然这个时候可以直接使用灰色来替换。 transparent animations, fade-outs, 以及 drop shadows以及其他的半透明效果，都会显著导致过度绘制。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在项目的性能之差令人发指，其实主要原因在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发人员本身能力有限，同时架构闻所未闻，见所未见。总而言之，搞不定。&lt;/li&gt;
&lt;li&gt;产品设计从来都是乱搞，没有整体性的设计(感觉我们的app真是业界毒瘤之典范)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过，
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Performance" scheme="http://yoursite.com/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>git-常用命令</title>
    <link href="http://yoursite.com/2017/08/07/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/08/07/git-常用命令/</id>
    <published>2017-08-07T14:22:27.000Z</published>
    <updated>2017-09-19T14:11:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ol>
<li>git clone <a href="http://xx/zhj_android.git" target="_blank" rel="external">http://xx/zhj_android.git</a></li>
<li>添加.gitignore到根目录，<a href="https://github.com/github/gitignore" target="_blank" rel="external">参考资料</a></li>
<li>git add .gitignore 添加该文件到版本控制，提交到暂存区</li>
<li>git commit -m “add .gitignore file” 从暂存区提交到当前分支</li>
<li>git push 提交到远程仓库</li>
</ol>
<h3 id="常用的git命令"><a href="#常用的git命令" class="headerlink" title="常用的git命令"></a>常用的git命令</h3><ol>
<li>git rm -r xx 从版本控制中移除xx目录及子目录</li>
<li>rm -rf xx 如果xx中还有git的子模块，需要使用该命令删除</li>
<li>git reset –hard HEAD 重置未提交的记录到HEAD Version，HEAD^回滚到上个版本,HEAD^^上上个版本，依次类推，或者指定回退HEAD~xx,xx个版本,或者指定log 提交的id</li>
<li>git init 初始化一个目录为git仓库</li>
<li>git status 查看仓库状态</li>
<li>git diff 查看变更，同时也可以指定xx文件或者目录</li>
<li>git add xx 添加xx到git版本控制，每一次修改文件以后都需要添加到版本控制系统</li>
<li>git commit -m “xx” 提交到本地仓库，提交信息为xx (每次修改，如果不add到暂存区，那就不会加入到commit中。)</li>
<li>git log 查看提交日志</li>
<li>git log –pretty=oneline git log的美化版</li>
<li>git reflog 查看每一次的git提交命令</li>
<li>git checkout -b branchname 新建分支</li>
<li>git checkout branchname 切换到分支</li>
<li>git branch 列举所有分支，带*号的为当前都在分支，加上 -r参数则是列举的远程分支</li>
<li>git merge branchname 合并分支到当前分支，合并模式有FAST_FORWARD 无冲突自动合并，</li>
<li>git branch -d branchname 删除分支</li>
<li>git log –pretty=oneline –abbrev-commit</li>
<li>git tag v0.9 6224937</li>
<li>git push origin v5.0.1 创建远程tag或者分支，前提是这个要存在</li>
<li>git checkout – xxx 回滚xxx</li>
<li>git remote add origin <a href="http://192.168.204.42/ZHJ/zhj_kernel.git" target="_blank" rel="external">http://192.168.204.42/ZHJ/zhj_kernel.git</a> 添加远程</li>
</ol>
<h4 id="暂存当前更改"><a href="#暂存当前更改" class="headerlink" title="暂存当前更改"></a>暂存当前更改</h4><ol>
<li>git stash   存储</li>
<li>git stash list  存储列表</li>
<li>git stash apply  取出存储的内容不删除缓存</li>
<li>git stash pop  去除存储的内容并删除缓存</li>
<li>git stash clear 清除所有的存储内容</li>
</ol>
<h4 id="合并指定commit"><a href="#合并指定commit" class="headerlink" title="合并指定commit"></a>合并指定commit</h4><ol>
<li>git cherry-pick log-hash</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;git clone &lt;a href=&quot;http://xx/zhj_android.git&quot; target=&quot;_blank&quot; re
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="命令行" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Android-导入Sample Code</title>
    <link href="http://yoursite.com/2017/07/19/Android-%E5%AF%BC%E5%85%A5Sample-Code/"/>
    <id>http://yoursite.com/2017/07/19/Android-导入Sample-Code/</id>
    <published>2017-07-19T14:25:21.000Z</published>
    <updated>2017-07-19T14:33:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android Studio提供了很多的模板和sample用于提升我们的开发速度，如何利用好这些工具来提升我们的开发效率就是一个很值得学习的问题了。</p>
<h5 id="导入Sample-Code"><a href="#导入Sample-Code" class="headerlink" title="导入Sample Code"></a>导入Sample Code</h5><ol>
<li>选择File &gt; New &gt; Import Sample</li>
<li>使用搜索框查找你想要的内容,如下图所示： <img src="https://developer.android.com/studio/images/write/browse-samples_2x.png" alt=""> </li>
<li>选择你想要的内容，选中点击next &gt; finish</li>
</ol>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>由于总所周知的问题，我们在第一步的时候可能会出现找不到资源的问题，这个时候我们就需要在翻墙的情况下设置Android Studio的代理了。 Preference &gt; Appearance &amp; Behavior &gt; System Setting &gt; Http Proxy &gt; Auto-detect proxy settings勾选即可，下方的URL无需勾选和填写。这里是我的lantern推荐码 <strong>Use my code MFST5N and get 3 months free when you sign up!</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android Studio提供了很多的模板和sample用于提升我们的开发速度，如何利用好这些工具来提升我们的开发效率就是一个很值得学习的问题了。&lt;/p&gt;
&lt;h5 id=&quot;导入Sample-Code&quot;&gt;&lt;a href=&quot;#导入Sample-Code&quot; class=&quot;hea
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android-通过不同的res目录指定不同的资源文件</title>
    <link href="http://yoursite.com/2017/07/19/Android-%E9%80%9A%E8%BF%87%E4%B8%8D%E5%90%8C%E7%9A%84res%E7%9B%AE%E5%BD%95%E6%8C%87%E5%AE%9A%E4%B8%8D%E5%90%8C%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/07/19/Android-通过不同的res目录指定不同的资源文件/</id>
    <published>2017-07-19T14:12:55.000Z</published>
    <updated>2017-08-23T01:45:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Android开发中，我们可能会遇到针对不同的版本进行不同的配置，比如说使用不同的资源文件。<a href="https://developer.android.com/studio/write/add-resources.html" target="_blank" rel="external">官网传送门</a>。</p>
<h5 id="自定义资源文件夹路径"><a href="#自定义资源文件夹路径" class="headerlink" title="自定义资源文件夹路径"></a>自定义资源文件夹路径</h5><p>默认的资源文件实在  <figure class="highlight plain"><figcaption><span>例如：main的资源文件就在src/main/res/目录下。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">不过我们也可以通过自定义的方式指定资源文件目录，如下所示：</div></pre></td></tr></table></figure></p>
<pre><code>android {
    sourceSets {
        main {
            res.srcDirs = [&apos;resources/main&apos;]
        }

        debug {
            res.srcDirs = [&apos;resources/debug&apos;]
        }
    }
}
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">当然我们也可以指定多个资源文件目录：</div></pre></td></tr></table></figure>
<pre><code>android {
    sourceSets {
        main {
            res.srcDirs = [&apos;resources/main&apos;, &apos;resources/test&apos;]
        }

        debug {
            res.srcDirs = [&apos;resources/debug&apos;]
        }
    }
}
</code></pre><p>```</p>
<p>不过要注意的是同时指定多个资源文件夹的时候文件不能重复，否则在后续构建<a href="https://developer.android.com/studio/write/add-resources.html#resource_merging" target="_blank" rel="external">合并资源文件</a>的时候会出现重复的错误。</p>
<p>#####资源合并</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Android开发中，我们可能会遇到针对不同的版本进行不同的配置，比如说使用不同的资源文件。&lt;a href=&quot;https://developer.android.com/studio/write/add-resources.html&quot; target=&quot;_blank&quot; re
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android-应用认领---空包写入签名</title>
    <link href="http://yoursite.com/2017/07/12/Android-%E5%BA%94%E7%94%A8%E8%AE%A4%E9%A2%86-%E7%A9%BA%E5%8C%85%E5%86%99%E5%85%A5%E7%AD%BE%E5%90%8D/"/>
    <id>http://yoursite.com/2017/07/12/Android-应用认领-空包写入签名/</id>
    <published>2017-07-12T08:10:58.000Z</published>
    <updated>2017-08-23T01:46:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司项目在百度进行认领，需要将自己的签名写入百度的空包上传，过程如下：</p>
<p>1.执行如下命令<br><figure class="highlight plain"><figcaption><span>-verbose -keystore appkey.keystore -signedjar sign.apk Baidu_Claim_unsigned.apk keyAlias```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">其中appkey.keystore：自己的签名文件，可以加上绝对路径</div><div class="line"></div><div class="line">sign.apk：输出文件</div><div class="line"></div><div class="line">Baidu_Claim_unsigned.apk：原始文件</div><div class="line"></div><div class="line">keyAlias: 密玥的别名</div><div class="line"></div><div class="line">此过程需要输入密玥的密码，然后按enter即会执行。</div><div class="line"></div><div class="line">2.执行过程中的输出</div></pre></td></tr></table></figure></p>
<p>Enter Passphrase for keystore:<br>adding: META-INF/MANIFEST.MF<br>adding: META-INF/<strong><em>.SF<br>adding: META-INF/</em></strong>.RSA<br>signing: AndroidManifest.xml<br>signing: res/drawable/ic_launcher.png<br>signing: res/layout/activity_main.xml<br>signing: resources.arsc<br>signing: classes.dex<br>jar signed.</p>
<p>Warning:<br>No -tsa or -tsacert is provided and this jar is not timestamped. Without a timestamp, users may not be able to validate this jar after the signer certificate’s expiration date (2043-11-01) or after any future revocation date.<br>```</p>
<p>3.执行完毕会在当前目录生成一个新的apk，用这个apk上传即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司项目在百度进行认领，需要将自己的签名写入百度的空包上传，过程如下：&lt;/p&gt;
&lt;p&gt;1.执行如下命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;-verbose -keystore appkey.keys
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="日常" scheme="http://yoursite.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>今天雨好大</title>
    <link href="http://yoursite.com/2017/06/20/%E4%BB%8A%E5%A4%A9%E9%9B%A8%E5%A5%BD%E5%A4%A7/"/>
    <id>http://yoursite.com/2017/06/20/今天雨好大/</id>
    <published>2017-06-20T00:58:35.000Z</published>
    <updated>2017-06-20T00:58:35.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Google IoSched 代码阅读笔记</title>
    <link href="http://yoursite.com/2017/06/19/Google-IoSched-%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/06/19/Google-IoSched-代码阅读笔记/</id>
    <published>2017-06-19T14:37:35.000Z</published>
    <updated>2017-06-30T13:34:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做项目做的越来越烦人了，可以说近一年以来基本上没什么长进，反而有所退步。以往的激情已经被业务磨灭，真的真的该重新做点什么了。人无近虑，必有远忧。一直逃不开自己的舒适区，让自己在放纵，另一方面也是担忧自己当下的技能能否适应新的环境，总而言之，真的该认真学习好好看书了。否则的话，自己会被淘汰的。</p>
<h2 id="一、代码目录结构"><a href="#一、代码目录结构" class="headerlink" title="一、代码目录结构"></a>一、代码目录结构</h2><p>本项目是一个比较传统的目录结构(其实还是有一些向MVP方向发展了)，即根据功能点进行分包，如下所示:</p>
<p><img src="/2017/06/19/Google-IoSched-代码阅读笔记/iosched_package_tree.png" alt="image"></p>
<h3 id="1、我的日程"><a href="#1、我的日程" class="headerlink" title="1、我的日程"></a>1、我的日程</h3><p>界面组成元素：TabLayout + ViewPager + ListFragment</p>
<h4 id="1-1、在Activity中的内部类"><a href="#1-1、在Activity中的内部类" class="headerlink" title="1.1、在Activity中的内部类"></a>1.1、在Activity中的内部类</h4><p>标准的使用流程如下，通过弱引用的方式持有Activity，防止由于内部类持有外部类导致的内存泄露</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * If in conference day, redraw the day&apos;s UI every @&#123;link #INTERVAL_TO_REDRAW_UI&#125; ms, so</div><div class="line"> * that time sensitive widgets, like &quot;now&quot;, &quot;ended&quot; and appropriate styles are updated.</div><div class="line"> *</div><div class="line"> * @param today the index in the conference days array that corresponds to the current day.</div><div class="line"> */</div><div class="line">private void setTimerToUpdateUI(final int today) &#123;</div><div class="line">    new UpdateUIRunnable(this, today, new Handler()).scheduleNextRun();</div><div class="line">&#125;</div><div class="line"></div><div class="line">boolean hasBeenDestroyed() &#123;</div><div class="line">    return mDestroyed;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static final class UpdateUIRunnable implements Runnable &#123;</div><div class="line"></div><div class="line">    final WeakReference&lt;MyScheduleActivity&gt; weakRefToParent;</div><div class="line">    final Handler handler;</div><div class="line">    final int today;</div><div class="line"></div><div class="line">    public UpdateUIRunnable(MyScheduleActivity activity, int today, Handler handler) &#123;</div><div class="line">        weakRefToParent = new WeakReference&lt;MyScheduleActivity&gt;(activity);</div><div class="line">        this.handler = handler;</div><div class="line">        this.today = today;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void scheduleNextRun() &#123;</div><div class="line">        handler.postDelayed(this, INTERVAL_TO_REDRAW_UI);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        MyScheduleActivity activity = weakRefToParent.get();</div><div class="line">        if (activity == null || activity.hasBeenDestroyed()) &#123;</div><div class="line">            LOGD(TAG, &quot;Ativity is not valid anymore. Stopping UI Updater&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        LOGD(TAG, &quot;Running MySchedule UI updater (now=&quot; +</div><div class="line">                new Date(UIUtils.getCurrentTime(activity)) + &quot;)&quot;);</div><div class="line">        if (activity.mScheduleAdapters != null</div><div class="line">                &amp;&amp; activity.mScheduleAdapters.length &gt; today</div><div class="line">                &amp;&amp; activity.mScheduleAdapters[today] != null) &#123;</div><div class="line">            try &#123;</div><div class="line">                activity.mScheduleAdapters[today].forceUpdate();</div><div class="line">            &#125; finally &#123;</div><div class="line">                // schedule again</div><div class="line">                this.scheduleNextRun();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-2、在XML文件中利用tools属性"><a href="#1-2、在XML文件中利用tools属性" class="headerlink" title="1.2、在XML文件中利用tools属性"></a>1.2、在XML文件中利用tools属性</h4><p>可能我们已经习惯了在编写代码的时候设置一个默认的android:text=”这是一个XXX”之类的文本用于预览，但实际上我们可以通过tools:text=”这才是正确的使用方式”，当然硬编码的方式也是错误的。首先附上<a href="https://developer.android.com/studio/write/tool-attributes.html" target="_blank" rel="external">官方教程</a>，官网永远是我们学习的最佳来源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;RootTag xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot; &gt;</div><div class="line"></div><div class="line">&lt;TextView</div><div class="line">    android:id=&quot;@+id/slot_description&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_marginTop=&quot;4dp&quot;</div><div class="line">    android:layout_marginEnd=&quot;8dp&quot;</div><div class="line">    android:layout_marginRight=&quot;8dp&quot;</div><div class="line">    android:textSize=&quot;@dimen/text_size_medium&quot;</div><div class="line">    tools:text=&quot;9:00 AM - 11:30 AM / Room 1&quot;</div><div class="line">    style=&quot;@style/Body1Text&quot; /&gt;</div><div class="line">    &lt;/RootTag&gt;</div><div class="line">```    </div><div class="line">##### 1.2.1、tools:ignore</div><div class="line">在任何元素中使用，主要是用于lint检查的时候忽略，例如：</div></pre></td></tr></table></figure>
<p>&lt;string name=”show_all_apps” tools:ignore=”MissingTranslation&gt;All<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">##### 1.2.2、tools:targetApi</div><div class="line">在任何元素中使用，主要是用于lint检查的时候忽略，此属性和java中的注释代码[@TargetAPi](https://developer.android.com/reference/android/annotation/TargetApi.html)类似，通过这个属性你能指定元素所能运行的API版本，例如下面这个，指定了这个GridLayout只能用于API版本14以上的版本：</div></pre></td></tr></table></figure></p>
<p><gridlayout xlmns:android="http://schemas.android.com/apk/res/android" xlmns:tools="http://schemas.android.com/tools" tools:targetapi="14"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">##### 1.2.3、tools:locale</div><div class="line">在任何元素中使用，主要是用于lint检查的时候忽略，此属性和java中的注释代码[@TargetAPi](https://developer.android.com/reference/android/annotation/TargetApi.html)类似，通过这个属性你能指定元素所能运行的API版本，例如下面这个，指定了这个GridLayout只能用于API版本14以上的版本：</div></pre></td></tr></table></figure></gridlayout></p>
<p><gridlayout xlmns:android="http://schemas.android.com/apk/res/android" xlmns:tools="http://schemas.android.com/tools" tools:targetapi="14"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##### 1.2.4、tools:instead of android</div><div class="line">在View中使用，主要是用于Android Studio layout editor，如本节开始所示。</div><div class="line"></div><div class="line">##### 1.2.5、tools:context</div><div class="line">在xml文件的跟布局中使用，主要是用于Android Studio layout editor，可以指定该xml文件预览时的主题以及类似于onClick属性使用QuickFix快捷生成对应方法所在的Activity。</div><div class="line"></div><div class="line">![image](./images/tools-attribute-context_2x.png)</div></pre></td></tr></table></figure></gridlayout></p>
<p><android.support.constraint.constraintlayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:tools="http://schemas.android.com/tools" tools:context=".MainAcivity"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">##### 1.2.6、tools:layout</div><div class="line">在xml文件的跟布局中使用，主要是用于Android Studio layout editor，可以指定该Fragment预览时候的布局。</div><div class="line"></div><div class="line">![image](./images/tools-attribute-context_2x.png)</div></pre></td></tr></table></figure></android.support.constraint.constraintlayout></p>
<fragment android:name="com.example.master.ItemListFragment" tools:layout="@layout/list_content">

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">##### 1.2.7、还有更多需要去学习</div><div class="line"></div><div class="line">#### 1.3、处理Fragment中的生命周期</div><div class="line">大家都知道，在Fragment使用过程中，有时候会出现getActivity()=null的情况，这时候就会导致NullPointException(**注意：如需 Fragment 内的某个 Context 对象，可以调用 getActivity()。但要注意，请仅在片段附加到 Activity 时调用 getActivity()。如果片段尚未附加，或在其生命周期结束期间分离，则 getActivity() 将返回 null**)。因此，我们可以在onAttach()的时候传入Activity，如下所示：</div><div class="line"></div><div class="line">```    @Override</div><div class="line">    public void onAttach(Activity activity) &#123;</div><div class="line">        super.onAttach(activity);</div><div class="line">        LOGD(TAG, &quot;Attaching to activity&quot;);</div><div class="line">        mActivity = activity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onDetach() &#123;</div><div class="line">        super.onDetach();</div><div class="line">        mActivity = null;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>高版本API</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public void onAttach(Context context) &#123;</div><div class="line">    super.onAttach(context);</div><div class="line">    LOGD(TAG, &quot;Attaching to activity&quot;);</div><div class="line">    mActivity = (Activity)context;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onDetach() &#123;</div><div class="line">    super.onDetach();</div><div class="line">    mActivity = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、探索"><a href="#2、探索" class="headerlink" title="2、探索"></a>2、探索</h3><h4 id="2-1、"><a href="#2-1、" class="headerlink" title="2.1、"></a>2.1、</h4><h3 id="3、地图"><a href="#3、地图" class="headerlink" title="3、地图"></a>3、地图</h3><h3 id="4、社交"><a href="#4、社交" class="headerlink" title="4、社交"></a>4、社交</h3><h3 id="5、视频"><a href="#5、视频" class="headerlink" title="5、视频"></a>5、视频</h3><h3 id="6、设置"><a href="#6、设置" class="headerlink" title="6、设置"></a>6、设置</h3><h4 id="6-1、使用PreferenceFragment"><a href="#6-1、使用PreferenceFragment" class="headerlink" title="6.1、使用PreferenceFragment"></a>6.1、使用PreferenceFragment</h4><h3 id="7、关于"><a href="#7、关于" class="headerlink" title="7、关于"></a>7、关于</h3><h4 id="7-1、加载HTML资源"><a href="#7-1、加载HTML资源" class="headerlink" title="7.1、加载HTML资源"></a>7.1、加载HTML资源</h4><pre><code>···Html.fromHtml(getString(&lt;![CDATA[
    &lt;b&gt;Google I/O 2015&lt;/b&gt;&lt;br&gt;
    Version %s
]]&gt;,&quot;xxx&quot;))```
</code></pre><h4 id="7-2"><a href="#7-2" class="headerlink" title="7.2"></a>7.2</h4><h3 id="8、调试"><a href="#8、调试" class="headerlink" title="8、调试"></a>8、调试</h3><h4 id="8-1、使用PreferenceFragment"><a href="#8-1、使用PreferenceFragment" class="headerlink" title="8.1、使用PreferenceFragment"></a>8.1、使用PreferenceFragment</h4></fragment>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做项目做的越来越烦人了，可以说近一年以来基本上没什么长进，反而有所退步。以往的激情已经被业务磨灭，真的真的该重新做点什么了。人无近虑，必有远忧。一直逃不开自己的舒适区，让自己在放纵，另一方面也是担忧自己当下的技能能否适应新的环境，总而言之，真的该认真学习好好看书了。否则
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
</feed>
