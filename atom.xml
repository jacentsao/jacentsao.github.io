<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silence of Heart</title>
  
  <subtitle>最怕彷徨无前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-19T08:05:46.223Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JacenTsao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开发常用英语词汇</title>
    <link href="http://yoursite.com/2019/09/19/%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%B1%87/"/>
    <id>http://yoursite.com/2019/09/19/开发常用英语词汇/</id>
    <published>2019-09-19T08:00:35.000Z</published>
    <updated>2019-09-19T08:05:46.223Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="http://www.imooc.com/article/8941" target="_blank" rel="noopener">慕课网</a>。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line">abstract 抽象的</span><br><span class="line">abstract base class (ABC)抽象基类</span><br><span class="line">abstract class 抽象类</span><br><span class="line">abstraction 抽象、抽象物、抽象性</span><br><span class="line">access 存取、访问</span><br><span class="line">access function 访问函数</span><br><span class="line">access level访问级别</span><br><span class="line">account 账户</span><br><span class="line">action 动作</span><br><span class="line">activate 激活</span><br><span class="line">active 活动的</span><br><span class="line">actual parameter 实参</span><br><span class="line">adapter 适配器</span><br><span class="line">add-in 插件</span><br><span class="line">address 地址</span><br><span class="line">address space 地址空间</span><br><span class="line">ADO(ActiveX Data Object)ActiveX数据对象</span><br><span class="line">advanced 高级的</span><br><span class="line">aggregation 聚合、聚集</span><br><span class="line">algorithm 算法</span><br><span class="line">alias 别名</span><br><span class="line">align 排列、对齐</span><br><span class="line">allocate 分配、配置</span><br><span class="line">allocator分配器、配置器</span><br><span class="line">angle bracket 尖括号</span><br><span class="line">annotation 注解、评注</span><br><span class="line">API (Application Programming Interface) 应用(程序)编程接口</span><br><span class="line">appearance 外观</span><br><span class="line">append 附加</span><br><span class="line">application 应用、应用程序</span><br><span class="line">application framework 应用程序框架</span><br><span class="line">Approximate String Matching 模糊匹配</span><br><span class="line">architecture 架构、体系结构</span><br><span class="line">archive file 归档文件、存档文件</span><br><span class="line">argument参数。</span><br><span class="line">array 数组</span><br><span class="line">arrow operator 箭头操作符</span><br><span class="line">assert(ion) 断言</span><br><span class="line">assign 赋值</span><br><span class="line">assignment 赋值、分配</span><br><span class="line">assignment operator 赋值操作符</span><br><span class="line">associated 相关的、相关联的</span><br><span class="line">asynchronous 异步的</span><br><span class="line">attribute 特性、属性</span><br><span class="line">authentication service 验证服务</span><br><span class="line">authorization 授权</span><br><span class="line"></span><br><span class="line">B</span><br><span class="line">background 背景、后台(进程)</span><br><span class="line">backup 备份</span><br><span class="line">backup device备份设备</span><br><span class="line">backup file 备份文件</span><br><span class="line">backward compatible 向后兼容、向下兼容</span><br><span class="line">base class 基类</span><br><span class="line">base type 基类型</span><br><span class="line">batch 批处理</span><br><span class="line">BCL (base class library)基类库</span><br><span class="line">Bin Packing 装箱问题</span><br><span class="line">binary 二进制</span><br><span class="line">binding 绑定</span><br><span class="line">bit 位</span><br><span class="line">bitmap 位图</span><br><span class="line">block 块、区块、语句块</span><br><span class="line">boolean 布林值(真假值，true或false)</span><br><span class="line">border 边框</span><br><span class="line">bounds checking 边界检查</span><br><span class="line">boxing 装箱、装箱转换</span><br><span class="line">brace (curly brace) 大括号、花括号</span><br><span class="line">bracket (square brakcet) 中括号、方括号</span><br><span class="line">breakpoint 断点</span><br><span class="line">browser applications 浏览器应用(程序)</span><br><span class="line">browser-accessible application 可经由浏览器访问的应用程序</span><br><span class="line">bug 缺陷错误</span><br><span class="line">build 编连(专指编译和连接)</span><br><span class="line">built-in 内建、内置</span><br><span class="line">bus 总线</span><br><span class="line">business 业务、商务(看场合)</span><br><span class="line">business Logic 业务逻辑</span><br><span class="line">business rules 业务规则</span><br><span class="line">buttons 按钮</span><br><span class="line">by/through 通过</span><br><span class="line">byte 位元组(由8 bits组成)</span><br><span class="line"></span><br><span class="line">C</span><br><span class="line">cache 高速缓存</span><br><span class="line">calendar 日历</span><br><span class="line">Calendrical Calculations 日期</span><br><span class="line">call 调用</span><br><span class="line">call operator 调用操作符</span><br><span class="line">callback 回调</span><br><span class="line">candidate key 候选键 (for database)</span><br><span class="line">cascading delete 级联删除 (for database)</span><br><span class="line">cascading update 级联更新 (for database)</span><br><span class="line">casting 转型、造型转换</span><br><span class="line">catalog 目录</span><br><span class="line">chain 链(function calls)</span><br><span class="line">character 字符</span><br><span class="line">character format 字符格式</span><br><span class="line">character set 字符集</span><br><span class="line">check box 复选框</span><br><span class="line">check button 复选按钮</span><br><span class="line">CHECK constraints CHECK约束 (for database)</span><br><span class="line">checkpoint 检查点 (for database)</span><br><span class="line">child class 子类</span><br><span class="line">CIL (common intermediate language)通用中间语言、通用中介语言</span><br><span class="line">class 类</span><br><span class="line">class declaration 类声明</span><br><span class="line">class definition 类定义</span><br><span class="line">class derivation list 类继承列表</span><br><span class="line">class factory 类厂</span><br><span class="line">class hierarchy 类层次结构</span><br><span class="line">class library 类库</span><br><span class="line">class loader 类装载器</span><br><span class="line">class template 类模板</span><br><span class="line">class template partial specializations 类模板部分特化</span><br><span class="line">class template specializations 类模板特化</span><br><span class="line">classification 分类</span><br><span class="line">clause 子句</span><br><span class="line">cleanup 清理、清除</span><br><span class="line">CLI (Common Language Infrastructure) 通用语言基础设施</span><br><span class="line">client 客户、客户端</span><br><span class="line">client application 客户端应用程序</span><br><span class="line">client area 客户区</span><br><span class="line">client cursor 客户端游标 (for database)</span><br><span class="line">client-server 客户机/服务器、客户端/服务器</span><br><span class="line">clipboard 剪贴板</span><br><span class="line">clone 克隆</span><br><span class="line">CLS (common language specification) 通用语言规范</span><br><span class="line">code access security 代码访问安全</span><br><span class="line">code page 代码页</span><br><span class="line">COFF (Common Object File Format) 通用对象文件格式</span><br><span class="line">collection 集合</span><br><span class="line">COM (Component Object Model) 组件对象模型</span><br><span class="line">combo box 组合框</span><br><span class="line">command line 命令行</span><br><span class="line">comment 注释</span><br><span class="line">commit 提交 (for database)</span><br><span class="line">communication 通讯</span><br><span class="line">compatible 兼容</span><br><span class="line">compile time 编译期、编译时</span><br><span class="line">compiler 编译器</span><br><span class="line">component组件</span><br><span class="line">composite index 复合索引、组合索引 (for database)</span><br><span class="line">composite key 复合键、组合键 (for database)</span><br><span class="line">composition 复合、组合</span><br><span class="line">concept 概念</span><br><span class="line">concrete具体的</span><br><span class="line">concrete class 具体类</span><br><span class="line">concurrency 并发、并发机制</span><br><span class="line">configuration 配置、组态</span><br><span class="line">Connected Components 连通分支</span><br><span class="line">connection 连接 (for database)</span><br><span class="line">connection pooling 连接池</span><br><span class="line">console 控制台</span><br><span class="line">constant 常量</span><br><span class="line">Constrained and Unconstrained Optimization 最值问题</span><br><span class="line">constraint 约束 (for database)</span><br><span class="line">construct 构件、成分、概念、构造（for language）</span><br><span class="line">constructor (ctor) 构造函数、构造器</span><br><span class="line">container 容器</span><br><span class="line">containment包容</span><br><span class="line">context 环境、上下文</span><br><span class="line">control 控件</span><br><span class="line">cookie</span><br><span class="line">copy 拷贝</span><br><span class="line">CORBA 通用对象请求中介架构(Common Object Request Broker Architecture)</span><br><span class="line">cover 覆盖、涵盖</span><br><span class="line">create/creation 创建、生成</span><br><span class="line">crosstab query 交叉表查询 (for database)</span><br><span class="line">Cryptography 密码</span><br><span class="line">CTS (common type system)通用类型系统</span><br><span class="line">cube 多维数据集 (for database)</span><br><span class="line">cursor 光标</span><br><span class="line">cursor 游标 (for database)</span><br><span class="line">custom 定制、自定义</span><br><span class="line"></span><br><span class="line">D</span><br><span class="line">data 数据</span><br><span class="line">data connection 数据连接 (for database)</span><br><span class="line">data dictionary 数据字典 (for database)</span><br><span class="line">data file 数据文件 (for database)</span><br><span class="line">data integrity 数据完整性 (for database)</span><br><span class="line">data manipulation language (DML)数据操作语言(DML) (for database)</span><br><span class="line">data member 数据成员、成员变量</span><br><span class="line">data source 数据源 (for database)</span><br><span class="line">Data source name (DSN) 数据源名称(DSN) (for database)</span><br><span class="line">data structure数据结构</span><br><span class="line">Data Structures 基本数据结构</span><br><span class="line">data table 数据表 (for database)</span><br><span class="line">data-bound 数据绑定 (for database)</span><br><span class="line">database 数据库 (for database)</span><br><span class="line">database catalog 数据库目录 (for database)</span><br><span class="line">database diagram 数据关系图 (for database)</span><br><span class="line">database file 数据库文件 (for database)</span><br><span class="line">database object 数据库对象 (for database)</span><br><span class="line">database owner 数据库所有者 (for database)</span><br><span class="line">database project 数据库工程 (for database)</span><br><span class="line">database role 数据库角色 (for database)</span><br><span class="line">database schema 数据库模式、数据库架构 (for database)</span><br><span class="line">database script 数据库脚本 (for database)</span><br><span class="line">datagram 数据报文</span><br><span class="line">dataset 数据集 (for database)</span><br><span class="line">dataset 数据集 (for database)</span><br><span class="line">DBMS (database management system)数据库管理系统 (for database)</span><br><span class="line">DCOM (distributed COM)分布式COM</span><br><span class="line">dead lock 死锁 (for database)</span><br><span class="line">deallocate 归还</span><br><span class="line">debug 调试</span><br><span class="line">debugger 调试器</span><br><span class="line">decay 退化</span><br><span class="line">declaration 声明</span><br><span class="line">default 缺省、默认值</span><br><span class="line">DEFAULT constraint默认约束 (for database)</span><br><span class="line">default database 默认数据库 (for database)</span><br><span class="line">default instance 默认实例 (for database)</span><br><span class="line">default result set 默认结果集 (for database)</span><br><span class="line">defer 推迟</span><br><span class="line">definition 定义</span><br><span class="line">delegate 委托</span><br><span class="line">delegation 委托</span><br><span class="line">deploy 部署</span><br><span class="line">derived class 派生类</span><br><span class="line">design pattern 设计模式</span><br><span class="line">destroy 销毁</span><br><span class="line">destructor(dtor)析构函数、析构器</span><br><span class="line">device 设备</span><br><span class="line">DHTML (dynamic HyperText Markup Language)动态超文本标记语言</span><br><span class="line">dialog 对话框</span><br><span class="line">Dictionaries 字典</span><br><span class="line">digest 摘要</span><br><span class="line">digital 数字的</span><br><span class="line">directive (编译)指示符</span><br><span class="line">directory 目录</span><br><span class="line">disassembler 反汇编器</span><br><span class="line">DISCO (Discovery of Web Services)Web Services的查找</span><br><span class="line">dispatch 调度、分派、派发</span><br><span class="line">distributed computing 分布式计算</span><br><span class="line">distributed query 分布式查询 (for database)</span><br><span class="line">DNA (Distributed interNet Application) 分布式网间应用程序</span><br><span class="line">document 文档</span><br><span class="line">DOM (Document Object Model)文档对象模型</span><br><span class="line">dot operator (圆)点操作符</span><br><span class="line">double-byte character set (DBCS)双字节字符集(DBCS)</span><br><span class="line">driver 驱动(程序)</span><br><span class="line">DTD (document type definition) 文档类型定义</span><br><span class="line">dump 转储</span><br><span class="line">dump file 转储文件</span><br><span class="line"></span><br><span class="line">E</span><br><span class="line">e-business 电子商务</span><br><span class="line">efficiency 效率</span><br><span class="line">efficient 高效</span><br><span class="line">encapsulation 封装</span><br><span class="line">end user 最终用户</span><br><span class="line">end-to-end authentication 端对端身份验证</span><br><span class="line">engine 引擎</span><br><span class="line">entity 实体</span><br><span class="line">enum (enumeration) 枚举</span><br><span class="line">enumerators 枚举成员、枚举器</span><br><span class="line">equal 相等</span><br><span class="line">equality 相等性</span><br><span class="line">equality operator 等号操作符</span><br><span class="line">error log 错误日志 (for database)</span><br><span class="line">escape character 转义符、转义字符</span><br><span class="line">escape code 转义码</span><br><span class="line">evaluate 评估</span><br><span class="line">event 事件</span><br><span class="line">event driven 事件驱动的</span><br><span class="line">event handler 事件处理器</span><br><span class="line">evidence 证据</span><br><span class="line">exception 异常</span><br><span class="line">exception declaration 异常声明</span><br><span class="line">exception handling 异常处理、异常处理机制</span><br><span class="line">exception specification 异常规范</span><br><span class="line">exception-safe 异常安全的</span><br><span class="line">exit 退出</span><br><span class="line">explicit 显式</span><br><span class="line">explicit specialization 显式特化</span><br><span class="line">explicit transaction 显式事务 (for database)</span><br><span class="line">export 导出</span><br><span class="line">expression 表达式</span><br><span class="line"></span><br><span class="line">F</span><br><span class="line">fat client 胖客户端</span><br><span class="line">feature 特性、特征</span><br><span class="line">fetch 提取</span><br><span class="line">field 字段 (for database)</span><br><span class="line">field 字段(java)</span><br><span class="line">field length 字段长度 (for database)</span><br><span class="line">file 文件</span><br><span class="line">filter 筛选 (for database)</span><br><span class="line">finalization 终结</span><br><span class="line">finalizer 终结器</span><br><span class="line">firewall 防火墙</span><br><span class="line">flag 标记</span><br><span class="line">flash memory 闪存</span><br><span class="line">flush 刷新</span><br><span class="line">font 字体</span><br><span class="line">foreign key (FK) 外键(FK) (for database)</span><br><span class="line">form 窗体</span><br><span class="line">formal parameter 形参</span><br><span class="line">forward declaration 前置声明</span><br><span class="line">forward-only 只向前的</span><br><span class="line">forward-only cursor 只向前游标 (for database)</span><br><span class="line">framework 框架</span><br><span class="line">full specialization 完全特化</span><br><span class="line">function 函数</span><br><span class="line">function call operator (即operator ()) 函数调用操作符</span><br><span class="line">function object 函数对象</span><br><span class="line">function template函数模板</span><br><span class="line">functionality 功能</span><br><span class="line">functor 仿函数</span><br><span class="line"></span><br><span class="line">G</span><br><span class="line">GC (Garbage collection) 垃圾回收(机制)、垃圾收集(机制)</span><br><span class="line">generate 生成</span><br><span class="line">generic 泛化的、一般化的、通用的</span><br><span class="line">generic algorithm通用算法</span><br><span class="line">genericity 泛型</span><br><span class="line">getter (相对于 setter)取值函数</span><br><span class="line">global 全局的</span><br><span class="line">global object 全局对象</span><br><span class="line">grant 授权 (for database)</span><br><span class="line">group 组、群</span><br><span class="line">group box 分组框</span><br><span class="line">GUI 图形界面</span><br><span class="line">GUID (Globally Unique Identifier) 全球唯一标识符</span><br><span class="line"></span><br><span class="line">H</span><br><span class="line">handle 句柄</span><br><span class="line">handler 处理器</span><br><span class="line">hard disk 硬盘</span><br><span class="line">hard-coded 硬编码的</span><br><span class="line">hard-copy 截屏图</span><br><span class="line">hardware 硬件</span><br><span class="line">hash table 散列表、哈希表</span><br><span class="line">header file头文件</span><br><span class="line">heap 堆</span><br><span class="line">help file 帮助文件</span><br><span class="line">hierarchical data 阶层式数据、层次式数据</span><br><span class="line">hierarchy 层次结构、继承体系</span><br><span class="line">high level 高阶、高层</span><br><span class="line">hook 钩子</span><br><span class="line">Host (application)宿主(应用程序)</span><br><span class="line">hot key 热键</span><br><span class="line">HTML (HyperText Markup Language) 超文本标记语言</span><br><span class="line">HTTP (HyperText Transfer Protocol) 超文本传输协议</span><br><span class="line">HTTP pipeline HTTP管道</span><br><span class="line">hyperlink 超链接</span><br><span class="line"></span><br><span class="line">I</span><br><span class="line">icon 图标</span><br><span class="line">IDE (Integrated Development Environment)集成开发环境</span><br><span class="line">identifier 标识符</span><br><span class="line">IDL (Interface Definition Language) 接口定义语言</span><br><span class="line">idle time 空闲时间</span><br><span class="line">if and only if当且仅当</span><br><span class="line">IL (Intermediate Language) 中间语言、中介语言</span><br><span class="line">image 图象</span><br><span class="line">IME 输入法</span><br><span class="line">immediate base 直接基类</span><br><span class="line">immediate derived 直接派生类</span><br><span class="line">immediate updating 即时更新 (for database)</span><br><span class="line">implement 实现</span><br><span class="line">implementation 实现、实现品</span><br><span class="line">implicit 隐式</span><br><span class="line">implicit transaction隐式事务 (for database)</span><br><span class="line">import 导入</span><br><span class="line">incremental update 增量更新 (for database)</span><br><span class="line">Independent Set 独立集</span><br><span class="line">index 索引 (for database)</span><br><span class="line">infinite loop 无限循环</span><br><span class="line">infinite recursive 无限递归</span><br><span class="line">information 信息</span><br><span class="line">inheritance 继承、继承机制</span><br><span class="line">initialization 初始化</span><br><span class="line">initialization list 初始化列表、初始值列表</span><br><span class="line">initialize 初始化</span><br><span class="line">inline 内联</span><br><span class="line">inline expansion 内联展开</span><br><span class="line">inner join 内联接 (for database)</span><br><span class="line">instance 实例</span><br><span class="line">instantiated 具现化、实体化(常应用于template)</span><br><span class="line">instantiation 具现体、具现化实体(常应用于template)</span><br><span class="line">integrate 集成、整合</span><br><span class="line">integrity 完整性、一致性</span><br><span class="line">integrity constraint完整性约束 (for database)</span><br><span class="line">interacts 交互</span><br><span class="line">interface 接口</span><br><span class="line">interoperability 互操作性、互操作能力</span><br><span class="line">interpreter 解释器</span><br><span class="line">introspection 自省</span><br><span class="line">invariants 不变性</span><br><span class="line">invoke 调用</span><br><span class="line">isolation level 隔离级别 (for database)</span><br><span class="line">item 项、条款、项目</span><br><span class="line">iterate 迭代</span><br><span class="line">iteration 迭代(回圈每次轮回称为一个iteration)</span><br><span class="line">iterative 反复的、迭代的</span><br><span class="line">iterator 迭代器</span><br><span class="line"></span><br><span class="line">J</span><br><span class="line">JIT compilation JIT编译即时编译</span><br><span class="line">Job Scheduling 工程安排</span><br><span class="line"></span><br><span class="line">K</span><br><span class="line">key 键 (for database)</span><br><span class="line">key column 键列 (for database)</span><br><span class="line"></span><br><span class="line">L</span><br><span class="line">left outer join 左向外联接 (for database)</span><br><span class="line">level 阶、层例</span><br><span class="line">library 库</span><br><span class="line">lifetime 生命期、寿命</span><br><span class="line">Linear Programming 线性规划</span><br><span class="line">link 连接、链接</span><br><span class="line">linkage 连接、链接</span><br><span class="line">linker 连接器、链接器</span><br><span class="line">list 列表、表、链表</span><br><span class="line">list box 列表框</span><br><span class="line">literal constant 字面常数</span><br><span class="line">livelock 活锁 (for database)</span><br><span class="line">load 装载、加载</span><br><span class="line">load balancing 负载平衡</span><br><span class="line">loader 装载器、载入器</span><br><span class="line">local 局部的</span><br><span class="line">local object 局部对象</span><br><span class="line">lock 锁</span><br><span class="line">log 日志</span><br><span class="line">login 登录</span><br><span class="line">login security mode登录安全模式 (for database)</span><br><span class="line">lookup table 查找表 (for database)</span><br><span class="line">loop 循环</span><br><span class="line">loose coupling 松散耦合</span><br><span class="line">lvalue 左值</span><br><span class="line"></span><br><span class="line">M</span><br><span class="line">machine code 机器码、机器代码</span><br><span class="line">macro 宏</span><br><span class="line">maintain 维护</span><br><span class="line">managed code 受控代码、托管代码</span><br><span class="line">Managed Extensions 受控扩充件、托管扩展</span><br><span class="line">managed object 受控对象、托管对象</span><br><span class="line">manifest 清单</span><br><span class="line">many-to-many relationship 多对多关系 (for database)</span><br><span class="line">many-to-one relationship 多对一关系 (for database)</span><br><span class="line">marshal 列集</span><br><span class="line">Matching 匹配</span><br><span class="line">member 成员</span><br><span class="line">member access operator 成员取用运算子(有dot和arrow两种)</span><br><span class="line">member function 成员函数</span><br><span class="line">member initialization list成员初始值列表</span><br><span class="line">memory 内存</span><br><span class="line">memory leak 内存泄漏</span><br><span class="line">menu 菜单</span><br><span class="line">message 消息</span><br><span class="line">message based 基于消息的</span><br><span class="line">message loop 消息环</span><br><span class="line">message queuing消息队列</span><br><span class="line">metadata 元数据</span><br><span class="line">metaprogramming元编程</span><br><span class="line">method 方法</span><br><span class="line">micro 微</span><br><span class="line">middle tier 中间层</span><br><span class="line">middleware 中间件</span><br><span class="line">modeling 建模</span><br><span class="line">modeling language 建模语言</span><br><span class="line">modem 调制解调器</span><br><span class="line">modifier 修饰字、修饰符</span><br><span class="line">module 模块</span><br><span class="line">most derived class最底层的派生类</span><br><span class="line">mouse 鼠标</span><br><span class="line">multi-tasking 多任务</span><br><span class="line">multi-thread 多线程</span><br><span class="line">multicast delegate 组播委托、多点委托</span><br><span class="line">multithreaded server application 多线程服务器应用程序</span><br><span class="line">multiuser 多用户</span><br><span class="line">mutable 可变的</span><br><span class="line">mutex 互斥元、互斥体</span><br><span class="line"></span><br><span class="line">N</span><br><span class="line">named parameter 命名参数</span><br><span class="line">named pipe 命名管道</span><br><span class="line">namespace 名字空间、命名空间</span><br><span class="line">native 原生的、本地的</span><br><span class="line">native code 本地码、本机码</span><br><span class="line">nested class 嵌套类</span><br><span class="line">nested query 嵌套查询 (for database)</span><br><span class="line">nested table 嵌套表 (for database)</span><br><span class="line">network 网络</span><br><span class="line">network card 网卡</span><br><span class="line">Network Flow 网络流</span><br><span class="line"></span><br><span class="line">O</span><br><span class="line">object 对象</span><br><span class="line">object based 基于对象的</span><br><span class="line">object model 对象模型</span><br><span class="line">object oriented 面向对象的</span><br><span class="line">ODBC data source ODBC数据源 (for database)</span><br><span class="line">ODBC driver ODBC驱动程序 (for database)</span><br><span class="line">one-to-many relationship 一对多关系 (for database)</span><br><span class="line">one-to-one relationship 一对一关系 (for database)</span><br><span class="line">operating system (OS) 操作系统</span><br><span class="line">operation 操作</span><br><span class="line">operator 操作符、运算符</span><br><span class="line">option 选项</span><br><span class="line">outer join 外联接 (for database)</span><br><span class="line">overflow 上限溢位(相对于underflow)</span><br><span class="line">overload 重载</span><br><span class="line">override 覆写、重载、重新定义</span><br><span class="line"></span><br><span class="line">P</span><br><span class="line">package 包</span><br><span class="line">packaging 打包</span><br><span class="line">palette 调色板</span><br><span class="line">parallel 并行</span><br><span class="line">parameter 参数、形式参数、形参</span><br><span class="line">parameter list 参数列表</span><br><span class="line">parameterize 参数化</span><br><span class="line">parent class 父类</span><br><span class="line">parentheses 圆括弧、圆括号</span><br><span class="line">parse 解析</span><br><span class="line">parser 解析器</span><br><span class="line">part 零件、部件</span><br><span class="line">partial specialization 局部特化</span><br><span class="line">pass by reference 引用传递</span><br><span class="line">pass by value 值传递</span><br><span class="line">pattern 模式</span><br><span class="line">persistence 持久性</span><br><span class="line">pixel 像素</span><br><span class="line">placeholder 占位符</span><br><span class="line">platform 平台</span><br><span class="line">Point Location 位置查询</span><br><span class="line">pointer 指针</span><br><span class="line">polymorphism 多态</span><br><span class="line">pooling 池化</span><br><span class="line">pop up 弹出式</span><br><span class="line">port 端口</span><br><span class="line">postfix 后缀</span><br><span class="line">precedence 优先序(通常用于运算子的优先执行次序)</span><br><span class="line">prefix 前缀</span><br><span class="line">preprocessor 预处理器</span><br><span class="line">primary key (PK)主键(PK) (for database)</span><br><span class="line">primary table 主表 (for database)</span><br><span class="line">primitive type 原始类型</span><br><span class="line">print 打印</span><br><span class="line">printer 打印机</span><br><span class="line">procedure 过程</span><br><span class="line">process 进程</span><br><span class="line">program 程序</span><br><span class="line">programmer 程序员</span><br><span class="line">programming编程、程序设计</span><br><span class="line">progress bar 进度指示器</span><br><span class="line">project 项目、工程</span><br><span class="line">property 属性</span><br><span class="line">protocol 协议</span><br><span class="line">pseudo code伪码</span><br><span class="line"></span><br><span class="line">Q</span><br><span class="line">qualified 合格的</span><br><span class="line">qualifier 修饰符</span><br><span class="line">quality 质量</span><br><span class="line">queue 队列</span><br><span class="line"></span><br><span class="line">R</span><br><span class="line">radio button 单选按钮</span><br><span class="line">random number 随机数</span><br><span class="line">Random Number Generation 随机数生成</span><br><span class="line">range 范围、区间</span><br><span class="line">rank 等级</span><br><span class="line">raw 未经处理的</span><br><span class="line">re-direction 重定向</span><br><span class="line">readOnly只读</span><br><span class="line">record 记录 (for database)</span><br><span class="line">recordset 记录集 (for database</span><br><span class="line">recursion —— 递归</span><br><span class="line">recursive 递归</span><br><span class="line">refactoring 重构</span><br><span class="line">refer 引用、参考</span><br><span class="line">reference 引用、参考</span><br><span class="line">reflection 反射</span><br><span class="line">refresh data 刷新数据 (for database)</span><br><span class="line">register 寄存器</span><br><span class="line">regular expression 正则表达式</span><br><span class="line">relational database 关系数据库</span><br><span class="line">remote 远程</span><br><span class="line">remote request 远程请求</span><br><span class="line">represent 表述，表现</span><br><span class="line">resolution 解析过程</span><br><span class="line">resolve 解析、决议</span><br><span class="line">result set 结果集 (for database)</span><br><span class="line">retrieve data 检索数据</span><br><span class="line">return 返回</span><br><span class="line">return type 返回类型</span><br><span class="line">return value 返回值</span><br><span class="line">revoke 撤销</span><br><span class="line">right outer join 右向外联接 (for database)</span><br><span class="line">robust 健壮</span><br><span class="line">robustness 健壮性</span><br><span class="line">roll back 回滚 (for database)</span><br><span class="line">roll forward 前滚 (for database)</span><br><span class="line">routine 例程</span><br><span class="line">row 行 (for database)</span><br><span class="line">rowset 行集 (for database)</span><br><span class="line">RPC (remote procedure call)RPC(远程过程调用)</span><br><span class="line">runtime 执行期、运行期、执行时、运行时</span><br><span class="line">rvalue 右值</span><br><span class="line"></span><br><span class="line">S</span><br><span class="line">Satisfiability 可满足性</span><br><span class="line">save 保存</span><br><span class="line">savepoint 保存点 (for database)</span><br><span class="line">SAX (Simple API for XML)</span><br><span class="line">scalable 可伸缩的、可扩展的</span><br><span class="line">schedule 调度</span><br><span class="line">scheduler 调度程序</span><br><span class="line">schema 模式、纲目结构</span><br><span class="line">scope 作用域、生存空间</span><br><span class="line">screen 屏幕</span><br><span class="line">scroll bar滚动条</span><br><span class="line">SDK (Software Development Kit)软件开发包</span><br><span class="line">sealed class 密封类</span><br><span class="line">search 查找</span><br><span class="line">Searching 查找</span><br><span class="line">semantics 语义</span><br><span class="line">sequential container序列式容器</span><br><span class="line">serial 串行</span><br><span class="line">serialization/serialize 序列化</span><br><span class="line">server 服务器、服务端</span><br><span class="line">session 会话 (for database)</span><br><span class="line">Set and String Problems 集合与串的问题</span><br><span class="line">Set Cover 集合覆盖</span><br><span class="line">Set Data Structures 集合</span><br><span class="line">Set Packing 集合配置</span><br><span class="line">setter 设值函数</span><br><span class="line">side effect 副作用</span><br><span class="line">signature 签名</span><br><span class="line">single-threaded 单线程</span><br><span class="line">slider滑块</span><br><span class="line">slot 槽</span><br><span class="line">SMTP (Simple Mail Transfer Protocol) 简单邮件传输协议</span><br><span class="line">snapshot 截屏图</span><br><span class="line">snapshot 快照 (for database)</span><br><span class="line">SOAP (simple object access protocol) 简单对象访问协议</span><br><span class="line">software 软件</span><br><span class="line">Sorting 排序</span><br><span class="line">source code 源码、源代码</span><br><span class="line">specialization 特化</span><br><span class="line">specification 规范、规格</span><br><span class="line">splitter 切分窗口</span><br><span class="line">SQL (Structured Query Language) 结构化查询语言 (for database)</span><br><span class="line">stack 栈、堆栈</span><br><span class="line">standard library 标准库</span><br><span class="line">standard template library 标准模板库</span><br><span class="line">stateless 无状态的</span><br><span class="line">statement 语句、声明</span><br><span class="line">static cursor 静态游标 (for database)</span><br><span class="line">static SQL statements 静态SQL语句 (for database)</span><br><span class="line">status bar 状态条</span><br><span class="line">stored procedure 存储过程 (for database)</span><br><span class="line">stream 流</span><br><span class="line">string 字符串</span><br><span class="line">String Matching 模式匹配</span><br><span class="line">stub 存根</span><br><span class="line">subobject子对象</span><br><span class="line">subquery 子查询 (for database)</span><br><span class="line">subscript operator 下标操作符</span><br><span class="line">support 支持</span><br><span class="line">suspend 挂起</span><br><span class="line">symbol 记号</span><br><span class="line">syntax 语法</span><br><span class="line">system databases 系统数据库 (for database)</span><br><span class="line">system tables 系统表 (for database)</span><br><span class="line"></span><br><span class="line">T</span><br><span class="line">table 表 (for database)</span><br><span class="line">table-level constraint 表级约束 (for database)</span><br><span class="line">target 标的,目标</span><br><span class="line">task switch 工作切换</span><br><span class="line">TCP (Transport Control Protocol) 传输控制协议</span><br><span class="line">template 模板</span><br><span class="line">temporary object 临时对象</span><br><span class="line">temporary table 临时表 (for database)</span><br><span class="line">text 文本</span><br><span class="line">Text Compression 压缩</span><br><span class="line">text file 文本文件</span><br><span class="line">thin client 瘦客户端</span><br><span class="line">third-party 第三方</span><br><span class="line">thread 线程</span><br><span class="line">thread-safe 线程安全的</span><br><span class="line">throw 抛出、引发(常指发出一个exception)</span><br><span class="line">trace 跟踪</span><br><span class="line">transaction 事务 (for database)</span><br><span class="line">transaction log 事务日志 (for database)</span><br><span class="line">transaction rollback 事务回滚 (for database)</span><br><span class="line">traverse 遍历</span><br><span class="line">trigger 触发器 (for database)</span><br><span class="line">type 类型</span><br><span class="line"></span><br><span class="line">U</span><br><span class="line">UDDI(Universary Description, Discovery and Integration)统一描述、查询与集成</span><br><span class="line">UML (unified modeling language)统一建模语言</span><br><span class="line">unary function 单参函数</span><br><span class="line">unary operator 一元操作符</span><br><span class="line">unboxing 拆箱、拆箱转换</span><br><span class="line">underflow 下限溢位(相对于overflow)</span><br><span class="line">Unicode 统一字符编码标准，采用双字节对字符进行编码</span><br><span class="line">Union query 联合查询 (for database)</span><br><span class="line">UNIQUE constraints UNIQUE约束 (for database)</span><br><span class="line">unique index 唯一索引 (for database)</span><br><span class="line">unmanaged code 非受控代码、非托管代码</span><br><span class="line">unmarshal 散集</span><br><span class="line">unqualified 未经限定的、未经修饰的</span><br><span class="line">URI (Uniform Resource identifier) 统一资源标识符</span><br><span class="line">URL (Uniform Resource Locator) 统一资源定位器</span><br><span class="line">user 用户</span><br><span class="line">user interface 用户界面</span><br><span class="line"></span><br><span class="line">V</span><br><span class="line">value types 值类型</span><br><span class="line">variable 变量</span><br><span class="line">vector 向量(一种容器，有点类似array)</span><br><span class="line">vendor 厂商</span><br><span class="line">viable 可行的</span><br><span class="line">video 视频</span><br><span class="line">view 视图 (for database)</span><br><span class="line">view 视图</span><br><span class="line">virtual function 虚函数</span><br><span class="line">virtual machine 虚拟机</span><br><span class="line">virtual memory 虚拟内存</span><br><span class="line"></span><br><span class="line">W</span><br><span class="line">Web Services web服务</span><br><span class="line">WHERE clause WHERE子句 (for database)</span><br><span class="line">wildcard characters 通配符字符 (for database)</span><br><span class="line">wildcard search 通配符搜索 (for database)</span><br><span class="line">window 窗口</span><br><span class="line">window function 窗口函数</span><br><span class="line">window procedure 窗口过程</span><br><span class="line">Windows authentication Windows身份验证</span><br><span class="line">wizard 向导</span><br><span class="line">word 单词</span><br><span class="line">write enable 写启用 (for database)</span><br><span class="line">write-only 只写</span><br><span class="line">WSDL (Web Service Description Language)Web Service描述语言</span><br><span class="line"></span><br><span class="line">X</span><br><span class="line">XML (eXtensible Markup Language) 可扩展标记语言</span><br><span class="line">XML Message Interface (XMI) XML消息接口</span><br><span class="line">XSD (XML Schema Definition) XML模式定义语言</span><br><span class="line">XSL (eXtensible Stylesheet Language) 可扩展样式表语言</span><br><span class="line">XSLT (eXtensible Stylesheet Language Transformation)可扩展样式表语言转换</span><br><span class="line">xxx based 基于xxx的</span><br><span class="line">xxx oriented 面向xxx</span><br><span class="line"></span><br><span class="line">作者：果果爱吃苹果</span><br><span class="line">链接：http://www.imooc.com/article/8941</span><br><span class="line">来源：慕课网</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自&lt;a href=&quot;http://www.imooc.com/article/8941&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;慕课网&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="英语" scheme="http://yoursite.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>flutter-环境异常问题合集</title>
    <link href="http://yoursite.com/2019/08/08/flutter-%E7%8E%AF%E5%A2%83%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/"/>
    <id>http://yoursite.com/2019/08/08/flutter-环境异常问题合集/</id>
    <published>2019-08-08T14:48:06.000Z</published>
    <updated>2019-08-08T14:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-白屏，无法热更新问题"><a href="#1-白屏，无法热更新问题" class="headerlink" title="1. 白屏，无法热更新问题"></a>1. 白屏，无法热更新问题</h4><h5 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h5><p>环境变量中配置代理后vscode启动flutter项目白屏，Android Studio无法热更新，使用flutter doctor显示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.7.8+hotfix.4, on Mac OS X 10.14.6 18G84, locale zh-Hans-CN)</span><br><span class="line"></span><br><span class="line">[✓] Android toolchain - develop for Android devices (Android SDK version 29.0.0)</span><br><span class="line">[✓] Xcode - develop for iOS and macOS (Xcode 10.3)</span><br><span class="line">[!] iOS tools - develop for iOS devices</span><br><span class="line">    ✗ Verify that all connected devices have been paired with this computer in Xcode.</span><br><span class="line">      If all devices have been paired, libimobiledevice and ideviceinstaller may require updating.</span><br><span class="line">      To update with Brew, run:</span><br><span class="line">        brew update</span><br><span class="line">        brew uninstall --ignore-dependencies libimobiledevice</span><br><span class="line">        brew uninstall --ignore-dependencies usbmuxd</span><br><span class="line">        brew install --HEAD usbmuxd</span><br><span class="line">        brew unlink usbmuxd</span><br><span class="line">        brew link usbmuxd</span><br><span class="line">        brew install --HEAD libimobiledevice</span><br><span class="line">        brew install ideviceinstaller</span><br><span class="line">[✓] Android Studio (version 3.4)</span><br><span class="line">[✓] Android Studio (version 3.4)</span><br><span class="line">[✓] IntelliJ IDEA Ultimate Edition (version 2019.1.3)</span><br><span class="line">[✓] IntelliJ IDEA Ultimate Edition (version 2019.1.3)</span><br><span class="line">[✓] VS Code (version 1.36.1)</span><br><span class="line">[!] Proxy Configuration</span><br><span class="line">    ! NO_PROXY is not set</span><br><span class="line">[✓] Connected device (1 available)</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 2 categories.</span><br></pre></td></tr></table></figure><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>在环境变量中添加一下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NO_PROXY=localhost,127.0.0.1;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-白屏，无法热更新问题&quot;&gt;&lt;a href=&quot;#1-白屏，无法热更新问题&quot; class=&quot;headerlink&quot; title=&quot;1. 白屏，无法热更新问题&quot;&gt;&lt;/a&gt;1. 白屏，无法热更新问题&lt;/h4&gt;&lt;h5 id=&quot;问题现象&quot;&gt;&lt;a href=&quot;#问题现象&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>系统重装 - mac</title>
    <link href="http://yoursite.com/2019/08/06/%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85-mac/"/>
    <id>http://yoursite.com/2019/08/06/系统重装-mac/</id>
    <published>2019-08-06T12:02:36.000Z</published>
    <updated>2019-09-06T06:52:43.517Z</updated>
    
    <content type="html"><![CDATA[<p>###</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 1. 安装Chrome</span><br><span class="line"><span class="meta">#</span> 2. 安装QQ</span><br><span class="line"><span class="meta">#</span> 3. 安装微信</span><br><span class="line"><span class="meta">#</span> 4. 安装百度输入法</span><br><span class="line"><span class="meta">#</span> 5. 安装Alfred 快捷工具</span><br><span class="line"><span class="meta">#</span> 6. 安装Dropbox 网盘</span><br><span class="line"><span class="meta">#</span> 7. 安装1password 密码管理工具</span><br><span class="line"><span class="meta">#</span> 8. 安装iStat Menu 系统资源占用工具，主要看网速</span><br><span class="line"><span class="meta">#</span> 9. 安装Bartender 系统状态栏管理工具</span><br><span class="line"><span class="meta">#</span> 10. 安装vs code</span><br><span class="line"><span class="meta">#</span> 11. 安装iTerm2 终端工具</span><br><span class="line"><span class="meta">#</span> 12. 安装Sublime Text 文本编辑器</span><br><span class="line"><span class="meta">#</span> 13. 安装spectacle 快捷键控制窗口</span><br><span class="line"><span class="meta">#</span> 14. 安装Noizio 白噪音背景 </span><br><span class="line"><span class="meta">#</span> 15. 安装MacDown markdown工具</span><br><span class="line"><span class="meta">#</span> 16. 安装iina 视频播放器</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 1.安装brew</span><br><span class="line"># 2.安装zsh</span><br><span class="line"># 3.安装on-my-zsh</span><br><span class="line"># 4.安装Golang</span><br><span class="line"># 5.安装flutter</span><br><span class="line"># 6.安装IntelliJ IDEA</span><br><span class="line"># 7.安装Goland</span><br><span class="line"># 8.安装Android Studio </span><br><span class="line"># 9.安装Xcode    模拟器</span><br><span class="line"># 10.安装Navicat 数据库工具</span><br><span class="line"># 11.安装PDF Expert PDF阅读编辑工具</span><br><span class="line"># 12.安装Charles 网络调试工具</span><br><span class="line"># 13.安装Fiddler 网络调试工具</span><br><span class="line"># 14.安装Dash    文档工具</span><br><span class="line"># 15.安装Docker  配置阿里云镜像加速器 https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</span><br><span class="line"># 16.安装有道词典</span><br><span class="line"># 17.安装PicGo 图库上传工具</span><br><span class="line"># 18.安装Xmind 思维导图工具</span><br><span class="line"># 19.安装Macs Fan Control 风扇转速控制软件，解救烫手的mac</span><br><span class="line"># 20.安装TimeMachine Editor 时间备份控制软件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL-高性能MySQL-第1章-MySQL架构与历史</title>
    <link href="http://yoursite.com/2019/03/24/MySQL-%E9%AB%98%E6%80%A7%E8%83%BDMySQL-%E7%AC%AC1%E7%AB%A0-MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2/"/>
    <id>http://yoursite.com/2019/03/24/MySQL-高性能MySQL-第1章-MySQL架构与历史/</id>
    <published>2019-03-24T07:51:40.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本章该要地描述了MySQL的服务器架构、各种存储引擎之间的主要区别，以及这些区别的重要性。</p><a id="more"></a><h4 id="1-1-MySQL逻辑架构"><a href="#1-1-MySQL逻辑架构" class="headerlink" title="1.1 MySQL逻辑架构"></a>1.1 MySQL逻辑架构</h4><p>下图为MySQL的服务器逻辑架构图：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdownLogical%20view%20of%20the%20MySQL%20Server%20architecture.png" alt=""></p><p><strong>第一层为客户端</strong> - 连接/线程处理，这一部分其实代表了绝大多数的基于网络的客户端/服务器的工具或者服务。例如连接处理、授权认证、安全等等。</p><p><strong>第二层是MySql的核心服务功能。</strong>包括了查询解析、优化、分析、缓存以及所有的内置函数（六，日期、时间、数学和加密函数），所有跨存储引擎的功能都是在这一层实现的：存储过程、触发器、视图等等。</p><p><strong>第三层包含了存储引擎。</strong>存储引擎负责MySql中数据的提取和存储，各个存储引擎都有自己的优势和劣势，服务器通过api与存储引擎进行通信，api屏蔽了存储引擎之间的差异，是的这些差异对于上层的查询过程透明。存储引擎不会解析sql(InnoDB例外，因为InnoDB会解析外键定义，而MySql服务器本身并没有实现这个功能)</p><h4 id="1-2-并发控制"><a href="#1-2-并发控制" class="headerlink" title="1.2 并发控制"></a>1.2 并发控制</h4><p>MySQL在两个层面进行并发控制：服务器层和存储引擎层。在并发场景下通过锁机制来进行控制，针对并发读和写的场景分别使用共享锁（shared lock）和排它锁（exclusive lock）也称之为读锁（read lock）和写锁（write lock）。</p><p>通过锁机制可以保证并发场景下的数据安全性问题，但是由于锁本身会占用系统资源，所以锁本身会影响到系统的执行效率。MySQL会在锁的开销和数据的安全性之间寻求平衡，这就是所谓的锁策略。</p><p>MySQL最终要的两种锁策略如下：</p><p><strong>表锁（table lock）</strong></p><p>表锁时MySQL中最基本的锁策略，并且是开销最小的策略。在这种策略下，写锁具有比读锁更高的优先级。</p><p><strong>行级锁（row lock）</strong></p><p>行级锁可以最大程度地支持并发处理（同时也带来了最大的锁开销）。</p><h4 id="1-3-事务"><a href="#1-3-事务" class="headerlink" title="1.3 事务"></a>1.3 事务</h4><p>事务就是一组原子性的SQL查询，或者说一个独立的工作单元，即在一个事务内的语句，要么全部执行成功，要么全部执行失败。</p><p>事务本身应该满足ACID原则：</p><p><strong>原子性（atomic）</strong>：要么全部执行成功，要么全部执行失败。<br><strong>一致性（consistency）</strong>：数据库总是从一个一致性状态抓换到另一个一致性状态。<br><strong>隔离性（isolation）</strong>：一个事务所做的修改在最终提交以前，对其它事务是不可见的。<br><strong>持久性（durability）</strong>：一旦事务提交，则其所有的修改就会永久保存到数据库中。</p><h5 id="1-3-1-隔离级别"><a href="#1-3-1-隔离级别" class="headerlink" title="1.3.1 隔离级别"></a>1.3.1 隔离级别</h5><p>对比如下：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190505231000%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.png" alt="image"></p><h6 id="READ-UNCOMMITED（未提交读）"><a href="#READ-UNCOMMITED（未提交读）" class="headerlink" title="READ UNCOMMITED（未提交读）"></a>READ UNCOMMITED（未提交读）</h6><p>事务可以读取未提交的数据，称为脏读（Dirty Read）。性能没有特别大的提升，缺少突出优点。</p><h6 id="READ-COMMMITED（提交读）"><a href="#READ-COMMMITED（提交读）" class="headerlink" title="READ COMMMITED（提交读）"></a>READ COMMMITED（提交读）</h6><p>大多数数据库系统的默认隔离级别就是READ COMMITED（MySQL不是，<a href="https://www.cnblogs.com/vinchen/archive/2012/11/19/2777919.html" target="_blank" rel="noopener">原因：MySQL使用可重复读来作为默认隔离级别的主要原因是语句级的Binlog。RR能提供SQL语句的写可串行化，保证了绝大部分情况（不安全语句除外）的DB/DR一致。</a>）。即一个事务开始时，只能“看见”已经提交的事务所做的修改，也称为不可重复读，因为两次执行同样的查询，可能会得到不一样的结果。</p><h6 id="REPETABLE-READ（可重复读）"><a href="#REPETABLE-READ（可重复读）" class="headerlink" title="REPETABLE READ（可重复读）"></a>REPETABLE READ（可重复读）</h6><p>RC解决了脏读的问题，保证了在同一个事务中多次读取同样的记录是一致的。但是无法解决幻读的问题（Phantom Ready）。所谓幻读是指在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的记录时，会产生幻行（Phantom Row）。</p><h6 id="SERILIZABLE（可串行化）"><a href="#SERILIZABLE（可串行化）" class="headerlink" title="SERILIZABLE（可串行化）"></a>SERILIZABLE（可串行化）</h6><p>最高的隔离级别，通过事务串行化，避免了前面说的幻读问题。</p><h5 id="1-3-2-死锁"><a href="#1-3-2-死锁" class="headerlink" title="1.3.2 死锁"></a>1.3.2 死锁</h5><p>死锁是指两个或者多个事务在统一资源上的相互占用，并请求锁定对方占用的资源。死锁的处理跟存储引擎有关。</p><h5 id="1-3-3-事务日志"><a href="#1-3-3-事务日志" class="headerlink" title="1.3.3 事务日志"></a>1.3.3 事务日志</h5><p>事务日志可以帮助提高事务的效率。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本章该要地描述了MySQL的服务器架构、各种存储引擎之间的主要区别，以及这些区别的重要性。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>java-深入理解Java虚拟机-线程安全与锁优化</title>
    <link href="http://yoursite.com/2019/03/18/java-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2019/03/18/java-深入理解Java虚拟机-线程安全与锁优化/</id>
    <published>2019-03-18T01:08:30.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="13-2-线程安全"><a href="#13-2-线程安全" class="headerlink" title="13.2 线程安全"></a>13.2 线程安全</h3><p>当多个线程访问 一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其它的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象是线程安全的。这是Java Concurrency In Practice一书中作者Brian Goetz对“线程安全”的定义。</p><h4 id="13-2-1-Java语言中的线程安全"><a href="#13-2-1-Java语言中的线程安全" class="headerlink" title="13.2.1 Java语言中的线程安全"></a>13.2.1 Java语言中的线程安全</h4><p>按照线程安全的“安全程度”由强至弱来排序，可以讲Java语言中各种操作共享的数据分为以下5类：不可变、绝对线程安全、相对线程安全、线程兼容和线程对立。</p><p><strong>1.不可变</strong></p><p>在Java API中符合不可变要求的类型，有String类型，final修饰的基本变量，final修饰属性的对象，枚举类，以及java.lang.Number的部分子类，如Long，Double，BigInteger，BigDecimal（其中AtomicInteger和AtomicLong并非是不可变的）</p><p><strong>2.绝对线程安全</strong></p><p>一个类要达到“不管运行时环境如何，调用者都不需要任何额外的同步措施”通常需要付出很大的，甚至有时候是不切实际的代价。在Java API中标注自己是线程安全的类，大多数都不是绝对的线程安全。例如Vector的get()、remove()和size()方法都是同步的，但是在多线程的环境下，如果不在方法调用端坐额外的同步措施的话，使用这段代码仍然是不安全的。因为如果另一个线程恰好在错误的时间里删除了一个元素，当前线程去访问的话会出现ArrayIndexOutOfBoundsException</p><p><strong>3.相对线程安全</strong></p><p>相对线程安全就是我们通常意义上所讲的线程安全，它需要保证这个对象单独的操作是线程安全的，我们在调用的时候不需要做额外的保障措施，但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。</p><p>在Java语言中，大部分的线程安全类都属于这种类型，例如Vector、HashTable、Collection的synchronizedCollection()方法包装的集合等。</p><p><strong>4.线程兼容</strong></p><p>线程兼容是指对象本身并不是线程安全的，但是可以通过调用端正确地使用同步手段来保证对象在并发环境下的安全使用。</p><p>Java API中大部分的类都是属于线程兼容的。</p><p><strong>5.线程对立</strong></p><p>线程对立是指无论调用端是否采取了同步措施，都无法在多线程环境中并发使用的代码。这种现象是少见的，有害的，应当尽量避免。</p><p>一个线程对立的例子就是Thread类的suspend()和resume()方法，如果两个线程同时持有一个对象，一个尝试去中断线程，另一个尝试去恢复线程，并发时，无论是否采取了同步措施，都有可能死锁。常见的线程对立操作还有System.setIn()、System.setOut()和System.runFinalizersOnExit()等。</p><h4 id="13-2-2-线程安全的实现方法"><a href="#13-2-2-线程安全的实现方法" class="headerlink" title="13.2.2 线程安全的实现方法"></a>13.2.2 线程安全的实现方法</h4><p><strong>1.互斥同步（MutualExclusion&amp;Synchronization）</strong></p><p>同步是指在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一个（或者是一些，使用信号量的时候）线程使用。而互斥是实现同步的一种手段，临界区（Critical Section）、互斥量（Mutex）和信号量（Semaphore）都是主要的互斥实现方法。因此，互斥是因，同步是果；互斥是方法，同步是目的。</p><p>Java中，最常见的互斥同步方式是使用synchronized关键字，synchronized关键字编译生成字节码后会在同步块前后分别生成monitorenter和monitorexit两个字节码指令，这两个字节码都需要一个reference类型的参数来指明要锁定和解锁的对象。在Java编程中，如果明确指定了synchronized的对象参数，那就是这个对象的reference；如果没有明确指定，就根据synchronized修饰的是实例方法还是类方法，去取相应的对象实例或Class对象来做为锁对象。</p><p>monitorenter时锁计数器加1，monitoexit时锁计数器减1，计数器为0是锁被释放。如果获取对象锁失败，则当前线程阻塞等待，直到另一个线程释放对象锁。</p><p>在虚拟机规范对monitorenter和monitorexit的行为描述中，有两点需要特别注意：</p><ul><li>同步块对同一条线程时可重入的，不会出现锁死的问题。</li><li>同步块在已进入的线程释放对象锁之前，会阻塞其它线程的进入。</li></ul><p>由于Java的线程都是映射到操作系统的原生线程之上的，如果要阻塞或者唤醒一个线程，都需要操作系统来帮忙完成，需要从用户态切换到核心态，这是一个比较重的操作。</p><p>除了synchronized之外，还可以通过java.util.concurrent包中的重入锁（ReentrantLock）来实现同步，两者基本使用方式一致，只是在代码写法上有点区别，一个表现为API层面的互斥锁（lock()和unlock()方法配合try/finally语句块完成），另一个表现为原生语法层面的互斥锁。相比synchronized，ReentrantLock增加了多项高级功能，主要有如下3个：</p><ul><li>等待可中断：当持有锁的线程长期不释放锁的时候，正在等待的锁可以放弃等待改为处理其它事情。</li><li>公平锁：多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁。可以通过构造参数控制是否使用公平锁。Synchronized是非公平的，抢占式的。</li><li>锁绑定多个条件：一个ReentrantLock对象可以绑定多个Condition对象。Synchronized只能绑定一个条件。</li></ul><p>不过从jdk1.6开始，虚拟机对synchronized优化较多，所以synchronized更适合我们的使用。</p><p><strong>2.非阻塞同步</strong></p><p>互斥同步最主要的问题就是进行线程阻塞和唤醒锁带来的性能问题，这种方式称为阻塞同步（Blocking Synchronization）。互斥同步是一种悲观锁，无论共享数据是否真的会出现竞争，都要进行加锁（这里说的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁）、用户态核心态装换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。</p><p>随着<strong>硬件指令集</strong>的发展，出现了一种基于冲突检测的乐观并发策略。通俗来说，就是先进行操作，等到检测到冲突再采取补偿措施（常见的补偿措施就是不断重试，直到成功），这种同步方式称为非阻塞同步（Non-Blocking Synchronization）。</p><p>乐观并发策略需要“硬件指令集的发展”的原因是，我们需要操作和冲突检测这两个步骤具有原子性。硬件保证一个从语义上看起来需要多次操作的行为只通过一条处理器指令就能完成，这类指令常用的有：</p><ul><li>测试并设置（Test-and-Set）</li><li>获取并增加（Fetch-and-Increment）</li><li>交换（Swap）</li><li>比较并交换（Compare-and-Swap，下文称为CAS）</li><li>加载链接/条件存储（Load-Linked/Store-Conditionl，下文称LL/SC）</li></ul><p>前三条时20世纪就存在于大多数指令集之中的处理器指令，后面两条时现代处理器新增的。</p><p>CAS指令需要三个操作数，分别是内存位置（在Java中可以简单理解为变量的内存地址，用V表示）、旧的预估值（用A表示）和新值（用B表示）。CAS指令执行时，当且仅当V符合旧预期值A时，处理器用新值更新V的值，否则就不执行更新，但是都回返回V的旧值，上述操作时是一个原子过程。</p><p>在Java中使用CAS编译出来的结果是一条与平台相关的处理器CAS指令，没有方法调用的过程，或者可以认为是无条件内联（别虚拟机特殊处理的方法称为固有函数（Intrinsics），类似的还有Math.sin()方法等）进去了。</p><p>CAS还存在一个逻辑漏洞，如果V初次读取的时候是A值，准备赋值的时候还是A值，但是它有可能被多次修改最终改为A值，这个漏洞称为CAS操作的“ABA”问题。一般通过控制变量的版本来保证CAS的正确性，对应的java.util. concurrence中的AtomicStampedReference类。</p><p><strong>3.无同步方案</strong></p><p><strong>可重入代码（Reentrant Code）</strong>这种代码也称为（Pure Code），即一个方法，它的返回结果时可以预测的，输入相同的数据，都能返回相同的结果。</p><p><strong>线程本地存储（Thread Local Storage）</strong>不共享变量，每一个线程都有自己的专享变量，例如ThreadLocal。</p><h3 id="13-3-锁优化"><a href="#13-3-锁优化" class="headerlink" title="13.3 锁优化"></a>13.3 锁优化</h3><p>高效并发是从JDK1.5到JDK1.6的一个重要改进，这个版本有各种锁优化技术，如适应性自旋（Adaptive Spinning）、锁消除（Lock Elimination）、锁粗化（Lock Coarsening）、轻量级锁（Lightweight Locking）和偏向锁（Biased Locking）等。</p><h4 id="13-3-1-自旋锁与自适应自旋"><a href="#13-3-1-自旋锁与自适应自旋" class="headerlink" title="13.3.1 自旋锁与自适应自旋"></a>13.3.1 自旋锁与自适应自旋</h4><p>为了保持处理器执行时间，线程忙循环（自旋），这就是所谓的自旋锁。自旋锁会占用处理器执行时间，因此超过一定次数以后放弃自旋，最开始的时候默认为10次自旋。</p><p>JDK 1.6中引入了自适应的自旋锁，这种情况下考验的是虚拟机对程序锁的状况预测能力，预测能力越好，效率越高。</p><h4 id="13-3-2-锁消除"><a href="#13-3-2-锁消除" class="headerlink" title="13.3.2 锁消除"></a>13.3.2 锁消除</h4><p>锁消除是指虚拟机即使编译器在运行时，对一些代码要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。锁消除的主要判定依据来源于逃逸分析的数据支持。</p><p>比如说字符串拼接的时候调用的concatString方法，内部使用StringBuffer对象的append()方法，append()方法是带锁的，如果分析得出不会逃逸到concatString方法之外，那么锁是可以消除的。</p><h4 id="13-3-3-锁粗化"><a href="#13-3-3-锁粗化" class="headerlink" title="13.3.3 锁粗化"></a>13.3.3 锁粗化</h4><p>通常来说锁的粒度越小越好，但是涉及到循环这种操作的时候，就要将锁粗化，防止反复加锁，释放锁带来的额外性能损失。</p><h4 id="13-3-4-轻量级锁"><a href="#13-3-4-轻量级锁" class="headerlink" title="13.3.4 轻量级锁"></a>13.3.4 轻量级锁</h4><p>轻量级锁时JDK1.6之中加入的新型锁机制，“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的，因此传统的锁机制被称为“重量级”锁。需要强调的一点是，轻量级锁并不是用来代替重量级锁的，它的本意实在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。</p><p>轻量级锁本意是为了减少多线程进入互斥的几率，利用了CPU原语Compare-And-Swap（CAS，汇编指令CMPXCHG），尝试在进入互斥前，进行补偿</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;13-2-线程安全&quot;&gt;&lt;a href=&quot;#13-2-线程安全&quot; class=&quot;headerlink&quot; title=&quot;13.2 线程安全&quot;&gt;&lt;/a&gt;13.2 线程安全&lt;/h3&gt;&lt;p&gt;当多个线程访问 一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>java-深入理解Java虚拟机-Java内存模型与线程</title>
    <link href="http://yoursite.com/2019/03/15/java-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/03/15/java-深入理解Java虚拟机-Java内存模型与线程/</id>
    <published>2019-03-15T00:55:21.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="12-1-概述"><a href="#12-1-概述" class="headerlink" title="12.1 概述"></a>12.1 概述</h3><p>衡量一个服务性能的高低好坏，每秒事务处理数（Transaction Per Second，TPS）</p><h4 id="12-2-硬件的效率与一致性"><a href="#12-2-硬件的效率与一致性" class="headerlink" title="12.2 硬件的效率与一致性"></a>12.2 硬件的效率与一致性</h4><p>下图为处理器、高速缓存、主存之间的交互关系：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190316processor%20Cache%20memory.png" alt=""></p><p>如果存在一个计算任务依赖另外一个计算任务的中间结果，那么其顺序性并不能靠代码的先后顺序来保证，因为为了保证处理器内部的运算单元能够尽量被充分利用，处理器可能会对代码进行乱序执行优化（Our-Of-Order Ececution）。类似的Java虚拟机的即时编译器也有类似的指令重排序（Instruction Reorder）优化。</p><h3 id="12-3-Java内存模型（Java-Memory-Model）"><a href="#12-3-Java内存模型（Java-Memory-Model）" class="headerlink" title="12.3 Java内存模型（Java Memory Model）"></a>12.3 Java内存模型（Java Memory Model）</h3><h4 id="12-3-1-主内存与工作内存"><a href="#12-3-1-主内存与工作内存" class="headerlink" title="12.3.1 主内存与工作内存"></a>12.3.1 主内存与工作内存</h4><p>如下图所示：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190316thread%20main%20memory%20working%20memroy%20.png" alt=""></p><h4 id="12-3-2-内存间交互操作"><a href="#12-3-2-内存间交互操作" class="headerlink" title="12.3.2 内存间交互操作"></a>12.3.2 内存间交互操作</h4><p>Java内存模型中定义了一下8种操作来完成，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的（对于double和long类型的变量来说，load、store、read和write操作在某些平台上允许有例外，见12.3.4）</p><ul><li>lock：作用于主内存的的变量，把一个变量标识为一条线程独占的状态。</li><li>unlock：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read：作用于主内存的变量，把一个变量的值从主内存传输到线程的工作内存中。</li><li>load：作用于工作内存的变量，把read操作从主内存中得到的标量值放入工作内存的变量副本中。</li><li>use：作用于工作内存的变量，把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。</li><li>assign：作用于工作内存的变量，把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时将会执行这个操作。</li><li>store：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用.</li><li>write：作用于主内存的变量，把store操作从工作内存中得到的变量的值放入主内存的变量中。</li></ul><p>Java虚拟机还规定了在执行上述8种基本操作时必须满足如下规则：</p><ul><li>不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者工作内存发起了回写但主内存不接受的情况出现。</li><li>不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。</li><li>不允许一个线程无原因地（最近发生过任何assign操作）把数据从线程的工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量，换句话说，就是对一个变量实施use、store操作之前，必须先执行过了assign和load操作。</li><li>一个变量在同一个时刻只允许一条线程对其执行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li><li>如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或者assign操作初始化变量的值。</li><li>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许区unlock一个被其它线程锁定住的变量。</li><li>对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）</li></ul><h4 id="12-3-3-对于volatile型变量的特殊规则"><a href="#12-3-3-对于volatile型变量的特殊规则" class="headerlink" title="12.3.3 对于volatile型变量的特殊规则"></a>12.3.3 对于volatile型变量的特殊规则</h4><p>关键字volatile可以说是Java虚拟机提供的最轻量级的同步机制。当一个变量定义为volatile之后，它将具备两种特性：</p><ul><li>保证此变量对所有线程可见性，指一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的（常规变量会有一个线程之间的变量同步，所以会存在不同线程之间的值不等的情况）。</li><li>禁止指令重排：不管如何重排序（编译器与处理器为了提高并行度），（单线程环境下，指令执行的最终效果应当与其在顺序执行下的效果一致，否则这种优化便会失去意义。这句话有个专业术语叫做as-if-serial semantics (as-if-serial语义)）程序的结果不能被改变。</li></ul><p>对于volatile变量的可见性，实际上volatile变量在各个线程的工作内存中（在各个线程的工作内存中，volatile变量也可以存在不一致的情况，但由于每次使用之前都要先刷新，执执行引擎看不到不一致的情况，因此可以认为不存在一致性问题），但是Java里面的运算并非原子操作，导致volatile变量的运算在并发下一样是不安全的。</p><p>一条字节码指令可能转化为若干条本地机器码指令，所以一条字节码并不一定代表是原子操作。</p><p>由于volatile变量只能保证可见性，使用场景如下。</p><ul><li>运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。</li><li>变量不需要与其它的状态变量共同参与不变约束。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">volatile boolean shutdownRequested;</span><br><span class="line"></span><br><span class="line">public void shutdown() &#123;</span><br><span class="line">shutdownRequested = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void doWork() &#123;</span><br><span class="line">while(!shutdownRequested) &#123;</span><br><span class="line">//do stuff</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-3-4-对于long和double型变量的特殊规则"><a href="#12-3-4-对于long和double型变量的特殊规则" class="headerlink" title="12.3.4 对于long和double型变量的特殊规则"></a>12.3.4 对于long和double型变量的特殊规则</h4><p>Java内存模型要求lock、unlock、read、load、assign、use、store、write这八个操作都具有原子性，但是对于64位的数据类型（long和double），在模型中特别定义了一条相对宽松的规定：允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位操作来进行，即允许虚拟机实现选择可以不保证64位数据的load、store、read和write这4个操作的原子性。这点就是所谓的long和double的非原子性协定（Nonatomic Treatment of double and long Variables）</p><p>虽然Java内存模型允许虚拟机不把long和double变量的读写实现成原子操作，但是一般虚拟机实现都是原子性操作的，所以编程的时候不用特意把long和double变量申明位volatile。</p><h4 id="12-3-5-原子性、可见性和有序性"><a href="#12-3-5-原子性、可见性和有序性" class="headerlink" title="12.3.5 原子性、可见性和有序性"></a>12.3.5 原子性、可见性和有序性</h4><ul><li>原子性（Atomicity）：变量操作read、load、assign、use、store和write</li><li>可见性（Visibility）：可见性指的当一个线程修改了共享变量的值，其它线程能够立即得知这个修改。volatile的特殊规则保证了值能够立即同步到主内存，以及每次使用前立即从主内存刷新。出了volatile之外，还可以通过synchronized和final让变量可见。同步块的可见性是由“对一个变量执行unlock操作之前，必须把此变量同步回主内存中（执行store、write操作）”这条规则活得的。final关键字的可见性是指：被final修饰的字段在构造器中一旦初始化完成，并且构造器没有把“this”的引用传递出去（this引用逃逸是一件很危险的事情，其它线程有可能通过这个引用访问到“初始化了一半”的对象），那么其它线程中能看见final字段的值。</li><li>有序性（Ordering）：Java内存模型的有序性可以总结为：<strong>如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。</strong>前半句是指“线程内表现为串行的语义”，后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。</li></ul><h4 id="12-3-6-先行发生原则（happens-before）"><a href="#12-3-6-先行发生原则（happens-before）" class="headerlink" title="12.3.6 先行发生原则（happens-before）"></a>12.3.6 先行发生原则（happens-before）</h4><p>在计算机科学中，<a href="https://en.wikipedia.org/wiki/Happened-before" target="_blank" rel="noopener">先行发生</a>关联是指的两个具有先后关系以及后执行者受到前面执行者影响的两个事件之间的先后关系，即使这两个事件被计算器优化以后乱序执行了，他们之间也应该有先执行者后执行者。</p><p>Java语言无需任何同步手段保障就能成立的先行发生规则表现如下几点：</p><ul><li>程序次序执行（Program Order Rule）：在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于后书写的操作。准确的说，应该是控制流顺序而不是程序代码车顺序，因为要考虑分支、循环等结构。</li><li>管程锁定规则（Monitor Lock Rule）：一个unlock操作先行发生于后面对同一个锁的lock操作。这里必须强调的是同一个锁，而“后面”是指时间上的先后顺序。</li><li>volatile变量规则（Volatile Variable Rule）：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”指的是时间上的先后顺序。</li><li>线程启动规则（Thread Start Rule）：Thread对象的start方法先行发生于此线程的每一个动作。</li><li>线程终止规则（Thread Termination Rule）：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值等手段检测到线程已经终止执行。</li><li>线程中断规则（Thread Interruption Rule）：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到终端事件的发生，可以通过Thread.interrupted()方法检测到是否有中断发生。</li><li>对象终结规则（Finalizer Rule）：一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize()方法的开始。</li><li>传递性（Transitivity）：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。</li></ul><h3 id="12-4-Java与线程"><a href="#12-4-Java与线程" class="headerlink" title="12.4 Java与线程"></a>12.4 Java与线程</h3><p>在Java中讨论并发主要是讨论线程级别的实现。</p><h4 id="12-4-1-线程的实现"><a href="#12-4-1-线程的实现" class="headerlink" title="12.4.1 线程的实现"></a>12.4.1 线程的实现</h4><p>线程是比进行更轻量级的调度执行单位，线程的引入，可以把一个进行的资源分配和执行调度分开，各个线程即可以共享进程资源（内存、文件I/O等），又可以独立调度（线程时CPU调度的基本单位）。</p><p>实现线程主要有3种方式：使用内核线程实现、使用用户线程实现和使用用户线程加轻量级进程混合实现。</p><p><strong>1.使用内核线程实现</strong></p><p>内核线程（Kernel Level Thread,KLT）就是直接由操作系统内核（Kernel，下称内核）支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器（Scheduler）对线程进行调度，并负责将线程的任务映射到各个处理器上。每个内核线程可以视作为内核的一个分身，这样操作系统就有能力处理多件事情，支持多线程的内核较多多线程内核（Multi-Threads Kernel）。</p><p>程序一般不会直接去使用内核线程，而是去使用内核线程的一种高级接口—轻量级进程（Light Weight Process，LWP），轻量级进程就是我们通常意义上所讲的线程。如下图所示是轻量级进程与内核线程之间的1：1关系图：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdownLight%20Weight%20Process%20vs%20Kernel-level%20Threa%201%3A1%20relation.png" alt=""></p><p>系统调用的代价相对较高，需要在用户态（User Mode）和内核态（Kernel Mode）中来回切换，同时由于轻量级进程和内核线程1：1的关系，支持的线程数量有限。</p><p><strong>2.使用用户线程实现</strong></p><p>从广义上来讲，一个线程只要只要不是内核线程，就可以认为是用户线程（UT，User Thread），因此，从这个定义上来讲，轻量级进程也属于用户线程，但轻量级进程的实现始终是建立在内核之上的，许多操作都要进行系统的调用，效率会受到限制。</p><p>狭义上的用户线程指的是完全建立在用户空间的线程库上，系统内核不能感知线程存在的实现。用户线程的建立、同步、销毁和调度完全在用户态中完成，不需要内核的帮助。这种进行与用户线程1：N的关系称为一对多的线程模型，如下图所示。</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdownUser%20Thread%20vs%20CPU.png" alt=""></p><p>使用用户线程的优势在于不需要系统内核支援，劣势也在于没有系统内核的支援，所有的线程操作都需要用户程序自己处理。Java、Ruby都曾经使用过用户线程，最终又都放弃使用它。</p><p><strong>3.使用用户线程加轻量级进程混合实现</strong></p><p>线程除了依赖内核线程实现和完全由用户程序自己实现之外，还有一种将内核线程与用户线程一起使用的实现方式。在这种混合模式下，用户线程与轻量级进程的数量比是不一定的，即为N：M的关系，如下图所示：<br><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdownUser%20Thread%20vs%20Light%20Weight%20Process%20N%3AM.png" alt=""></p><p><strong>4.Java线程的实现</strong></p><p>Java线程以Sun JDK来说，它的Windows和Linux版本都是使用的一对一的线程模型实现的，一条Java线程就映射到一条轻量级进程之中，因为Windows和Linux系统提供的线程模型就是一对一的。</p><p>在Solaris平台上可以选择一对一和多对多的线程模型。</p><h4 id="12-4-2-Java线程调度"><a href="#12-4-2-Java线程调度" class="headerlink" title="12.4.2 Java线程调度"></a>12.4.2 Java线程调度</h4><p>线程调度是指系统为线程分配处理器使用权的过程，主要调度方式有两种，分别是协同式线程调度（Cooperative Threads-Scheduling）和抢占式线程调度（Preemptive Threads-Scheduling）。</p><ul><li>协同式线程调度：线程的执行时间由线程本身来控制，线程把自己的工作执行完后主动通知系统进行切换。</li><li>抢占式调度：有系统来分配执行时间，线程的切换不由线程本身来决定（可以通过Thread.yield()让出执行时间，但是没法获取执行时间）。</li></ul><p>抢占式调度可以通过线程优先级“建议”系统给某些线程多分配一点执行时间。但是这个并不太靠谱，优先级可能被系统自行改变。</p><h4 id="12-4-3-状态转化"><a href="#12-4-3-状态转化" class="headerlink" title="12.4.3 状态转化"></a>12.4.3 状态转化</h4><p>Java语言定义了5种线程状态：</p><ul><li>创建（New）：创建后尚未启动的线程处于这种状态。</li><li>运行（Runnable）：包括了操作系统线程状态中的Running和Ready，也就是处于这种状态的线程可能正在执行，也可能正在等待CPU为它分配执行时间。</li><li>无限期等待（Waiting）：不会被分配CPU时间，需要被其他线程显示地唤醒。以下方法会让线程先入无限期等待状态：<ul><li>没有设置Timeout参数的Object.wait()方法。</li><li>没有设置Timeout参数的Thread.join()方法。</li><li>LockSupport.park()方法。</li></ul></li><li>限期等待（Timed Waiting）：不会被分配CPU执行时间，不过无需等待被其他线程显示地唤醒，在一定时间之后他们会由系统自动唤醒。以下方法会让线程进入限期等待状态：<ul><li>Thread.sleep()。</li><li>设置Timeout参数的Object.wait()方法。</li><li>设置Timeout参数的Thread.join()方法。</li><li>LockSupport.parkNanos()方法。</li><li>LockSupport.parkUntil()方法。</li></ul></li><li>阻塞（Blocked）：线程被阻塞了，“阻塞状态”与“等待状态”的区别是：“阻塞状态”在等待着获取到一个排它锁，这个事件将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时间，或者唤醒动作的发生。</li><li>结束（Terminated）：已终止线程的线程状态，线程已经结束执行。</li></ul><p>线程状态的转换图如下所示：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdownThread%20State%20.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;12-1-概述&quot;&gt;&lt;a href=&quot;#12-1-概述&quot; class=&quot;headerlink&quot; title=&quot;12.1 概述&quot;&gt;&lt;/a&gt;12.1 概述&lt;/h3&gt;&lt;p&gt;衡量一个服务性能的高低好坏，每秒事务处理数（Transaction Per Second，TPS）&lt;
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>java-深入理解Java虚拟机-垃圾收集器</title>
    <link href="http://yoursite.com/2019/03/14/java-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>http://yoursite.com/2019/03/14/java-深入理解Java虚拟机-垃圾收集器/</id>
    <published>2019-03-14T04:33:20.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3-5-垃圾收集器"><a href="#3-5-垃圾收集器" class="headerlink" title="3.5 垃圾收集器"></a>3.5 垃圾收集器</h3><p>Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定。如下图所示是HotSpot虚拟机包含的所有垃圾收集器：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190314hotspot%20jvm%20garbage%20collections.png" alt=""></p><p>图3-5展示了7种作用于不同分代的收集器，连线代表收集器可以搭配使用，所处区域代表时属于新生代还是老年带的收集器。</p><p>概念：</p><p>并行（Parallel）指多条垃圾收集线程并行工作，用户线程仍然处于等待状态。<br>并发（Concurrent）指用户线程与垃圾收集线程同时执行（但并不一定时并行的，可能会交替执行），用户程序在继续运行，而垃圾收集程序运行于另一个CPU上</p><h4 id="3-5-1-Serial收集器"><a href="#3-5-1-Serial收集器" class="headerlink" title="3.5.1 Serial收集器"></a>3.5.1 Serial收集器</h4><p>Serial收集器只会使用一个CPU或一条收集线程去完成垃圾收集工作，且垃圾收集时，必须暂停其他工作线程。如下所示时Serial/Serial Old收集器的运行过程：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190314Serial%20Serial%20Old.png" alt=""></p><p>Serial时虚拟机运行在Client模式下的默认新生代收集器。它的优势在于：简单而高效（与其它收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可活得最高效的单线程收集效率。</p><h4 id="3-5-2-ParNew收集器"><a href="#3-5-2-ParNew收集器" class="headerlink" title="3.5.2 ParNew收集器"></a>3.5.2 ParNew收集器</h4><p>ParNew收集器起始就是Serial收集器的多线程版本。如下图所示是ParNew收集器的工作过程：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190314ParNew.png" alt=""></p><p>ParNew收集器时徐都运行在Server模式下的虚拟机中首选的新生代收集器，主要是因为只有它能与CMS收集器配合工作。</p><h4 id="3-5-3-Parallel-Scavenge收集器"><a href="#3-5-3-Parallel-Scavenge收集器" class="headerlink" title="3.5.3 Parallel Scavenge收集器"></a>3.5.3 Parallel Scavenge收集器</h4><p>Parallel Scavenge收集器是一个新生代使用复制算法的收集器， Parallel Scavenge收集的特点是它的关注点与其它收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目的则是达到一个可控制的吞吐量（Throughput）。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总耗时的比值。</p><h4 id="3-5-4-Serial-Old收集器"><a href="#3-5-4-Serial-Old收集器" class="headerlink" title="3.5.4 Serial Old收集器"></a>3.5.4 Serial Old收集器</h4><p>Serial Old是Serial收集器的老年代版本，同样是一个是哦那个“标记-整理”算法的单线程收集器。这个收集器的主要意义也是在于给Client模式下的虚拟机使用。</p><h4 id="3-5-5-Parallel-Old收集器"><a href="#3-5-5-Parallel-Old收集器" class="headerlink" title="3.5.5 Parallel Old收集器"></a>3.5.5 Parallel Old收集器</h4><p>Parallel Old是Parallel Scavenge收集器的老年带版本，使用多线程和“标记-整理”算法。</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown201903142Parallel%20Scavenge%20%2B%20Parallel%20Old.png" alt=""></p><h4 id="3-5-6-CMS收集器（Concurrent-Mark-Sweep）"><a href="#3-5-6-CMS收集器（Concurrent-Mark-Sweep）" class="headerlink" title="3.5.6 CMS收集器（Concurrent Mark Sweep）"></a>3.5.6 CMS收集器（Concurrent Mark Sweep）</h4><p>CMS收集器是一种以获取最短回收停顿时间为目标的，基于“标记-清除”算法收集器。工作过程如下：</p><ul><li>初始标记（CMS initial remark）</li><li>并发标记（CMS Concurrent mark）</li><li>重新标记（CMS remark）</li><li>并发清除（CMD Concurrent sweep）</li></ul><p>其中，初始标记、重新标记这两个步骤任然需要“Stop The World”，如下图所示。整个过程中耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作。所以，从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190314CMS%20Collections.png" alt=""></p><p>CMS的特点：并发收集、低停顿。但是也有如下几个明显的缺点：</p><ul><li>CMS收集器堆CPU资源非常敏感。</li><li>CMS收集器无法处理浮动垃圾（Floating Garbage）。</li><li>“标记-清除”算法实现，会产生大量空间碎片。</li></ul><h4 id="3-5-7-G1收集器（Garbage-First）"><a href="#3-5-7-G1收集器（Garbage-First）" class="headerlink" title="3.5.7 G1收集器（Garbage-First）"></a>3.5.7 G1收集器（Garbage-First）</h4><p>G1是一款面向服务端应用的垃圾收集器，具备如下特点：</p><ul><li>并行与并发</li><li>分代收集</li><li>空间整合</li><li>可预测的停顿</li></ul><p>G1收集器的运作大致可分为以下几个步骤：</p><ul><li>初始标记（Initial Marking）</li><li>并发标记（Concurrent Marking）</li><li>最终标记（Final Marking）</li><li>筛选回收（Live Data Counting and Evacutaion）</li></ul><p>示意图如下：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190314G1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;3-5-垃圾收集器&quot;&gt;&lt;a href=&quot;#3-5-垃圾收集器&quot; class=&quot;headerlink&quot; title=&quot;3.5 垃圾收集器&quot;&gt;&lt;/a&gt;3.5 垃圾收集器&lt;/h3&gt;&lt;p&gt;Java虚拟机规范中对垃圾收集器应该如何实现并没有任何规定。如下图所示是HotSpo
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>java-深入理解Java虚拟机-垃圾回收器与内存分配策略</title>
    <link href="http://yoursite.com/2019/03/13/java-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2019/03/13/java-深入理解Java虚拟机-垃圾回收器与内存分配策略/</id>
    <published>2019-03-13T00:49:19.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>Java内存运行时各区域的各个部分都有各自的回收机制，其中程序计数器、虚拟机栈、本地方法栈随线程创建而创建，销毁而销毁；栈中的栈帧随着方法的进入和退出而有条不紊的执行者出栈和入栈操作。因此，这一部分不需要过多考虑垃圾回收问题。</p><h4 id="3-2-1-引用计数法（Reference-Counting）"><a href="#3-2-1-引用计数法（Reference-Counting）" class="headerlink" title="3.2.1 引用计数法（Reference Counting）"></a>3.2.1 引用计数法（Reference Counting）</h4><p>给对象添加一个引用计数器，当有一个地方引用它时计数器加一；当引用失效的时候，计数器减一。当引用数量为零时，则认为对象是可以回收的。</p><p>引用计数器存在的相互引用的问题。</p><h4 id="3-2-2-可达性分析算法（Reachability-Analysis）"><a href="#3-2-2-可达性分析算法（Reachability-Analysis）" class="headerlink" title="3.2.2 可达性分析算法（Reachability Analysis）"></a>3.2.2 可达性分析算法（Reachability Analysis）</h4><p>通过可达性分析来判断对象是否存活。这个算法的思路就是通过一系列的成为”GC Roots”的对象做为起始点，从这些借点开始向下所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链的时候，则认为这个对象可以回收。</p><p>在Java语言中，可作为GC Roots的对象包括下面几种：</p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li><li>方法区中静态属性引用的对象。</li><li>方法区中常量引用的对象。</li><li>本地方法栈中JNI（一般说的Native方法）引用的对象。</li></ul><h4 id="3-2-3-再谈引用"><a href="#3-2-3-再谈引用" class="headerlink" title="3.2.3 再谈引用"></a>3.2.3 再谈引用</h4><p>在Java中引用分为强引用，软引用，弱引用，虚引用。</p><ul><li>强引用（Strong Reference）是通过new创建的引用，只要强引用还存在，垃圾回收器永远不会回收掉被引用的对象。</li><li>软引用（Soft Reference）用来描述一些还有用但是并非必须的对象。对于软引用关联着的对象，在系统发生内存溢出异常之前，将会把这些对象回收列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才回抛出内存溢出异常。</li><li>弱引用（Weak Reference）也是用来描述非必须对象的，但是它的强度比软引用更弱一些，无论当前内存是否足够，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。</li><li>虚引用（Phantom Reference）也被成为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间产生影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是在对象被垃圾回收器回收的时候收到一个系统通知。</li></ul><h4 id="3-2-4-生存还是死亡"><a href="#3-2-4-生存还是死亡" class="headerlink" title="3.2.4 生存还是死亡"></a>3.2.4 生存还是死亡</h4><p>即使在可达性分析算法中不可达的对象，也并非是“非死不可”的，这时候他们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：</p><ul><li>如果对象在进行可达性分析后发现没有与GC Roots相链接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。当对象没有覆盖finalize()方法，或者finalize()已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”，直接进行回收。</li><li>如果这个对象被判定为有必要执行finalize()方法，那么对象将会放置在一个叫做F-Queue的队列之中，并在稍后由一个由虚拟机自动建立的，低优先级的Finalizer线程区执行它（虚拟机会触发该方法，单不承诺执行完成）。finalize()是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象在finalize()中成功拯救自己-只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或者对象的成员变量，那么在第二次标记时它将被移出“即将回收”的集合。</li></ul><h4 id="3-2-5-回收方法区"><a href="#3-2-5-回收方法区" class="headerlink" title="3.2.5 回收方法区"></a>3.2.5 回收方法区</h4><p>永久带的垃圾收集主要回收两个部分内容：废弃常量和无用的类。废弃常量的回收跟堆中的对象类似，常量不再被引用的时候可以回收。无用的类判断能否回收的条件则苛刻许多    </p><ul><li>该类所有的实例都已经被回收，也就是在Java堆中不存在该类的任何实例。</li><li>加载该类的ClassLoader已经被回收。</li><li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过放射访问该类的方法。</li></ul><p>虚拟机可以对满足上述3个条件的无用类进行回收，但并不是和对象一样，不适用了就进行回收。这个是通过一系列的jvm配置进行设置的。</p><h3 id="3-3-垃圾回收算法"><a href="#3-3-垃圾回收算法" class="headerlink" title="3.3 垃圾回收算法"></a>3.3 垃圾回收算法</h3><h4 id="3-3-1-标记-清除算法（Mark-Sweep）"><a href="#3-3-1-标记-清除算法（Mark-Sweep）" class="headerlink" title="3.3.1 标记-清除算法（Mark-Sweep）"></a>3.3.1 标记-清除算法（Mark-Sweep）</h4><p>最基础的收集算法时“标记-清除”，首先标记需要回收的对象，然后统一回收所有被标记的对象。它的不足由以下两点：</p><ul><li>效率问题：标记和清除的两个过程效率都不高</li><li>空间问题：清除对象以后的内存空间时不连续的，当要分配较大对象的时候，如果找不到足够大的单块内存分配，就需要提前促发对象回收动作。</li></ul><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190313mark-sweep.png" alt=""></p><h4 id="3-3-2-复制算法"><a href="#3-3-2-复制算法" class="headerlink" title="3.3.2 复制算法"></a>3.3.2 复制算法</h4><p>为了解决标记-清除散发的效率不足问题，复制算法应运而生。它将内存分为大小相等的两块，每次使用其中的一块。当这一块的内存用完了，就把还存活的对象复制到另一半，然后将已经使用过得内存块这一半一次性清理掉。这种方式实现简单，也不会有内存碎片的问题。只是这种算法浪费了一半的内存空间做为备用。</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190313coping.png" alt=""></p><p>现在的商业虚拟机都采用这种收集算法来回收新生代，新生代中的98%的对象都是“朝生夕死”的，所以并不需要按照1：1的比例来划分内存空间。而是按照<strong>Eden:%80  From Survivor:10% To Survivor:10%分配</strong>，每次使用Eden和一块Survivor空间。内存回收的时候将存活着的Eden空间和Survivor空间的对象一次性复制到另一块Survivor空间中，这样子，就只有10%的一块Survivor空间被浪费掉了。当然也有可能内存回收的时候存活的对象占用的内存空间超过了10%，这个时候就需要其他内存（老年带）进行分配担保（Handle Promotion）；</p><h4 id="3-3-3-标记-整理算法（Mark-Compact）"><a href="#3-3-3-标记-整理算法（Mark-Compact）" class="headerlink" title="3.3.3 标记-整理算法（Mark-Compact）"></a>3.3.3 标记-整理算法（Mark-Compact）</h4><p>复制算法适合对象存活率较低的场景，所以老年带一般不能直接选用这种算法。根据老年带的特点，有人提出了另一种“标记-整理”算法，标记过程任然与“标记-清除”算法一样，但后续步骤不是直接对对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉边界以外的内存。 </p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190313mark-compact.png" alt=""></p><h4 id="3-3-4-分代收集算法（Generational-Collection）"><a href="#3-3-4-分代收集算法（Generational-Collection）" class="headerlink" title="3.3.4 分代收集算法（Generational Collection）"></a>3.3.4 分代收集算法（Generational Collection）</h4><p>当前商业虚拟机的垃圾收集都采用“分代收集”算法。在新生代中，每次垃圾收集都发现由大量对象死去，只有少量存活，适用复制算法。 老年带对象存活率高、没有额外空间进行担保，适合“标记-清除”或者“标记-整理”算法来进行回收。</p><h3 id="3-4-HotSpot的算法实现（看不懂这一章）"><a href="#3-4-HotSpot的算法实现（看不懂这一章）" class="headerlink" title="3.4 HotSpot的算法实现（看不懂这一章）"></a>3.4 HotSpot的算法实现（看不懂这一章）</h3><h4 id="3-4-1-枚举根节点"><a href="#3-4-1-枚举根节点" class="headerlink" title="3.4.1 枚举根节点"></a>3.4.1 枚举根节点</h4><p>以可达性分析从GC Roots节点找引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如栈帧中的本地变量表）中。</p><p>可达性分析过程中必须冻结整个执行系统才能保证分析过程中不会出现对象引用关系变化，正是因为这个GC进行时必须停顿所有Java执行线程（Sun将这件事情成为“Stop-The-World”），即使在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</p><p>由于目前的主流Java虚拟机使用的都是准确式GC（虚拟机可以知道内存中某个位置的数据具体是什么类型），所以当执行系统停顿下来后，并不需要一个不漏得检查完所有执行上下文和全局的引用位置，虚拟机应当是有办法直接得知哪些地方存放着对象引用。在HotSpot的实现中，是使用一组成为OopMap的数据结构来达到这个目的的，在类加载完成的时候，HotSpot就把对象内什么偏移量上是什么类型的数据计算出来，在JIT编译过程中，也会在特定的位置记录下栈和寄存器中哪些位置是引用。这样，GC在扫描时就可以直接得知这些信息了。</p><h4 id="3-4-2-安全点（Safepoint）"><a href="#3-4-2-安全点（Safepoint）" class="headerlink" title="3.4.2 安全点（Safepoint）"></a>3.4.2 安全点（Safepoint）</h4><p>在OopMap的协助下，HotSpot可以快速且准确地完成GC Roots枚举。OopMap内容变化的指令非常多，如果为每一条指令生成对应的OopMap，将会需要大量的额外空间，这样GC的空间成本将对变得很高。</p><p>程序并不是在所有地方都能停下来GC，只有在到达安全点（Safepoint）时才能暂停。安全点地选定既不能太少以至于让GC等待时间太长，也不能国语频繁以至于过分增大运行时地负荷。所以，安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准选定地。“长时间执行”的最明显特征就是指令序列复用，例如方法调用、循环跳转、异常跳转等等。</p><p>对于安全点还有一个问题是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。有如下两种方案：</p><ul><li>抢先式中断（Preemptive Suspension）</li><li>主动式中断（Voluntary Suspension）</li></ul><p>其中抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件。</p><p>而主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅是简单的设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志时就自己主动中断挂起。轮询标志的地方和安全点时重合的。当需要暂停线程时，虚拟机把内存页设置为不可读，线程执行到内存中该汇编指令时就会产生一个自陷异常新号，在预先注册的异常处理器中暂停线程实现等待，这样一条汇编指令便完成安全点轮询和触发线程中断。</p><h4 id="3-4-3-安全区域（Safe-Region）"><a href="#3-4-3-安全区域（Safe-Region）" class="headerlink" title="3.4.3 安全区域（Safe Region）"></a>3.4.3 安全区域（Safe Region）</h4><p>安全点似乎完美解决了如何进入GC的问题，但是安全点只保证了程序在不太长的时间内就会遇到可进入GC的安全点。但是如果线程处于Sleep或者Blocked状态，这时候线程无法响应JVM的中断请求。这种情况下，就需要安全区域来解决。</p><p>安全区域是指在一段代码片段之中，引用关系变化不会发生变化。在这个区域中的任意地方开始GC都是安全的，可以理解为安全点的扩展。</p><p>在线程执行到安全区域中的代码时，首先标志自己已经进入了安全区域，那样，当在这段时间里JVM要发起GC时，就不用管标识自己为安全区域状态的线程了。在线程要离开安全区域时，它要检查系统是否已经完成了根节点枚举（或者整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待知道收到可以安全离开安全区域的信号为止。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;3-1-概述&quot;&gt;&lt;a href=&quot;#3-1-概述&quot; class=&quot;headerlink&quot; title=&quot;3.1 概述&quot;&gt;&lt;/a&gt;3.1 概述&lt;/h3&gt;&lt;p&gt;Java内存运行时各区域的各个部分都有各自的回收机制，其中程序计数器、虚拟机栈、本地方法栈随线程创建而创建，
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>java-深入理解Java虚拟机-对象的创建,内存布局,访问定位</title>
    <link href="http://yoursite.com/2019/03/11/java-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA-%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80-%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/"/>
    <id>http://yoursite.com/2019/03/11/java-深入理解Java虚拟机-对象的创建-内存布局-访问定位/</id>
    <published>2019-03-11T13:07:38.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2-3-1-对象的创建"><a href="#2-3-1-对象的创建" class="headerlink" title="2.3.1. 对象的创建"></a>2.3.1. 对象的创建</h4><p>对象的创建主要过程包含了类加载检查、对象内存分配、并发处理、内存空间初始化、对象设置、执行init方法等。主要流程如下：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190311214054.png" alt=""></p><h5 id="1-类加载检查"><a href="#1-类加载检查" class="headerlink" title="1. 类加载检查"></a>1. 类加载检查</h5><p>虚拟机遇到一条new指令时，首先讲去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，则首先要执行相应的类加载过程。</p><h5 id="2-分配内存"><a href="#2-分配内存" class="headerlink" title="2. 分配内存"></a>2. 分配内存</h5><p>对象所需内存的大小在类加载完成后便可完全确定（对象的内存布局），为对象分配空间的任务等同于把一块确定大小的内存从java堆中划分出来。 </p><p>根据堆中的内存是否规整（选用哪种方式取决于Java堆是否规整，而Java堆是否规整取决于jvm采用的内存收集器是否有compact功能）分两种内存分配方式：</p><ul><li><strong>指针碰撞（Bump the Pointer）</strong> 假设Java堆中的内存是绝对规整的，所有用过的内存都放在一边，空闲的放在一边，中间放着一个指针做为分界点的指示器，那分配内存就是把这个指针向空闲空间移动分配的内存大小的距离。</li><li><strong>空闲列表（Free List）</strong> Java堆中的内存不连续的情况下，jvm维护一个列表，记录哪些内存空间可用，哪些内存空间不可用。当进行内存分配的时候，在空闲列表中找一块空间足够大的内存块分配内存。</li></ul><h5 id="3-并发处理"><a href="#3-并发处理" class="headerlink" title="3. 并发处理"></a>3. 并发处理</h5><p>对象创建在虚拟机是一个非常频繁的行为，即使是只修改一个指针的位置，在并发情况下也并不是线程安全的，可能出现正在给A对象分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况。解决这个问题有两种方案：</p><ul><li><strong>同步</strong> 对内存分配的动作进行同步处理–实际上虚拟机采用CAS配置失败重试的方式保证更新操作的原子性。</li><li><strong>本地线程分配缓冲(Thread Local Allocation Buffer)</strong> 把内存分配的动作按照线程划分在不同的空间之中进行。即每个线程在Java堆中预先分配一小块内存。哪个线程需要分配内存，就在那个线程的TLAB上分配，只有当TLAB的空间不足的重新分配TLAB的时候才需要线程同步锁定。jvm配置参数-XX:+/-UseTLAB</li></ul><h5 id="4-内存空间初始化"><a href="#4-内存空间初始化" class="headerlink" title="4. 内存空间初始化"></a>4. 内存空间初始化</h5><p>虚拟机将分配到的内存空间初始化为零值（不包括对象头），如果使用TLAB，这一过程也可以提前至TLAB分配时进行。</p><p>这一过程可以让对象在使用的时候不用赋值就可以使用。</p><h5 id="5-对象设置"><a href="#5-对象设置" class="headerlink" title="5. 对象设置"></a>5. 对象设置</h5><p>虚拟机对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分带年龄等信息。这些信息存放在对象头中。</p><h5 id="6-对象init"><a href="#6-对象init" class="headerlink" title="6. 对象init()"></a>6. 对象init()</h5><p>从虚拟机的角度来看，对象已经产生了。从Java角度来看，对象的创建才刚刚开始-init()方法还没有执行，对象的所有字段都还是零值。</p><p>所以，一般来说由字节码是否跟随invokespecial指令所决定，执行new指令之后会接着执行init方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才选完全产生出来。</p><h4 id="2-3-2-对象的内存布局"><a href="#2-3-2-对象的内存布局" class="headerlink" title="2.3.2. 对象的内存布局"></a>2.3.2. 对象的内存布局</h4><p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Object Head）、实例数据（Instance Data）和对齐填充（Padding）。</p><h5 id="1-对象头"><a href="#1-对象头" class="headerlink" title="1. 对象头"></a>1. 对象头</h5><p>HotSpot虚拟机的对象头包含两部分信息： </p><h6 id="1-存储对象运行时数据"><a href="#1-存储对象运行时数据" class="headerlink" title="1. 存储对象运行时数据"></a>1. 存储对象运行时数据</h6><p>哈希码、GC分代年龄、锁状态标志、线程所持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位虚拟机（未开启<a href="https://wiki.openjdk.java.net/display/HotSpot/CompressedOops" target="_blank" rel="noopener">压缩指针1</a>，<a href="http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/oops/markOop.hpp" target="_blank" rel="noopener">指针压缩2</a>）中分别为32bit和64bit，官方称他为Mark Word。</p><h6 id="2-类型指针"><a href="#2-类型指针" class="headerlink" title="2. 类型指针"></a>2. 类型指针</h6><p>类型指针，即对象指向它的<a href="https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener">类元数据</a>的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><p>并不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身。(句柄方式访问对象的话是通过类型数据指针来查找的)</p><p>如果对象是一个Java数组，对象头中还存有记录数组长度的数据，因为虚拟机可以通过普通Java对象的元数据信息确定Java对象的大小，但是从数组的元数据中无法确定数组的大小</p><h5 id="2-实例数据"><a href="#2-实例数据" class="headerlink" title="2. 实例数据"></a>2. 实例数据</h5><p>实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无论从父类继承而来或者在子类中定义的，都需要记录起来。这部分的存储顺序会收到虚拟机的分配策略参数（FieldsAllocationStyle）和字段在Java源码中定义的顺序的影响。HotSpot虚拟机默认的分配策略位longs/doubles、ints、shorts/chars、bytes、booleans、oops（Ordinary Object Pointers），从分配策略来看，相同宽度的字段总是分配到一起。在满足这个前提条件的情况下，在父类中定义的变量回出现在种类之前。如果CompactFiles参数值位true（默认为true），那么子类中较窄的变量也可能回插入到父类的变量空隙之中。</p><h5 id="3-填充数据"><a href="#3-填充数据" class="headerlink" title="3. 填充数据"></a>3. 填充数据</h5><p>起到占位符的作用，由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换而言之对象的大小必须是8字节的整数倍。而对象头刚好是8字节的整数倍（1倍或者2倍）。因此，当对象的实例数据不是8字节的整数倍的时候，需要通过填充数据来补全。</p><h4 id="2-3-3-对象的访问定位"><a href="#2-3-3-对象的访问定位" class="headerlink" title="2.3.3. 对象的访问定位"></a>2.3.3. 对象的访问定位</h4><p>Java程序通过栈上面的reference数据来确定使用的具体对象。由于reference类型在Java虚拟机中只规定了一个指向对象的引用，并没有定义这个引用通过何种方式去定位、访问堆中的对象的具体位置，所以对象的访问方式也是取决于虚拟机的实现而定的。目前主流的访问方式有使用句柄和直接内存指针两种。</p><ul><li>使用句柄的方式访问，那么Java堆中将会划分一块内存做为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息。如下图所示：</li></ul><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190312%E5%8F%A5%E6%9F%84%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1.png" alt=""></p><ul><li>使用直接指针访问，那么Java堆对象的布局中就必须考虑如何防止访问数据类型数据的相关信息，而reference中存储的直接就是对象地址。</li></ul><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190312%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88%E8%AE%BF%E9%97%AE%E5%AF%B9%E8%B1%A1.png" alt=""></p><p>这两种对象的访问方式各有优势，使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动（垃圾回收时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要修改。</p><p>使用直接指针访问的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常平凡，因此这类开销积少成多也是一项非常可观的执行成本。Sun Hotspot采用的就是直接指针访问的方式，但是从真个软件开发范围来看，使用句柄的方式十分常见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;2-3-1-对象的创建&quot;&gt;&lt;a href=&quot;#2-3-1-对象的创建&quot; class=&quot;headerlink&quot; title=&quot;2.3.1. 对象的创建&quot;&gt;&lt;/a&gt;2.3.1. 对象的创建&lt;/h4&gt;&lt;p&gt;对象的创建主要过程包含了类加载检查、对象内存分配、并发处理、内存
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
      <category term="对象" scheme="http://yoursite.com/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>homebrew更新阿里源</title>
    <link href="http://yoursite.com/2019/03/08/homebrew%E6%9B%B4%E6%96%B0%E9%98%BF%E9%87%8C%E6%BA%90/"/>
    <id>http://yoursite.com/2019/03/08/homebrew更新阿里源/</id>
    <published>2019-03-08T13:54:20.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="替换为阿里源"><a href="#替换为阿里源" class="headerlink" title="替换为阿里源"></a>替换为阿里源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 替换brew.git:</span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git</span><br><span class="line"># 替换homebrew-core.git:</span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git</span><br><span class="line"># 应用生效</span><br><span class="line">brew update</span><br><span class="line"># 替换homebrew-bottles:</span><br><span class="line">echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&apos; &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><h4 id="还原为官方源"><a href="#还原为官方源" class="headerlink" title="还原为官方源"></a>还原为官方源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 重置brew.git:</span><br><span class="line">cd &quot;$(brew --repo)&quot;</span><br><span class="line">git remote set-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"># 重置homebrew-core.git:</span><br><span class="line">cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</span><br><span class="line">git remote set-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line">#删除zshrc HOMEBREW_BOTTLE_DOMAIN内容</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;替换为阿里源&quot;&gt;&lt;a href=&quot;#替换为阿里源&quot; class=&quot;headerlink&quot; title=&quot;替换为阿里源&quot;&gt;&lt;/a&gt;替换为阿里源&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="homebrew" scheme="http://yoursite.com/tags/homebrew/"/>
    
      <category term="阿里源" scheme="http://yoursite.com/tags/%E9%98%BF%E9%87%8C%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>java-深入理解Java虚拟机-Java内存区域与内存溢出异常</title>
    <link href="http://yoursite.com/2019/03/07/java-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2019/03/07/java-深入理解Java虚拟机-Java内存区域与内存溢出异常/</id>
    <published>2019-03-07T14:21:36.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2-2-运行时数据区域-Java-VM-runtime-data-areas"><a href="#2-2-运行时数据区域-Java-VM-runtime-data-areas" class="headerlink" title="2.2 运行时数据区域(Java VM runtime data areas)"></a>2.2 运行时数据区域(Java VM runtime data areas)</h4><p> Java虚拟机在执行Java程序的过程中会把它管理的内存划分位若干个不同的数据区域，这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而简历和销毁。如下图所示，Java运行时数据区域分为以下几个部分：</p><p> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190312jvm-runtime-data-area.png" alt=""></p><h5 id="2-2-1-程序计数器-Program-Counter-Register"><a href="#2-2-1-程序计数器-Program-Counter-Register" class="headerlink" title="2.2.1  程序计数器(Program Counter Register)"></a>2.2.1  程序计数器(Program Counter Register)</h5><p>程序计数器是一块较小的内存空间，可以看做当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器完成。</p><p>由于Java虚拟机的多线程是通过线程切换cpu时间片实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要一个独立的PC计数器，各个线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空（Undefined）。此区域内存是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p><h5 id="2-2-2-Java虚拟机栈（Java-VIrtual-Machine-Stacks）"><a href="#2-2-2-Java虚拟机栈（Java-VIrtual-Machine-Stacks）" class="headerlink" title="2.2.2 Java虚拟机栈（Java VIrtual Machine Stacks）"></a>2.2.2 Java虚拟机栈（Java VIrtual Machine Stacks）</h5><p>于PC counter一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同事回创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p><p>虚拟机栈中的局部变量表存放了编译期可知的各种功能基本数据类型（boolean、byte、char、int、short、long、double、float)、对象引用（reference类型，它不等通于对象本身，可能是一个指向对象起始地址的引用指针，也可能是只想一个代表对象的句柄或其他与此对象相关的位置）和returnAddress（只想了一条字节码指令的地址）。</p><p>在Java虚拟机规范中，对这个区域规定了两种异常情况：</p><ul><li>StackOverflowError 线程请求的虚拟机栈深度大于虚拟机所允许的最大深度。</li><li>OutOfMemoryError 如果虚拟机栈可以动态扩展，扩展时无法申请到足够的内存的时候。</li></ul><h5 id="2-2-3-本地方法栈（Native-Method-Stacks）"><a href="#2-2-3-本地方法栈（Native-Method-Stacks）" class="headerlink" title="2.2.3 本地方法栈（Native Method Stacks）"></a>2.2.3 本地方法栈（Native Method Stacks）</h5><p>本地方法栈和虚拟机栈所发挥的作用非常相似的，他们之间的区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈为虚拟机使用到的Native方法服务。同样的本地方法栈也会抛出StackOverflowError和OutOfMemoryError。</p><h5 id="2-2-4-Java堆（Java-Heap）"><a href="#2-2-4-Java堆（Java-Heap）" class="headerlink" title="2.2.4 Java堆（Java Heap）"></a>2.2.4 Java堆（Java Heap）</h5><p>对于大多数应用来说，Java堆是Java虚拟机所管理的内存中最大的一块。Java堆是线程共享的一块内存区域，在虚拟机启动时创建。</p><p>此区域的唯一目的就是存放对象实例，在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配，但是随着JIT（Just-In-Time）编译器的反战和逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么绝对了。</p><p>Java堆是垃圾回收器管理的主要区域，Java堆垃圾回收采用分代收集算法，该区域的划分和虚拟机配置参数如下，分为两大块Young Generation和Old Generation，Permanent Generation属于接下来要讲的方法区。而Young Generation又可以细分为Eden（伊甸区）、From Survivor、To Survivor区。</p><p><img src="https://github.com/jacentsao/picbed/blob/master/img/markdownJava%20Heap%20Construction.gif?raw=true" alt=""></p><h5 id="2-2-5-方法区（Method-Area）"><a href="#2-2-5-方法区（Method-Area）" class="headerlink" title="2.2.5 方法区（Method Area）"></a>2.2.5 方法区（Method Area）</h5><p>方法区也是线程共享的内存区域，他用于存储已被Java虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法去描述为堆的一个逻辑部分，但是它有一个别名叫做非堆（Non-Heap），目的应该是与Java堆区分开来。</p><p>方法区又被称之为永久带（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说使用永久带来实现方法区而已。这样HotSpot的垃圾收集器就可以像管理Java堆一样管理这部分内存，省去专门为方法区开发内存管理代码的工作。对于其它虚拟机来说不存在方法区。</p><p>在jdk1.8之前，永久带在虚拟机运行时数据区域的分块如下：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190312jdk1.7jvm-runtime-data-area.png" alt=""></p><p>在jdk1.8时，永久带被合并至Metaspace，如下所示：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20190312jdk1.8%20jvm%20runtime%20data%20area%20.png" alt=""></p><p>根据Java虚拟机规范的规定，当方法区无法满足内存分配的需求时，将抛出OutOfMemoryError异常。</p><h5 id="2-2-6-运行时常量池（Runtime-Constant-Pool）"><a href="#2-2-6-运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="2.2.6 运行时常量池（Runtime Constant Pool）"></a>2.2.6 运行时常量池（Runtime Constant Pool）</h5><p>运行时常量池时方法区的一部分，受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p><h5 id="2-2-7-直接内存（Direct-Memory）"><a href="#2-2-7-直接内存（Direct-Memory）" class="headerlink" title="2.2.7 直接内存（Direct Memory）"></a>2.2.7 直接内存（Direct Memory）</h5><p>直接内存并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。由于此区域也可能导致OutOfMemoryError异常，故放在一起讲解。</p><p>在JDK1.4中心加入了NIO(New Input Output)类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/0方式，他可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象做为这块内存的引用操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p><p>该区域收到本机总内存大小以及处理器寻址控件的限制，动态扩展时如果申请不到内存会出现OutOfMemoryError异常。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;2-2-运行时数据区域-Java-VM-runtime-data-areas&quot;&gt;&lt;a href=&quot;#2-2-运行时数据区域-Java-VM-runtime-data-areas&quot; class=&quot;headerlink&quot; title=&quot;2.2 运行时数据区域(Java
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="jvm" scheme="http://yoursite.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>阶段性总结 2016.03-2019.02</title>
    <link href="http://yoursite.com/2019/01/30/%E9%98%B6%E6%AE%B5%E6%80%A7%E6%80%BB%E7%BB%93-2016-03-2019-02/"/>
    <id>http://yoursite.com/2019/01/30/阶段性总结-2016-03-2019-02/</id>
    <published>2019-01-30T03:10:51.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>协程有什么好处</title>
    <link href="http://yoursite.com/2019/01/29/%E5%8D%8F%E7%A8%8B%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84/"/>
    <id>http://yoursite.com/2019/01/29/协程有什么好处/</id>
    <published>2019-01-29T09:52:35.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>引用来源<a href="https://www.zhihu.com/question/20511233/answer/24260355" target="_blank" rel="noopener">知乎，协程的好处有哪些</a>。</p><p>作者：阿猫<br>链接：<a href="https://www.zhihu.com/question/20511233/answer/24260355" target="_blank" rel="noopener">https://www.zhihu.com/question/20511233/answer/24260355</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><ul><li><p>一开始大家想要同一时间执行那么三五个程序，大家能一块跑一跑。特别是UI什么的，别一上计算量比较大的玩意就跟死机一样。于是就有了并发，从程序员的角度可以看成是多个独立的逻辑流。内部可以是多cpu并行，也可以是单cpu时间分片，能快速的切换逻辑流，看起来像是大家一块跑的就行。</p></li><li><p>但是一块跑就有问题了。我计算到一半，刚把多次方程解到最后一步，你突然插进来，我的中间状态咋办，我用来储存的内存被你覆盖了咋办？所以跑在一个cpu里面的并发都需要处理上下文切换的问题。进程就是这样抽象出来个一个概念，搭配虚拟内存、进程表之类的东西，用来管理独立的程序运行、切换。</p></li><li><p>后来一电脑上有了好几个cpu，好咧，大家都别闲着，一人跑一进程。就是所谓的<strong>并行</strong>。</p></li><li><p>因为程序的使用涉及大量的计算机资源配置，把这活随意的交给用户程序，非常容易让整个系统分分钟被搞跪，资源分配也很难做到相对的公平。所以核心的操作需要陷入内核(kernel)，切换到操作系统，让老大帮你来做。</p></li><li><p>有的时候碰着I/O访问，阻塞了后面所有的计算。空着也是空着，老大就直接把CPU切换到其他进程，让人家先用着。当然除了I\O阻塞，还有时钟阻塞等等。一开始大家都这样弄，后来发现不成，太慢了。为啥呀，一切换进程得反复进入内核，置换掉一大堆状态。进程数一高，大部分系统资源就被进程切换给吃掉了。后来搞出<strong>线程</strong>的概念，大致意思就是，这个地方阻塞了，但我还有其他地方的逻辑流可以计算，这些逻辑流是共享一个地址空间的，不用特别麻烦的切换页表、刷新TLB，只要把寄存器刷新一遍就行，能比切换进程开销少点。</p></li><li><p>如果连时钟阻塞、 线程切换这些功能我们都不需要了，自己在进程里面写一个逻辑流调度的东西。那么我们即可以利用到并发优势，又可以避免反复系统调用，还有进程切换造成的开销，分分钟给你上几千个逻辑流不费力。这就是<strong>用户态线程</strong>。</p></li><li><p>从上面可以看到，实现一个用户态线程有两个必须要处理的问题：一是碰着阻塞式I\O会导致整个进程被挂起；二是由于缺乏时钟阻塞，进程需要自己拥有调度线程的能力。如果一种实现使得每个线程需要自己通过调用某个方法，主动交出控制权。那么我们就称这种用户态线程是协作式的，即是协程。</p></li><li><p><strong>本质上协程就是用户空间下的线程</strong>。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;引用来源&lt;a href=&quot;https://www.zhihu.com/question/20511233/answer/24260355&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知乎，协程的好处有哪些&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;作者：阿猫&lt;br&gt;链接：
      
    
    </summary>
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>云游四方-大理-丽江-香格里拉-泸沽湖</title>
    <link href="http://yoursite.com/2018/12/24/%E4%BA%91%E6%B8%B8%E5%9B%9B%E6%96%B9-%E5%A4%A7%E7%90%86-%E4%B8%BD%E6%B1%9F-%E9%A6%99%E6%A0%BC%E9%87%8C%E6%8B%89-%E6%B3%B8%E6%B2%BD%E6%B9%96/"/>
    <id>http://yoursite.com/2018/12/24/云游四方-大理-丽江-香格里拉-泸沽湖/</id>
    <published>2018-12-24T01:00:16.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这个是草稿，实在写不下去了</strong></p><h3 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h3><p>原计划时加上往返路程一共九天，最终只呆了八天回来了，感觉有点累。</p><ul><li>2018-12-15 深圳 - 昆明 - 大理 大理天气阴天7-18℃</li><li>2018-12-16 崇圣寺三塔公园 - 洱海骑行 大理天气多云5-18℃</li><li>2018-12-17 甘海子 - 玉龙雪山 - 蓝月谷 丽江天气晴6-19℃</li><li>2018-12-18 长江第一湾 - 虎跳峡 - 普达措国家公园 大雪零下6-零上3℃ </li><li>2018-12-19 香巴拉时轮坛城 - 象山公园 - 独克宗 晴 </li><li>2018-12-20 泸沽湖观景台 - 猪槽船 - 篝火晚会 晴</li><li>2018-12-21 草海 - 走婚桥 - 摩梭家访 晴</li><li>2018-12-22 洱海骑行 - 采草莓 - 深圳 晴</li></ul><a id="more"></a><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>云南海拔高，紫外线很强烈，记得一定要带防晒的，要不一下子就晒黑了。</li><li>天气干燥，记得带保水的，不行大宝就很合适。</li><li>一定要带保温杯，很多地方都有热水打，多喝温水，不要直接喝冷水。</li><li>不要随便就被人拉这里去玩那里去玩，防止被坑，尽量走线上平台交易，至少还能打差评。</li><li>带一些零食，有时候坐车三四个小时，可以吃点东西，或者吃不惯的时候也可以填一下肚子。</li><li>如果能带墨镜的话尽量带上，太阳太强烈了，拍照的时候不方便。</li><li>去寺庙不要戴帽子，寺庙内不要拍照，不要踩人家门槛，左脚先跨过去，观光一般顺时针绕行，你可以不信仰，但是还是要尊重别人的习俗。</li><li>备点一元零钱，很多地方上厕所要收费，以备不时之需。</li></ol><h3 id="具体行程"><a href="#具体行程" class="headerlink" title="具体行程"></a>具体行程</h3><h4 id="day1（2018-12-15-周六-天气多云，气温）深圳-昆明-大理"><a href="#day1（2018-12-15-周六-天气多云，气温）深圳-昆明-大理" class="headerlink" title="day1（2018-12-15 周六 天气多云，气温）深圳 - 昆明 - 大理"></a>day1（2018-12-15 周六 天气多云，气温）深圳 - 昆明 - 大理</h4><p>第一天严格意义来说一直是在赶路的，主要是说一下时间。我们是早上7：35-10：15从深圳到昆明的飞机。然后转乘地铁从昆明长水机场到昆明火车站，再乘车前往大理。</p><ul><li><strong>深圳 - 昆明长水机场</strong> 耗时约2小时，票价1400左右，两人</li><li><strong>昆明长水机场 - 昆明火车站</strong> 地铁6元/人，耗时约一个小时，从机场中心站坐6号线经过3站到达东部汽车站，转乘地铁3号线,经过6站, 到达东风广场站，再转乘地铁2号线,经过2站, 到达环城南路站。建议在这里下车，因为去昆明火车站下车也要绕着火车站走很远（大约800米），而且人又少，还不如在环城南路站下车，走北京路到达火车站正门。另外也可以直接坐从机场到昆明站的大巴，时间可能更短，25元/人。</li><li><strong>昆明火车站 - 大理火车站</strong> 耗时约2小时，一等座231元/人，D4120动车。走到昆明火车站才发现没有买票，临时买的12：57的火车票，云南的火车旅游线都很宽敞，一等座远远大于深圳的一些一等座，非常舒适。下午15：05到达大理火车站。</li><li><strong>大理火车站 - 大理古城</strong> 耗时约1小时，3元/人。从大理火车站出来以后可以看到广场上面有很多8路车，PS：也有很多私人在拉客，15元/人，感觉没啥必要。回来的时候不堵车才30多分钟就到了。这里是从大理火车站坐到大理古城东门的风花雪月酒店站下车，如果不知道怎么去客栈的话可以叫客栈老板过来接就好了。请大家务必注意的是，门口有很多推荐住房什么乱七八糟的，建议大家都在网上订好，至少你还能给差评，现场的就是无保障，容易被人宰，尤其是你不会砍价的时候。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181225092610%E7%AC%AC%E4%B8%80%E5%A4%A9%E5%A4%A7%E7%90%86%E5%8F%A4%E5%9F%8E.jpg" alt=""></li><li><strong>大理古城 - 才村码头</strong> 耗时十分钟左右，8元。因为我们到的时候已经四点多了，所以放完东西我们就去了才村码头转转。大理古城出来有很多那种电动车，从大理古城过去砍价到8元（有人叫20元，果断砍价）。一路上可以看到很多耕种的本地人，还有很多草莓园，我们返程去大理的时候有过去采摘（25元/斤），特别香甜，比深圳便宜多了。乘车过去才村码头拍拍照，然后转了一下湖滨生态园。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181225092242%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%89%8D%E6%9D%91%E7%A0%81%E5%A4%B4%E6%B9%BF%E5%9C%B0%E5%85%AC%E5%9B%AD.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181227230938%E6%B4%B1%E6%B5%B7%E7%AC%AC%E4%B8%80%E6%99%9A.jpg" alt=""></li><li><strong>才村码头 - 大理古城</strong> 稍晚天冷就返回大理古城准备用餐。</li><li><strong>大理古城 - 人民路</strong> 向客栈老板打听以后决定去人民路吃点东西，沿着人民路逛了一圈，感觉实在是跟别的古城没什么区别，走到洋人街附近的时候就绕回去了。中间见识了一路的烤榴莲，银饰店，以及各种本地的水果如：人参果，蛇皮果之类的（水果不要买多，可能吃不惯）。晚餐实在是不知道吃什么就在路边随便找了一家店吃，结果随便了一个本地的那种自助烧烤，有一块石板撒上油自己烤的那种，非常难吃，建议不要吃。</li><li><strong>回客栈休息</strong> </li></ul><h4 id="day2（2018-12-16-周日）-崇圣寺三塔公园-才村码头-大理古城-洱海环行"><a href="#day2（2018-12-16-周日）-崇圣寺三塔公园-才村码头-大理古城-洱海环行" class="headerlink" title="day2（2018-12-16 周日） 崇圣寺三塔公园-才村码头-大理古城-洱海环行"></a>day2（2018-12-16 周日） 崇圣寺三塔公园-才村码头-大理古城-洱海环行</h4><p>原计划时早上起床去才村码头看日出的（云南这个季节的日出大概是在八点左右，七点四十左右天已经开始变白，具体的时间可以通过天气app查看日出日落的时间），因为打不到车，然后太早了没地方租车所以耽搁了，然后一下子睡到了九点多才起来。吃完了早餐以后，就去了崇圣寺三塔公园。</p><ul><li><strong>大理古城 - 崇圣寺三塔公园</strong> 从大理古城到崇圣寺三塔公园大概也就一两公里，我们是用滴滴打车过去的，一般13，14元即可。</li><li><strong>崇圣寺三塔公园 - 大理古城</strong> 从公园会去以后基本上已经到了午餐时间，在大理古城又找不到什么好吃的，所以我们就在东门进来一点的地方吃了一个云南的米线，味道一般。</li><li><strong>大理古城 - 洱海骑行</strong> 美。</li><li><strong>大理古城 - 丽江</strong> 耗时约2-3小时，费用60-100/人不等。我们这里是找客栈老板帮我们订的，有个不好的点是一个小面包车在大理古城一直转接人，可能要一个小时或者更短。我们订的七点半的车，结果六点四十就来接人了，饭还没吃完。然后跟这他接人转了快一个小时。所以不要轻易找客栈老板，还不如自己打车去车站，时间可控一些。到达丽江以后我们是到的丽江高快客运站，位于丽江古城的西北角，还有一个丽江客运站位于丽江古城的南边一公里左右的地方。我们那个客栈老板就有点分不清位置，让我绕了一圈去南门的分店。</li></ul><h5 id="崇圣寺三塔公园"><a href="#崇圣寺三塔公园" class="headerlink" title="崇圣寺三塔公园"></a>崇圣寺三塔公园</h5><p>我们是在飞猪订的景区门票，包含了崇圣寺三塔公园里面的单程电动车票，一般建议下行的时候才坐电动车，其实也可以不坐电动车。崇圣寺三塔公园其实很小，玩两个小时绰绰有余，套票里面包含了三塔倒影公园（下午四点到五点时最佳时间，因为我们是上午去的，所以就略过了这个景点）。其实比较理想的是上午去苍山-洗马潭，下午去崇圣寺三塔公园。由于天气不是很好，我们把这一个行程略掉了，晚上提前去丽江古城。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228205158%E5%B4%87%E5%9C%A3%E5%AF%BA.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228205604%E5%B4%87%E5%9C%A3%E5%AF%BA.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228214126%E8%B6%85%E5%A4%A7%E6%9D%BE%E6%9E%9C.jpg" alt=""></p><h5 id="洱海骑行"><a href="#洱海骑行" class="headerlink" title="洱海骑行"></a>洱海骑行</h5><p>下午本来也没想好干什么，后来就想着去骑电动车环游洱海，不过我们两个人都不会骑电动车（我还是八年以前学过，但是没学会就放弃了）。在路边小店租车的时候，老板一听说我们不会骑，立马就从主动推销改为了主动拒绝，这个是挺好的。后来我实在没忍住在网上租了一个（主要是考虑到飞猪有免押金），到喜洲往返的55元，环洱海的110元（价格代表能够跑的距离，一旦跑达到没电是一件非常痛苦的事情。我老婆的一个朋友现在每次跟人说都是不要去云南就是因为电动车骑到一半没电了，而且赶上下雨）。环洱海大概120公里，路况不好且骑的不会快，加上停下来拍照肯定是需要一天的时间的，所以我们选择了喜洲往返的套餐，现在想想这是去大理做的最明智的一件事情了。在飞猪上面下单以后，大概过了十几分钟老板把电动车送过来（古城内都是送的，还的时候老板也是古城内上门取的）。一路上真的是看到了很多很多漂亮的风景，主要是云南的天太蓝了，感觉美的不真实。<br><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228160519erhaiqixing.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228160642erhaiqixing.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228160744erhaiqixing.jpg" alt=""></p><h4 id="day3（2018-12-17-周一）甘海子-丽江玉龙雪山-蓝月谷"><a href="#day3（2018-12-17-周一）甘海子-丽江玉龙雪山-蓝月谷" class="headerlink" title="day3（2018-12-17 周一）甘海子-丽江玉龙雪山-蓝月谷"></a>day3（2018-12-17 周一）甘海子-丽江玉龙雪山-蓝月谷</h4><p>这里报的是那种一天的团，基本上都是六点半到七点半来四处接人，所以起的很早，我们一行加导游一共九人。费用是369元/人，含午餐，中午基本上都是那种腊排骨煮鸡肉，加上一些菜，加了辣椒酱后味道还可以。然后还有一罐氧气，和一件防寒服，就是那种大衣样式的。行李的话是直接丢在昨晚睡觉的客栈。</p><ul><li><strong>丽江古城 - 甘海子</strong> 不知道为啥甘海子也算一个景点，刚到甘海子还很早，特别冷，随便拍了下照片就走了。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228205955ganhaizi.jpg" alt=""></li><li><strong>甘海子 - 玉龙雪山</strong> 先是在山脚下坐大巴到山腰去排队坐缆车，淡季都排了半个小时。进去的地方有卖一些巧克力之类的，不要买，除非你很饿，所谓抗高原反应就是心理暗示罢了。带好旅行社发的氧气提前吸一下就好了，有备无患。坐上缆车也就几分钟就到了山上，然后往上有一个100多米高德台阶可以走，体力充沛可以爬一下，我们当时爬到了中间的小卖部那里，然后我老婆头晕就下来了。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210125%E7%8E%89%E9%BE%99%E9%9B%AA%E5%B1%B1.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210204%E7%8E%89%E9%BE%99%E9%9B%AA%E5%B1%B1.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210243%E7%8E%89%E9%BE%99%E9%9B%AA%E5%B1%B1.jpg" alt=""></li><li><strong>玉龙雪山 - 蓝月谷</strong> 返回山腰的时候也是坐缆车，然后坐到蓝月谷的大巴车，道终点站下车以后司机过来接我们去午餐。午餐完毕以后导游又把我们送到下大巴的蓝月谷，然后大家自由活动，沿着蓝月谷的几个湖网上。蓝月谷的水确实非常的漂亮，有几个湖视清澈见底的，也有几个就是蓝色的湖水，如梦如幻。蓝月谷的水是玉龙雪山融化的雪水，比较凉，之所以看起来是蓝色是因为水中富含铜离子，所以蓝月谷的水是不能饮用的。这里因为晚上没有休息好，早上又起得很早，直接导致下午头痛的不行。然后我老婆又一直叫我摆姿势拍照，录视频，头痛到不行不行的，最后还给我脸色看，委屈blabla。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210340%E8%93%9D%E6%9C%88%E8%B0%B7.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210418%E8%93%9D%E6%9C%88%E8%B0%B7.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210502%E8%93%9D%E6%9C%88%E8%B0%B7.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228210536%E8%93%9D%E6%9C%88%E8%B0%B7.jpg" alt=""></li><li><strong>蓝月谷 - 丽江古城</strong> 蓝月谷走完以后，导游开车到上游的桥那里直接接我们一起返回丽江古城勒。到了客栈五点多刚刚好。</li></ul><h4 id="day4（2018-12-18-周二）长江第一湾-虎跳峡-普达措国家公园-藏王土司宴"><a href="#day4（2018-12-18-周二）长江第一湾-虎跳峡-普达措国家公园-藏王土司宴" class="headerlink" title="day4（2018-12-18 周二）长江第一湾-虎跳峡-普达措国家公园-藏王土司宴"></a>day4（2018-12-18 周二）长江第一湾-虎跳峡-普达措国家公园-藏王土司宴</h4><p>之所以今天来香格里拉也是冲着下雪过来的，运气真好，还真下雪了，遇上了香格里拉2018年的第一场雪。可把我老婆这个广东人高兴坏了，打成了人生成就：人生的第一场雪。本来行程里面周三才是普达措，由于我们是散客拼团，所以导游的行程是第一天（周二）去普达措，正好是下雪的时候。算是非常完美了，因为晚上雪停了，然后第二天晴天雪融化了。</p><p>此次是散客拼团，一个大巴车只有22人，一个藏族女导游叫拉姆，一个司机，算是淡季的福利吧。团里面有一个北京的四人大家庭，爸爸妈妈，女儿女婿，爸爸有点像网上说的朝阳群众，热心，管的宽。还有一对来自成都的叔叔阿姨，阿姨的模样和行为一看就是那种特别幸福的女人。前面还有两位是来自黑龙江的东北大汉，父子两。其他的没什么交集，所以记不清。</p><ul><li><strong>长江第一湾</strong> 无法理解长江第一湾也是个景点</li><li><strong>虎跳峡</strong> 耗时约1小时。虎跳峡确实是一个值得一去的地方，我们去的时候水流不是很急，风特别大，大概玩了一个小时就走了。</li><li><strong>午餐</strong> 这一顿午餐是我在云南吃过的最差的一顿了，七八个素菜，全靠老乡腿脚品尝的牦牛肉酱和松茸下饭了。</li><li><strong>普达措国家公园</strong> 吃完饭接着往普达措赶，天渐渐下起了雪，车外白雪茫茫，车上广东人一路上高兴的直跳。去普达措的路上导游会推荐大家去买氧气瓶和高原维能，氧气好像是68/瓶，高原维能是48/支，导游推荐大家一人两瓶氧气，两瓶高原维能，其实完全没必要。我们昨天在玉龙雪山的氧气瓶还有剩下两瓶，完全够用了。只要保证一人一瓶完全够了，还有富余。普达措国家公园上去的时候等了半个小时大巴，下来的时候等了快五十分钟大巴，这点是非常让人诟病的。上去的时候我们是在属都湖下车，不行3.3公里到达终点站坐车下来的。</li><li><strong>藏王土司宴</strong> 晚上吃饭在藏王土司宴，就是一人一个小火锅，中间会有藏民跳舞还有跟大家互动的过程。</li></ul><h5 id="长江第一湾"><a href="#长江第一湾" class="headerlink" title="长江第一湾"></a>长江第一湾</h5><p>正如前面所说，有点搞不懂这么一个地方怎么会算得上一个景点，感觉就是一个很普通的地方。当然了，也有可能是我们来得季节不对吧。</p><h5 id="虎跳峡"><a href="#虎跳峡" class="headerlink" title="虎跳峡"></a>虎跳峡</h5><p><strong><a href="https://zh.wikipedia.org/wiki/%E8%99%8E%E8%B7%B3%E5%B3%A1" target="_blank" rel="noopener">虎跳峡</a></strong>是中国云南省丽江一處峡谷，位于玉龙与中甸之间的金沙江干流上。相传金沙江逢枯水期时，有猛虎下山，在此江中的礁石上稍一脚后腾空便越过，故称「虎跳峡」，江中的礁石則稱作「虎跳石」。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211544hutiaoxia.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211438hutiaoxia.jpg" alt=""> </p><p>虎跳峡因该是一个比较有名的景点，我们去的时候刚好是枯水季节，没有领略到虎跳峡的雄浑壮阔，不过也正式因为这样，所以才看到了虎跳石。下车往上看对面云雾缭绕，山顶还有积雪，前方就是悬崖，山涧风很大，有一点冷。沿着台阶往下走，往下看还是有一点瘆人的。走到下面平台的时候，大家都在标志性的虎跳石那里合影留念，还好不是旅游旺季，排队拍了个照。旁边有一些很脏的玻璃栈道，应该是涨水的时候水冲的。尽管是枯水季节，但是也能听到水流冲击的声音，想想要是洪水季节，该是何等的壮阔呀。</p><h5 id="普达措国家公园"><a href="#普达措国家公园" class="headerlink" title="普达措国家公园"></a>普达措国家公园</h5><p><strong><a href="https://zh.wikipedia.org/wiki/%E6%99%AE%E8%BE%BE%E6%8E%AA%E5%9B%BD%E5%AE%B6%E5%85%AC%E5%9B%AD" target="_blank" rel="noopener">普达措国家公园</a></strong>位于云南省迪庆藏族自治州香格里拉市境内，最高海拔4159.1米，年平均气温5.4℃。至今保持完整的原始森林生态系统，奥运火炬香格里拉站的传递就曾经在这里进行。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211627%E6%99%AE%E8%BE%BE%E6%8E%AA%E5%9B%BD%E5%AE%B6%E5%85%AC%E5%9B%AD.jpg" alt="">  <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211708%E6%99%AE%E8%BE%BE%E6%8E%AA%E5%9B%BD%E5%AE%B6%E5%85%AC%E5%9B%AD.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211831%E6%99%AE%E8%BE%BE%E6%8E%AA%E5%9B%BD%E5%AE%B6%E5%85%AC%E5%9B%AD.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211902%E6%99%AE%E8%BE%BE%E6%8E%AA%E5%9B%BD%E5%AE%B6%E5%85%AC%E5%9B%AD.jpg" alt=""></p><h5 id="藏王土司宴"><a href="#藏王土司宴" class="headerlink" title="藏王土司宴"></a>藏王土司宴</h5><p><strong>藏王土司宴</strong>吃小火锅，进门的时候会有人<em>献哈达</em>拍照，后面会打印出来问你是否要，如果需要的话是20元/张。进门坐下入席坐下以后，当地的藏民会载歌载舞欢迎大家的到来，总的来说气氛还不错，会有一些互动环节。不过味道的话比较一般吧，可以免费加菜，会有藏民吃的煮土豆，饼，还有青稞酒之类的。我们团里一个可爱的成都大叔喝了一些酒以后还上去唱了两曲，然后阿姨还上去献了哈达，特别有爱。不过宴会进行到晚声的时候突然停电了，所以后面的篝火晚会就取消了。 <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228211941%E8%97%8F%E7%8E%8B%E5%9C%9F%E5%8F%B8%E5%AE%B4.jpg" alt=""></p><h5 id="酒店休息"><a href="#酒店休息" class="headerlink" title="酒店休息"></a>酒店休息</h5><p>停电以后大伙就坐旅行车回到了酒店休息，结果酒店也没有电，一直在用发电机发电，提着行李到了房间以后就准备洗漱休息了。房间的配置相当不错，开始听说给我们订的是单间我还挺纳闷的，结果一进房间远超预期。房间里面已经有油汀预热了，还是蛮舒服的，不会像空调那么一股味道还特别干燥。不过我们的房间对着酒店的发电机，特别吵，对我没啥大的影响，对我老婆影响比较大。而且凌晨一点多的时候整个酒店直接就没电了，第二天起来用的是手机照明。</p><h4 id="day5（2018-12-19-周三）香巴拉时轮坛城-龟山公园-独克宗古城"><a href="#day5（2018-12-19-周三）香巴拉时轮坛城-龟山公园-独克宗古城" class="headerlink" title="day5（2018-12-19 周三）香巴拉时轮坛城-龟山公园-独克宗古城"></a>day5（2018-12-19 周三）香巴拉时轮坛城-龟山公园-独克宗古城</h4><p>今天是两天的香格里拉行程的第二天，早上七点四十导游预约了叫早服务，八点洗漱完毕去到餐厅层吃饭。早餐是有花卷，白粥，蛋糕，咸菜，面条，一人一个鸡蛋，对于我们俩来说只要有白粥咸菜就算是okay了。早餐完八点二十司机接我们去到另一个酒店接另外的部分团员，结果他们一上车就来抱怨早餐难吃，只有白粥，然后听我们说早餐有那么多选择大伙又叽叽喳喳的聊了一会。</p><ul><li><strong>香巴拉时轮坛城</strong>香巴拉时轮坛城严格意义来讲是一个现代化的建筑，大家也可以去看看古色古香的松赞林寺，不过去看看也是不错的。</li><li><strong>龟山公园</strong>这里有一个很大的转经筒，需要很多人合力才能转起来，大家可以试试。</li><li><strong>独克宗古城</strong>我们只是在下面的红军纪念馆和旁边的博物馆转了一下，没有去独克宗古城游玩，淡季人也比较少，加上积雪较多地面丝滑，就没有过去转了。</li></ul><h5 id="香巴拉时轮坛城"><a href="#香巴拉时轮坛城" class="headerlink" title="香巴拉时轮坛城"></a>香巴拉时轮坛城</h5><p>稍晚，大伙到了香巴拉时轮坛城，导游买票以后大伙乘电梯到达八楼，有坛城里面的工作人员带领大家参观。带我们团的是一个汉族的小伙，他老家是云南的，在拉萨的佛学院学成以后申请回香巴拉时轮坛城工作。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212014%E9%A6%99%E5%B7%B4%E6%8B%89%E6%97%B6%E8%BD%AE%E5%9D%9B%E5%9F%8E.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212038%E9%A6%99%E5%B7%B4%E6%8B%89%E6%97%B6%E8%BD%AE%E5%9D%9B%E5%9F%8E.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212135%E9%A6%99%E5%B7%B4%E6%8B%89%E6%97%B6%E8%BD%AE%E5%9D%9B%E5%9F%8E.jpg" alt=""></p><p>香巴拉时轮坛城从2005年开始修建，耗时十年建成，2015年初期只向宗教人士和政府官员开放，后来响应习主席的号召开始面向大众开放。到达八层以后，工作人员向我们介绍了香巴拉时轮坛城的一些知识，因为对历史背景不太了解，一下子就忘了。中间还介绍了天珠，转经筒，唐卡，等等，不过坛城里面都是<strong>禁止拍照</strong>的，只有在坛城外面才可以拍照。</p><p>沿着楼梯往下走的时候工作人员一边转着转经筒，一边带我们来到了佛祖佛母的善恶相的侧面参观，中间有对佛祖佛母做了一个大致的介绍。例如踩在脚下代表欲望，贪婪的男人，和抬佛祖佛母脚的女人在祈求佛祖佛母放过自己的男人。然后当我们走到下面的烧酥油灯的地方，大家可以花个十几二十块买一盏小的，或者花个几十块买一盏大的酥油灯去许一个愿，祈求平安幸福，告诫心灵。可能大家会比较关心如果愿望达成了是否需要还愿，工作人员也有说到在大乘佛教里面是没有必要还愿这一说的，所以大家也不用返回去还愿。</p><h5 id="龟山公园"><a href="#龟山公园" class="headerlink" title="龟山公园"></a>龟山公园</h5><p><a href="https://baike.baidu.com/item/%E9%BE%9F%E5%B1%B1%E5%85%AC%E5%9B%AD/13382104" target="_blank" rel="noopener">龟山公园</a>有着世界上最大的转经筒，从下面沿着满是积雪的石阶小心翼翼的往上走，来到上面的庙前。然后走到世界上最大的转经筒之前，招呼上同行的旅人，大伙一起合力转了一圈转经筒。感觉还是不错的，然后顺便在边上拍拍照。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212356%E8%BD%AC%E7%BB%8F%E7%AD%92.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212441%E8%BD%AC%E7%BB%8F%E7%AD%92.jpg" alt=""></p><h5 id="独克宗古城"><a href="#独克宗古城" class="headerlink" title="独克宗古城"></a>独克宗古城</h5><p><a href="https://baike.baidu.com/item/%E7%8B%AC%E5%85%8B%E5%AE%97%E5%8F%A4%E5%9F%8E/8643301" target="_blank" rel="noopener">独克宗古城</a>在2014年的时候一场大火把整个古城付之一炬，后面翻修了以后人气不是特别好，后面政府就规定每个去香格里拉的旅行团都要去独克宗转一下，算是政策性增加人气吧。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212157%E7%8B%AC%E5%85%8B%E5%AE%97.jpg" alt=""></p><p>集合以后导游就开始问大伙有谁要去看看蜜蜡和天珠的，我们团有个一家三口跟这导游去看几十分钟，其他人因为下雨全都在路边屋檐下等着。等他们回来以后说看中一个天珠，要价八万，这里完全不建议大家去购买这些。首先天珠本身就是最近几年炒的厉害的，尤其是李连杰佩戴以后，另外也无法辨别真伪。</p><p>人齐以后大家一起到大巴车出发，这里有个小插曲。一对小情侣去了边上的面包店买面包，但是发车的时候导游以为他们到了，所以直接开车走了，然后小情侣打电话给导游，司机就转回去接他们。司机很不客气的说我的油费都比你们的面包值钱了，本身来讲就是这个导游自己失职了还来指责游客。</p><h5 id="午餐及返程"><a href="#午餐及返程" class="headerlink" title="午餐及返程"></a>午餐及返程</h5><p>出发以后准备去用餐，到了一个藏民家以后上到二楼有很多卖藏红花，天麻，松茸，牦牛肉之类的。大家依次坐下以后等了很久都不见上菜上饭，一问才知道是导游说上菜才会上菜，结果导游又一直在等着我们买东西了。催了好几次以后才开始上菜，有点恶心巴拉的，饭菜也不怎么样。午餐过后下楼导游还让我们填了一个表给她评分，违心的填了一个好。</p><p>中午用餐完以后大伙就乘车准备返回丽江了。这发现一个很有意思的地方，去往丽江方向的大巴车都需要清洗以后才能进程。这应该算是一个政策性扶贫了，为当地民众谋生计。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212532%E8%BF%94%E7%A8%8B.jpg" alt=""></p><p>下午五点多到达丽江以后导游没有像出发的时候一样送回各个酒店，而是在几个集中的地方下人，远的就给了十元车费。</p><h5 id="晚餐及住宿"><a href="#晚餐及住宿" class="headerlink" title="晚餐及住宿"></a>晚餐及住宿</h5><p>晚上依然住在丽江古城，不过这一次从城南住到了城北，打车到客栈放完行李以后我们就启程打车去往花马街吃饭。</p><p>到了花马街入口的时候我们下车不行准备路上看看吃什么，路边的店很多都是烧着个篝火，然后会有一些阿姨穿着民族服饰跳舞。走着走着来到了一个新开的超市前面，老婆决定去买一些零食带上填肚子，然后我的书包又被塞满了。逛完超市以后我们也不是很想接着走了，所以看了下边上的店，有一个叫阿勒丘食府的店，马路两边有两家，看了下口碑，有套餐。进去问了以后结果不支持，但是我们俩又不想走了，就坐下来看了一下菜单点了几个菜。一个土豆丝，一个黄花菜炒蛋，一个毛血旺，份量都很足，但是味道就一般了。</p><p>吃完饭以后打算徒步走回去，沿着丽江古城里面的小河一直往下走呀走呀。中间有很多酒吧，人气特别好，不过我们两个没有进去，而是慢慢走呀走，走回酒店以后洗漱休息。毕竟明天还要赶早起床出发去泸沽湖。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212611%E4%B8%BD%E6%B1%9F%E5%8F%A4%E5%9F%8E.jpg" alt=""></p><h4 id="day6（2018-12-20-周四）金沙江-泸沽湖观景台-泸沽湖-猪槽船-篝火晚会"><a href="#day6（2018-12-20-周四）金沙江-泸沽湖观景台-泸沽湖-猪槽船-篝火晚会" class="headerlink" title="day6（2018-12-20 周四）金沙江-泸沽湖观景台-泸沽湖-猪槽船-篝火晚会"></a>day6（2018-12-20 周四）金沙江-泸沽湖观景台-泸沽湖-猪槽船-篝火晚会</h4><p>从丽江到泸沽湖大概三四个小时的车程，我们两个报的是两天的团</p><p>早上六点半开始起床收拾东西，洗漱完毕出发，在路口买了早餐以后等车过来。本来约的是7:15的车，结果到了7:20才到，估摸着应该是人太多太分散了。果然，这个散客团居然有40个游客，外加一个导游一个司机。大概到八点左右才把整个团的人接齐了，出发去泸沽湖。</p><ul><li><strong>金沙江</strong> 其实金沙江并不是我们行程中的一个景点，只是会路过而已，但是这一段路的金沙江实在太美了，所以就点出来一下。</li><li><strong>泸沽湖观景台</strong> 鸟瞰泸沽湖全境，适合拍拍照。</li><li><strong>泸沽湖</strong> 来到泸沽湖边上，近距离欣赏泸沽湖的美景。</li><li><strong>猪槽船</strong> 乘船登录小岛，可以在岸边买几个面包边乘船边喂食海鸥，湖中间还有鸳鸯之类的。也可以选择绕小岛环行一周，30元/人</li><li><strong>情人树</strong> 其实就是一颗普通的树，不过可以在附近拍一下不同方向的泸沽湖。</li></ul><h5 id="金沙江"><a href="#金沙江" class="headerlink" title="金沙江"></a>金沙江</h5><p>这里说的金沙江是从丽江到泸沽湖的丽宁公路段，这一段路的金沙江水是那种碧绿的颜色，像是大大的绿宝石，美不胜收。丽宁公路很多地方都是那种从山顶一直走之字型往下的路线，所以从车窗往外看就是悬崖，看着有点腿软。其实可以想象以前如果没有这条路，可能金沙江两岸山头的两户人家会老死不相往来。难以想象的是修建这条路到底付出了多大的代价，包括人力，物力，甚至是很多生命。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212711%E9%87%91%E6%B2%99%E6%B1%9F.jpg" alt=""></p><p>不过也正是有了丽宁公路，才有了泸沽湖的发展，以前从丽江到泸沽湖需要七八个小时的车程，现在只需要三四个小时。</p><h5 id="泸沽湖观景台"><a href="#泸沽湖观景台" class="headerlink" title="泸沽湖观景台"></a>泸沽湖观景台</h5><p>大概十一点多来到了泸沽湖观景台，这里可以鸟瞰整个泸沽湖。在这里看的时候其实没什么感觉，因为云南的天，云南的湖都是一样的碧水蓝天，看多了会觉得千篇一律。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228212843%E4%BD%A0%E7%9C%8B%E6%B3%B8%E6%B2%BD%E6%B9%96.jpg" alt=""></p><p>呆了几分钟以后就到停车的地方坐着休息，然后等其他团员上车出发。</p><h5 id="午餐"><a href="#午餐" class="headerlink" title="午餐"></a>午餐</h5><p>午餐一般般，只有一只本地的烤鸡稍微好吃点，另外每桌会有两瓶酒，一瓶是男士喝的，味重，一瓶女士喝的，基本上没有酒味。大概十来个菜吧，还有一个哈掉的肥腊肉。</p><h5 id="泸沽湖-amp-amp-猪槽船"><a href="#泸沽湖-amp-amp-猪槽船" class="headerlink" title="泸沽湖 &amp;&amp; 猪槽船"></a>泸沽湖 &amp;&amp; 猪槽船</h5><p>午餐完就是到乘坐猪槽船的地方了，路边有卖喂食海鸥的面包的本地人，后面坐船的时候如果扔面包会有很多海鸥过来抢食，边还有散养的鸡。</p><p>来到岸边大家排队登船，一个船可以坐八个游客，外加船头两名划船的船夫，以及船尾一名掌管方向的船夫。出发往湖中小岛划去的时候船夫会介绍泸沽湖的景点，比如说女神山，还有四川和云南的交界处，其他等等。大家只用穿好救生衣（救生衣上面是有编号的，代表船号，往返都智能乘坐同一个船），坐在床上即可，也可以投食海鸥，这样子就可以近距离的拍摄海鸥了。划到中间的时候，船夫会问大家需不需要划船环岛（30元/人，感觉还是可以的），如果不需要的话就送到岛的登陆处，需要的话就带大家绕行一周。这个时候如果不愿意的话就可以叫船夫先送到小岛，然后让其他愿意的人环岛。我们选择了环岛，环岛的这一段水的可见度特别好，来到四川云南交界处的时候还喝了几口泸沽湖的水，不知道会不会像西游记里面说的一样怀孕，哈哈。这一段可选的路程，感觉30元还是蛮不错的。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213055%E7%8C%AA%E6%A7%BD%E8%88%B9.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213122%E7%8C%AA%E6%A7%BD%E8%88%B9.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213211%E7%8C%AA%E6%A7%BD%E8%88%B9.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213319%E7%8C%AA%E6%A7%BD%E8%88%B9.jpg" alt=""></p><p>环行小岛一周以后，大家来到登陆小岛的地方上岸，岛上有一个小小的寺庙，寺庙外面是一圈的转经筒。顺时钟转了一圈以后边上是一个挂满了许愿牌的地方，我们拍了一会照片就下岛乘船返回了。</p><p>返回以后很多人还没有回来，然后我们又找了一个人少一点的地方去继续伟大的拍照事业。等到大家人齐了以后我们开始出发去下一站，有点忘记晚上吃的是什么了。用完餐去了本地的酒店入住，里面有空调，不过泸沽湖的晚上还是蛮冷的。</p><h5 id="篝火晚会"><a href="#篝火晚会" class="headerlink" title="篝火晚会"></a>篝火晚会</h5><p>七点二十的时候导游带我们去了本地的篝火晚会，门票好像是30元每人。进门的时候又是常规操作献哈达拍照（打印的照片收费20元/人），不过这个一点都不走心，哈达就是随便扔，而且拍照还拍眯眼了。</p><p>邀请了一男一女两位游客去点火，然后就是一群摩梭族的阿哥阿妹围着篝火跳本地的特色舞蹈，跳了一会就邀请大家上去跟着一起跳。说是阿哥阿妹，其实好多都是大妈。据说是因为很多游客听说了本地的习俗以后喜欢去挠手心，所以年轻的都不去了。</p><p>我们呆了一小会觉得冷就返回酒店休息了。</p><h4 id="day7（2018-12-21-周五）摩梭家访-丽江-大理"><a href="#day7（2018-12-21-周五）摩梭家访-丽江-大理" class="headerlink" title="day7（2018-12-21 周五）摩梭家访-丽江-大理"></a>day7（2018-12-21 周五）摩梭家访-丽江-大理</h4><p>今天是返程回丽江，上午就一个摩梭家访，其实就是一个卖银饰品的推荐会顺带讲一些本地的风土人情。</p><ul><li><strong>草海&amp;&amp;走婚桥</strong> 草海是一块很大的湿地，算是一个很漂亮的地方，不过我们去的季节草都枯萎了，走婚桥就在草海的边上。</li><li><strong>摩梭家访</strong> 听当地的风土人情，大型银饰品推销会。</li></ul><h5 id="草海-amp-amp-走婚桥"><a href="#草海-amp-amp-走婚桥" class="headerlink" title="草海&amp;&amp;走婚桥"></a>草海&amp;&amp;走婚桥</h5><p>早上在酒店用完餐以后大家出发到了草海和走婚桥，早上的泸沽湖还是蛮冷的，大家下车冻的直哆嗦。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213417%E8%8D%89%E6%B5%B7.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213451%E8%8D%89%E6%B5%B7.jpg" alt=""></p><p>照例就是拍照，拍照，拍照。据说走婚桥是不能一次走到头的，寓意是走到头了。我们走上去感觉也没什么特别的就找了个人少的地方拍照。路边有本地人在卖苹果，核桃，苹果才5元一斤，比深圳便宜多了，我们顺便买了两个。上车吃的时候发现很甜，后悔没有多买几个。</p><h5 id="摩梭家访"><a href="#摩梭家访" class="headerlink" title="摩梭家访"></a>摩梭家访</h5><p>摩梭家访应该是一个比较有名的浏览行程吧，我看几乎是每个团基本上都会去，可能是因为政策性扶持吧。</p><p>从草海出发以后到摩梭家访的村子，据说这里有很多这样子的村落，大家轮流接待，然后每个村子挑选出来人接待。</p><p>到了村口以后有两个本地的阿妹在等着接大家去家里，然后团里分成两组分别跟这他们过去。到达他们家里祖母房以后就开始讲解，大意如下：</p><ol><li>不能踩门槛，门槛代表佛祖的肩膀，左脚先跨过去。</li><li>摩梭族孩子了13岁会有一个成人礼，比较郑重。</li><li>摩梭族生孩子是站着生的。</li><li>摩梭族孩子需要生下来是健康的，且会放在祖母房一个晚上，如果熬不过就熬不过。熬过了才能或者走出祖母房。</li><li>高原发烧超过二十分钟很有可能烧坏脑子，摩梭族有很厉害的退烧方法。</li><li>摩梭族给祖母和孩子都是用的银碗，可以杀毒之类的。</li><li>摩梭族的祖母房的进门右边的高台是给喇嘛活佛坐的，旁边的小门是人死了以后暂存尸体的。</li><li>摩梭族实行火葬，不保留骨灰，火葬的时间由喇嘛活佛算的。</li><li>拿银的梳子刮你的化妆品，手什么的，告诉你有毒，可以买个银饰去鉴别。</li><li>。。。。。。。。</li></ol><p>讲完以后就带去村上的银饰店呆着，银子16.8~22.8元/克不等，不知真假，看网上有人说里面刮开是黄铜色的也有。总的来说建议去正规的地方买吧，没必要在那里购买。</p><h5 id="午餐-1"><a href="#午餐-1" class="headerlink" title="午餐"></a>午餐</h5><p>从摩梭家访出来以后继续出发，路上用餐非常一般，最搞笑的是两位回族的朋友只能吃泡面，想想也是惨。</p><p>吃完饭，在边上又买了一个苹果，一个梨，味道不错，就是皮有点厚。呆了一会以后大家乘车继续往丽江走，果不其然，路上又有一个专门洗车的地方。中间导游有推销牛肉干，先是拿了一些给大家品尝，试了以后感觉味道不错就买了一包400克/100元。</p><p>到达丽江以后快五点，吃了一碗面以后打车去到丽江古城南面的丽江客运站乘车去往大理古城。从丽江客运站买票去到下关（84元/人加保险），中间是经过大理古城的，开始一直还不知道。</p><h5 id="晚餐"><a href="#晚餐" class="headerlink" title="晚餐"></a>晚餐</h5><p>两个多小时达到大理古城后，直奔酒店，放下行李以后就出来开始继续逛大理古城找吃的。这次我们在人民路转了十多分钟就放弃了，真的是没什么吃的，一度想去中间的金拱门用餐。返回东门主干道那条路的时候路边已经有很多小摊了，有一个烧烤店人挺多的，我们就坐下点了一些菜，味道还真不错。吃完在边上再买了一些煎饺返回酒店吃，老板现包的，味道也很好。</p><h4 id="day8（2018-12-22-周六）洱海环游-摘草莓"><a href="#day8（2018-12-22-周六）洱海环游-摘草莓" class="headerlink" title="day8（2018-12-22 周六）洱海环游-摘草莓"></a>day8（2018-12-22 周六）洱海环游-摘草莓</h4><p>因为早上想去洱海看日出，所以我们昨晚租了一个八点送到的电动车，还是在前面那个店租的。不过运气不好的是这个车好像有点问题，有电的时候也显示要充电，估计是天太冷了。</p><p>骑上摩托车以后先到了才村码头，在这里如果来的早或者晚就不会需要游船票进来，刚好看到日出的时候，其实一般般，因为洱海就一点点大，没什么特别的。呆了一小会出发去吃了个早餐，油条，豆浆，鸡蛋，稀饭。</p><p>吃完早餐以后出发洱海骑行，由于上次是往北边的喜洲骑的，这次我们往南边下关方向骑。结果一路上很少有海边的景色，都是很多民居，所以如果骑行建议大家还是往北边走。早上骑车是真的冷，一路上一直在想，自己到底怎么想不通为啥要大冬天早上来骑摩托车。不过比较幸运的是我们找到了几个人少，而且特别漂亮的地方拍照。其实骑车没有骑多远，主要时间就花在拍照上面了。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213534%E6%B4%B1%E6%B5%B7%E6%97%A5%E5%87%BA.jpg" alt=""></p><p>大概到了11:20，在我的再三催促下老婆大人才恋恋不舍的坐上摩托车返程，中午太阳强一些以后骑车舒服多了，所以大家冬天如果在洱海骑车建议就从大理古城往喜洲方向骑，四点之前要返程，要不晚上也太冷了。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213627%E6%B4%B1%E6%B5%B7%E9%AA%91%E8%A1%8C.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213735%E6%B4%B1%E6%B5%B7%E9%AA%91%E8%A1%8C.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213759%E6%B4%B1%E6%B5%B7%E9%AA%91%E8%A1%8C.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213821%E6%B4%B1%E6%B5%B7%E9%AA%91%E8%A1%8C.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213930%E6%B4%B1%E6%B5%B7%E9%AA%91%E8%A1%8C.jpg" alt=""> <img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228213957%E6%B4%B1%E6%B5%B7%E9%AA%91%E8%A1%8C.jpg" alt=""></p><p>骑车返回大理古城的时候老婆提议去采摘草莓，想想这大好的天气，确实可以采一下草莓。从大理古城到才村码头路上有很多可以采草莓的地方，随便找了家问了一下25元/斤，价格很不错，比很多地方都便宜。看了一下地里的草莓，很多都熟透了，走在中间都能闻到很浓的香味，应该是很好吃。我们挑了一些熟的，个头不是很大的草莓，顺便拍了个小视频优化大舅哥家的小侄女。</p><p>采完草莓以后骑车继续往大理古城走，我们实在是想不到吃什么东西就打算去人民路吃金拱门了。骑车过去的时候路过洋人街有挺多的云南樱花，特别漂亮。在金拱门点了个套餐吃完后返回客栈拿了行李乘坐8路车前往大理火车站，只花了40分钟就到了。<img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181228214044%E6%B4%8B%E4%BA%BA%E8%A1%97.jpg" alt=""></p><p>从大理火车站到昆明火车站两个小时，这次买的是二等座145元/人。五点多一点到达昆明火车站以后，由于我们预约了从昆明火车站到昆明长水机场的接机服务，但是接机的司机堵车堵了好久一直到六点十分才过来，中间等的时间太长了，我们就在边上吃了点零食，然后逛了一下超市。</p><p>六点十分司机过来接我们以后大概花了三十多分钟就从昆明火车站到了长水机场，比转乘地铁快很多。这一天刚好是冬至，农历十六，窗外的月亮特别圆，而且比在低海拔地区看到的更大，再加上云南的天比较干净，看得特别清晰。</p><p>晚上十点五十左右到达深圳，刚好快赶上末班地铁了，一路顺顺利利的到家了。此行八天七夜的云南之行圆满结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;这个是草稿，实在写不下去了&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;行程&quot;&gt;&lt;a href=&quot;#行程&quot; class=&quot;headerlink&quot; title=&quot;行程&quot;&gt;&lt;/a&gt;行程&lt;/h3&gt;&lt;p&gt;原计划时加上往返路程一共九天，最终只呆了八天回来了，感觉有点累。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2018-12-15 深圳 - 昆明 - 大理 大理天气阴天7-18℃&lt;/li&gt;
&lt;li&gt;2018-12-16 崇圣寺三塔公园 - 洱海骑行 大理天气多云5-18℃&lt;/li&gt;
&lt;li&gt;2018-12-17 甘海子 - 玉龙雪山 - 蓝月谷 丽江天气晴6-19℃&lt;/li&gt;
&lt;li&gt;2018-12-18 长江第一湾 - 虎跳峡 - 普达措国家公园 大雪零下6-零上3℃ &lt;/li&gt;
&lt;li&gt;2018-12-19 香巴拉时轮坛城 - 象山公园 - 独克宗 晴 &lt;/li&gt;
&lt;li&gt;2018-12-20 泸沽湖观景台 - 猪槽船 - 篝火晚会 晴&lt;/li&gt;
&lt;li&gt;2018-12-21 草海 - 走婚桥 - 摩梭家访 晴&lt;/li&gt;
&lt;li&gt;2018-12-22 洱海骑行 - 采草莓 - 深圳 晴&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="走四方" scheme="http://yoursite.com/tags/%E8%B5%B0%E5%9B%9B%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>hexo-使用nginx部署</title>
    <link href="http://yoursite.com/2018/12/13/hexo-%E4%BD%BF%E7%94%A8nginx%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/12/13/hexo-使用nginx部署/</id>
    <published>2018-12-13T00:38:25.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常使用hexo在本地调试运行的时候我们运行<code>hexo s</code>即可，如果我们想要部署博客供人访问的时候就要采用别的方式了。我这里选择的是使用nginx部署：</p><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>安装nginx可以参考<a href="http://www.runoob.com/linux/nginx-install-setup.html" target="_blank" rel="noopener">菜鸟教程</a></p><h4 id="使用nginx配置hexo"><a href="#使用nginx配置hexo" class="headerlink" title="使用nginx配置hexo"></a>使用nginx配置hexo</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span>   /usr/local/blog/jacentsao.github.io/.deploy_git;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取auto-certbot（2019-03-22更新）"><a href="#获取auto-certbot（2019-03-22更新）" class="headerlink" title="获取auto_certbot（2019-03-22更新）"></a>获取auto_certbot（2019-03-22更新）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.eff.org/certbot-auto</span><br><span class="line">chmod a+x certbot-auto</span><br></pre></td></tr></table></figure><h4 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./certbot-auto certonly --standalone --email admin@example.com -d example.com -d www.example.com -d other.example.net</span><br></pre></td></tr></table></figure><h4 id="获得免费的https证书–废弃"><a href="#获得免费的https证书–废弃" class="headerlink" title="获得免费的https证书–废弃"></a>获得免费的https证书–废弃</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yum install epel-release</span><br><span class="line"><span class="meta">$</span> yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional</span><br><span class="line"><span class="meta">$</span> yum install python2-certbot-nginx</span><br><span class="line"><span class="meta">$</span> yum install -y certbot</span><br><span class="line">//获取证书</span><br><span class="line"><span class="meta">$</span> certbot certonly --standalone -d example.com --agree-tos --email yourmail</span><br></pre></td></tr></table></figure><h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">       <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">       <span class="attribute">server_name</span>  localhost;</span><br><span class="line">       <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">       <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/yourdomain/fullchain.pem;</span><br><span class="line">       <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/yourdomain/privkey.pem;</span><br><span class="line">       .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自动更新证书"><a href="#自动更新证书" class="headerlink" title="自动更新证书"></a>自动更新证书</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//自动刷新证书（证书有效期90天）--废弃</span><br><span class="line"><span class="meta">$</span> 10 1 * */2 * certbot renew --pre-hook "systemctl stop nginx" --post-hook "systemctl start nginx"</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用certbot-auto更新</span><br><span class="line">10 1 * */2 * /root/certbot-auto renew --pre-hook "systemctl stop nginx" --post-hook "systemctl start nginx"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常使用hexo在本地调试运行的时候我们运行&lt;code&gt;hexo s&lt;/code&gt;即可，如果我们想要部署博客供人访问的时候就要采用别的方式了。我这里选择的是使用nginx部署：&lt;/p&gt;
&lt;h4 id=&quot;安装nginx&quot;&gt;&lt;a href=&quot;#安装nginx&quot; class=&quot;h
      
    
    </summary>
    
      <category term="博客编写" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99/"/>
    
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>自由行-搭建ss服务器</title>
    <link href="http://yoursite.com/2018/12/12/%E8%87%AA%E7%94%B1%E8%A1%8C-%E6%90%AD%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2018/12/12/自由行-搭建ss服务器/</id>
    <published>2018-12-12T11:32:02.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>详细安装配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> curl -O https://copr.fedorainfracloud.org/coprs/librehat/shadowsocks/repo/epel-7/librehat-shadowsocks-epel-7.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> yum install -y shadowsocks-libev</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> python get-pip.py</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> pip install --upgrade pip</span><br><span class="line"></span><br><span class="line">//修改配置，主要是设置端口和密码</span><br><span class="line"><span class="meta">$</span> vim /etc/shadowsocks.json</span><br><span class="line">    &#123;</span><br><span class="line">    "server": "0.0.0.0",</span><br><span class="line">    "local_address": "127.0.0.1",</span><br><span class="line">    "local_port": 1080,</span><br><span class="line">    "port_password": &#123;</span><br><span class="line">        "26888": "yourpassword",</span><br><span class="line">        "26889": "yourpassword"</span><br><span class="line">    &#125;,</span><br><span class="line">    "timeout": 600,</span><br><span class="line">    "method": "aes-256-cfb"</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//添加ss系统服务</span><br><span class="line"><span class="meta">$</span> vim /etc/systemd/system/shadowsocks.service</span><br><span class="line">    [Unit]</span><br><span class="line">    Description=Shadowsocks</span><br><span class="line"></span><br><span class="line">    [Service]</span><br><span class="line">    TimeoutStartSec=0</span><br><span class="line">    ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line">    [Install]</span><br><span class="line">    WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">//启动ss服务   </span><br><span class="line"><span class="meta">$</span>  systemctl enable shadowsocks</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;详细安装配置如下：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
      
    
    </summary>
    
      <category term="自由行" scheme="http://yoursite.com/categories/%E8%87%AA%E7%94%B1%E8%A1%8C/"/>
    
    
      <category term="自由行" scheme="http://yoursite.com/tags/%E8%87%AA%E7%94%B1%E8%A1%8C/"/>
    
      <category term="shadowsocks" scheme="http://yoursite.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Java - 搭建RocketMQ开发环境</title>
    <link href="http://yoursite.com/2018/12/04/Java-%E6%90%AD%E5%BB%BARocketMQ%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/12/04/Java-搭建RocketMQ开发环境/</id>
    <published>2018-12-04T08:34:43.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天尝试搭建一下RocketMQ开发环境，特此记录下搭建流程和搭建过程中遇到的一些问题。</p><p>首先根据官网的<a href="https://rocketmq.apache.org/docs/quick-start/" target="_blank" rel="noopener">教程</a>搭建。</p><h3 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ul><li>64bit OS, Linux/Unix/Mac is recommended;</li><li>64bit JDK 1.8+;</li><li>Maven 3.2.x;</li><li>Git;</li><li>4g+ free disk for Broker server</li></ul><h4 id="下载，构建"><a href="#下载，构建" class="headerlink" title="下载，构建"></a>下载，构建</h4><p>下载源码或者release的版本，下载地址: <a href="https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.3.2/rocketmq-all-4.3.2-source-release.zip" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.3.2/rocketmq-all-4.3.2-source-release.zip</a></p><p>如果下载的是源码的话需要使用maven进行编译：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">&gt;</span> unzip rocketmq-all-4.3.2-source-release.zip</span><br><span class="line"><span class="meta">&gt;</span> cd rocketmq-all-4.3.2/</span><br><span class="line"><span class="meta">&gt;</span> mvn -Prelease-all -DskipTests clean install -U</span><br><span class="line"><span class="meta">&gt;</span> cd distribution/target/apache-rocketmq</span><br></pre></td></tr></table></figure><p>如果不是源码的话直接进入解压后的文件即可。</p><h4 id="启动Name-Server"><a href="#启动Name-Server" class="headerlink" title="启动Name Server"></a>启动Name Server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> nohup sh bin/mqnamesrv &amp;</span><br><span class="line"><span class="meta">&gt;</span> tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line">The Name Server boot success...</span><br><span class="line">以上是官网提供的示例。我遇到的情况是输出倒了当前目录下的nohup.out文件中，使用tail 或者vim确定Name Server是否正常启动</span><br></pre></td></tr></table></figure><h4 id="启动Broker"><a href="#启动Broker" class="headerlink" title="启动Broker"></a>启动Broker</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class="line"><span class="meta">&gt;</span> tail -f ~/logs/rocketmqlogs/broker.log </span><br><span class="line">The broker[%s, 172.30.30.233:10911] boot success...</span><br><span class="line">同样的在nohub.out中查看</span><br></pre></td></tr></table></figure><h4 id="发送和接收消息"><a href="#发送和接收消息" class="headerlink" title="发送和接收消息"></a>发送和接收消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//告诉客户端需要发送到哪个服务端</span><br><span class="line"><span class="meta">&gt;</span> export NAMESRV_ADDR=localhost:9876</span><br><span class="line"><span class="meta">&gt;</span> sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line">SendResult [sendStatus=SEND_OK, msgId= ...</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br><span class="line"><span class="meta">ConsumeMessageThread_%</span>d Receive New Messages: [MessageExt...</span><br></pre></td></tr></table></figure><h4 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> sh bin/mqshutdown broker</span><br><span class="line">The mqbroker(36695) is running...</span><br><span class="line">Send shutdown request to mqbroker(36695) OK</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> sh bin/mqshutdown namesrv</span><br><span class="line">The mqnamesrv(36664) is running...</span><br><span class="line">Send shutdown request to mqnamesrv(36664) OK</span><br></pre></td></tr></table></figure><h3 id="简单的示例"><a href="#简单的示例" class="headerlink" title="简单的示例"></a>简单的示例</h3><p>官网地址<a href="https://rocketmq.apache.org/docs/simple-example/" target="_blank" rel="noopener">https://rocketmq.apache.org/docs/simple-example/</a></p><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h4><p>由于我们使用的是maven管理工具,gradle的依赖可以参考官网。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-1-发送同步消息"><a href="#2-1-发送同步消息" class="headerlink" title="2.1 发送同步消息"></a>2.1 发送同步消息</h4><p>同步消息适合于很多场景，例如重要消息的通知，SMS通知，SMS系统市场。其他都在官网，可以多多看看文档。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//Instantiate with a producer group name.</span></span><br><span class="line">        DefaultMQProducer producer = <span class="keyword">new</span></span><br><span class="line">            DefaultMQProducer(<span class="string">"please_rename_unique_group_name"</span>);</span><br><span class="line">        <span class="comment">// Specify name server addresses.</span></span><br><span class="line">        producer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line">        <span class="comment">//Launch the instance.</span></span><br><span class="line">        producer.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//Create a message instance, specifying topic, tag and message body.</span></span><br><span class="line">            Message msg = <span class="keyword">new</span> Message(<span class="string">"TopicTest"</span> <span class="comment">/* Topic */</span>,</span><br><span class="line">                <span class="string">"TagA"</span> <span class="comment">/* Tag */</span>,</span><br><span class="line">                (<span class="string">"Hello RocketMQ "</span> +</span><br><span class="line">                    i).getBytes(RemotingHelper.DEFAULT_CHARSET) <span class="comment">/* Message body */</span></span><br><span class="line">            );</span><br><span class="line">            <span class="comment">//Call send message to deliver message to one of brokers.</span></span><br><span class="line">            SendResult sendResult = producer.send(msg);</span><br><span class="line">            System.out.printf(<span class="string">"%s%n"</span>, sendResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Shut down once the producer instance is not longer in use.</span></span><br><span class="line">        producer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, MQClientException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Instantiate with specified consumer group name.</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"please_rename_unique_group_name"</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// Specify name server addresses.</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">"localhost:9876"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Subscribe one more more topics to consume.</span></span><br><span class="line">        consumer.subscribe(<span class="string">"TopicTest"</span>, <span class="string">"*"</span>);</span><br><span class="line">        <span class="comment">// Register callback to execute on arrival of messages fetched from brokers.</span></span><br><span class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; msgs,</span></span></span><br><span class="line"><span class="function"><span class="params">                ConsumeConcurrentlyContext context)</span> </span>&#123;</span><br><span class="line">                System.out.printf(<span class="string">"%s Receive New Messages: %s %n"</span>, Thread.currentThread().getName(), msgs);</span><br><span class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Launch the consumer instance.</span></span><br><span class="line">        consumer.start();</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">"Consumer Started.%n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="1-error-39-Cannot-allocate-memory-39"><a href="#1-error-39-Cannot-allocate-memory-39" class="headerlink" title="1. error=&#39;Cannot allocate memory&#39;"></a>1. <code>error=&#39;Cannot allocate memory&#39;</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000005fb000000, 8589934592, 0) failed; error='Cannot allocate memory' (errno=12)</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"><span class="meta">#</span> Native memory allocation (malloc) failed to allocate 8589934592 bytes for committing reserved memory.</span><br><span class="line"><span class="meta">#</span> An error report file with more information is saved as:</span><br><span class="line"><span class="meta">#</span> /usr/local/mq/rocketmq-all-4.3.2-bin-release/hs_err_pid6845.log</span><br><span class="line">Unrecognized VM option 'MetaspaceSize=128m'</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will exit.</span><br></pre></td></tr></table></figure><p>将bin目录下的runbroker.sh的虚拟机配置调整如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn125m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span><br></pre></td></tr></table></figure><p>同样的如果nameserver有问题也要相应的进行调整。</p><h4 id="2-Exception-in-thread-quot-main-quot-org-apache-rocketmq-remoting-exception-RemotingTooMuchRequestException-sendDefaultImpl-call-timeout"><a href="#2-Exception-in-thread-quot-main-quot-org-apache-rocketmq-remoting-exception-RemotingTooMuchRequestException-sendDefaultImpl-call-timeout" class="headerlink" title="2. Exception in thread &quot;main&quot; org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout"></a>2. <code>Exception in thread &quot;main&quot; org.apache.rocketmq.remoting.exception.RemotingTooMuchRequestException: sendDefaultImpl call timeout</code></h4><p>由于RocktMQ没有绑定网卡ip导致，如果服务器有多网卡配置的时候，或者虚拟机。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//生成配置信息</span><br><span class="line">echo "brokerIP1=10.2.x.x" &gt; broker.properties</span><br><span class="line"></span><br><span class="line">//broker绑定ip</span><br><span class="line">nohup sh bin/mqbroker -n 10.2.x.x:9876 -c ./broker.properties autoCreateTopicEnable=true &amp;</span><br></pre></td></tr></table></figure><h4 id="3-Unrecognized-VM-option-39-MetaspaceSize-128m-39"><a href="#3-Unrecognized-VM-option-39-MetaspaceSize-128m-39" class="headerlink" title="3. Unrecognized VM option &#39;MetaspaceSize=128m&#39;"></a>3. <code>Unrecognized VM option &#39;MetaspaceSize=128m&#39;</code></h4><p>Java版本太低出现报错，此时需要升级到Java8，或者将该配置移除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unrecognized VM option 'MetaspaceSize=128m'</span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br></pre></td></tr></table></figure><p>移除以后即：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPT="$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn125m"</span><br></pre></td></tr></table></figure><h4 id="4-No-route-info-of-this-topic"><a href="#4-No-route-info-of-this-topic" class="headerlink" title="4. No route info of this topic"></a>4. <code>No route info of this topic</code></h4><pre><code>1. 请检查服务器端口是否是开放的2. 可以试一下关闭客户端的防火墙再去请求试试。3. 检查服务器是否有执行export NAMESRV_ADDR=localhost:9876</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天尝试搭建一下RocketMQ开发环境，特此记录下搭建流程和搭建过程中遇到的一些问题。&lt;/p&gt;
&lt;p&gt;首先根据官网的&lt;a href=&quot;https://rocketmq.apache.org/docs/quick-start/&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="后端" scheme="http://yoursite.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>hexo-多设备之间无缝衔接</title>
    <link href="http://yoursite.com/2018/11/28/hexo-%E5%A4%9A%E8%AE%BE%E5%A4%87%E4%B9%8B%E9%97%B4%E6%97%A0%E7%BC%9D%E8%A1%94%E6%8E%A5/"/>
    <id>http://yoursite.com/2018/11/28/hexo-多设备之间无缝衔接/</id>
    <published>2018-11-28T14:56:04.000Z</published>
    <updated>2019-08-05T13:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最开始使用hexo的时候是在自己的Mac上面搭的，那时候每天都是背着自己的电脑上下班也没觉得不方便。后来老婆跟我在一起以后老是嫌弃我过安检的时候要走有包通道，非常耗时。所以就放弃了带自己的电脑上班，改为专门使用公司提供的Windows工作。这个时候就必须要把家里的电脑和公司的电脑的博客进行同步了。</p><!-- --><h4 id="安装依赖工具"><a href="#安装依赖工具" class="headerlink" title="安装依赖工具"></a>安装依赖工具</h4><ol><li>安装node</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//下载</span><br><span class="line"><span class="meta">$</span> wget https://nodejs.org/dist/v10.14.0/node-v10.14.0-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">//解压</span><br><span class="line"><span class="meta">$</span> tar xf node-v10.14.0-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">//放到usr/local/node目录下</span><br><span class="line"><span class="meta">$</span> mkdir /usr/local/node</span><br><span class="line"><span class="meta">$</span> mv node-v10.14.0-linux-x64   /usr/local/node</span><br><span class="line"></span><br><span class="line">//配置环境变量</span><br><span class="line"><span class="meta">$</span> vim ~/.zshrc</span><br><span class="line"><span class="meta">$</span> /usr/local/node/node-v10.14.0-linux-x64/bin 添加到环境变量中</span><br><span class="line"><span class="meta">$</span> source ~/.zshrc 刷新</span><br><span class="line"><span class="meta">$</span> node -v 确认node是否安装ok</span><br></pre></td></tr></table></figure><h4 id="获取hexo博客源码"><a href="#获取hexo博客源码" class="headerlink" title="获取hexo博客源码"></a>获取hexo博客源码</h4><p>将自己的博客通过各种方式获取到当前设备，比如我自己用的是git。如下所示是我的源码分支（hexo-source）：</p><p><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181212195458hexo-sourcefile.png" alt=""></p><p>以下是我的生成的网页的分支(master)：<br><img src="https://raw.githubusercontent.com/jacentsao/picbed/master/img/markdown20181212200121hexo-master.png" alt=""></p><p>另外再把主题单独弄一个<a href="https://github.com/jacentsao/hexo-theme-next" target="_blank" rel="noopener">项目</a>进行同步。</p><p>我的做法是先拉取网页代码（master）分支，然后切换到源码分支（hexo-source），复制一份改名叫.deploy_git放在项目根目录下。</p><h4 id="安装启动hexo"><a href="#安装启动hexo" class="headerlink" title="安装启动hexo"></a>安装启动hexo</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g hexo-cli</span><br><span class="line"><span class="meta">$</span> npm install hexo --save</span><br><span class="line"><span class="meta">$</span> npm install hexo-deployer-git #git部署辅助</span><br><span class="line"><span class="meta">$</span> hexo s --debug  #运行测试</span><br></pre></td></tr></table></figure><h4 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 部署网页分支（master分支）</span><br><span class="line">hexo clean  </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br><span class="line"><span class="meta">#</span> 提交源码分支（hexo-source分支）</span><br><span class="line">git commit</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最开始使用hexo的时候是在自己的Mac上面搭的，那时候每天都是背着自己的电脑上下班也没觉得不方便。后来老婆跟我在一起以后老是嫌弃我过安检的时候要走有包通道，非常耗时。所以就放弃了带自己的电脑上班，改为专门使用公司提供的Windows工作。这个时候就必须要把家里的电脑和公司
      
    
    </summary>
    
      <category term="博客编写" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99/"/>
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Stub简介</title>
    <link href="http://yoursite.com/2018/11/28/Stub%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2018/11/28/Stub简介/</id>
    <published>2018-11-28T08:37:00.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Stub 本意是指桩，具体含义如下：</p><ul><li>n. 存根；烟蒂；树桩；断株</li><li>vt. 踩熄；连根拔除</li><li>n. (Stub)人名；(挪、瑞典)斯图布</li></ul><p>在计算机语言中指<a href="https://zh.wikipedia.org/wiki/桩_(计算机)" target="_blank" rel="noopener">维基百科</a>。</p><p>桩[1]（Stub / Method Stub）是指用来替换一部分功能的程序段。桩程序可以用来模拟已有程序的行为（比如一个远端机器的过程）或是对将要开发的代码的一种临时替代。因此，打桩技术在程序移植、分布式计算、通用软件开发和测试中用处很大。</p><p>以下是桩程序的一个例子（伪码）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">    Temperature = ThermometerRead(Outside)</span><br><span class="line">    IF Temperature &gt; 40 THEN</span><br><span class="line">         PRINT &quot;It&apos;s HOT!&quot;</span><br><span class="line">    END IF</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">BEGIN ThermometerRead(Source insideOrOutside)</span><br><span class="line">     RETURN 28</span><br><span class="line">END ThermometerRead</span><br></pre></td></tr></table></figure><p>上例中的伪码调用了 ThermometerRead函数，其返回一个温度。由于ThermometerRead需要去读取硬件设备，而这个函数现在还没能开发完成，不能正常工作。ThermometerRead只是简单的返回了一个合理的值，这样主程序就能正常调用这个函数，并继续接下来的开发了。可以注意到，虽然它接受了一个Source类型的参数，表明需要返回的温度是内部还是外部的，实际上并没有对这个参数进行任何使用。</p><p>桩程序是一段并不执行任何实际功能的程序，只对接受的参数进行声明并返回一个合法值。这个返回值通常只是一个对于调用者来讲可接受的值即可。桩通常用在对一个已有接口的临时替换上，实际的接口程序在未来再对桩程序进行替换。</p><p>在远程方法调用（RMI）中将客户辅助对象称之为Stub（桩）；将服务辅助对象称之为skeleton[2]（骨架）。</p><p>RMI的过程是：客户对象一旦被调用，客户对象调用stub，stub调用网络远端的skeleton，而skeleton最终调用真正的服务对象。由此，在调用客户对象的时候，感觉上就是直接调用了真正的服务对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Stub 本意是指桩，具体含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n. 存根；烟蒂；树桩；断株&lt;/li&gt;
&lt;li&gt;vt. 踩熄；连根拔除&lt;/li&gt;
&lt;li&gt;n. (Stub)人名；(挪、瑞典)斯图布&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在计算机语言中指&lt;a href=&quot;https:/
      
    
    </summary>
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go程序设计语言(The Go Programming Language)</title>
    <link href="http://yoursite.com/2018/07/23/Go%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80-The-Go-Programming-Language/"/>
    <id>http://yoursite.com/2018/07/23/Go程序设计语言-The-Go-Programming-Language/</id>
    <published>2018-07-23T15:27:02.000Z</published>
    <updated>2019-08-03T08:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第2章-程序结构"><a href="#第2章-程序结构" class="headerlink" title="第2章 程序结构"></a>第2章 程序结构</h4><h5 id="2-1-名称"><a href="#2-1-名称" class="headerlink" title="2.1 名称"></a>2.1 名称</h5><ul><li><p>Go通过首字母的大小写来决定是否包外可见，大写代表可以被包外引用，小写意味着只能包内使用</p></li><li><p>Go使用驼峰命名的方式，不使用小写+下划线的方式</p></li><li><p>Go中，名称的作用域越大，使用越长且更有意义的名称</p></li></ul><h5 id="2-2-声明"><a href="#2-2-声明" class="headerlink" title="2.2 声明"></a>2.2 声明</h5><ul><li>var 变量</li><li>const 常量</li><li>type 类型</li><li>func 函数</li></ul><h5 id="2-3-变量"><a href="#2-3-变量" class="headerlink" title="2.3 变量"></a>2.3 变量</h5><p>var 声明创建一个具体类型的变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var name type = expression</span><br></pre></td></tr></table></figure><p>类型和表达式可以省略一个，省略类型自动根据表达式推导类型，省略表达式则变量取默认值（数字为0，布尔型为FALSE，字符串为””，接口和引用类型(slice、指针、map、通道、函数为nil)，数组或结构体这样的符合类型，零值是所有元素或成员的零值）</p><h6 id="2-3-1-短变量声明"><a href="#2-3-1-短变量声明" class="headerlink" title="2.3.1 短变量声明"></a>2.3.1 短变量声明</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i, j := 0,1</span><br><span class="line">i,j = j, i</span><br><span class="line">i:= 1</span><br></pre></td></tr></table></figure><h5 id="2-3-2-指针"><a href="#2-3-2-指针" class="headerlink" title="2.3.2 指针"></a>2.3.2 指针</h5><p>变量是存储值的地方</p><p>指针的值是一个变量的地址。一个指针指示值所保存的位置。不是所有的值都有地址，但是所有的变量都有。使用指针可以在不知道变量名的情况下间接更新或者使用变量的值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第2章-程序结构&quot;&gt;&lt;a href=&quot;#第2章-程序结构&quot; class=&quot;headerlink&quot; title=&quot;第2章 程序结构&quot;&gt;&lt;/a&gt;第2章 程序结构&lt;/h4&gt;&lt;h5 id=&quot;2-1-名称&quot;&gt;&lt;a href=&quot;#2-1-名称&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://yoursite.com/tags/Go/"/>
    
  </entry>
  
</feed>
