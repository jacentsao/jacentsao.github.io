<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silence of Heart</title>
  <subtitle>最怕彷徨无前</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-08T14:27:00.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JacenTsao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spinner在某些机型上面无法收到第一次回掉的监听</title>
    <link href="http://yoursite.com/2017/04/08/Spinner%E5%9C%A8%E6%9F%90%E4%BA%9B%E6%9C%BA%E5%9E%8B%E4%B8%8A%E9%9D%A2%E6%97%A0%E6%B3%95%E6%94%B6%E5%88%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%9B%9E%E6%8E%89%E7%9A%84%E7%9B%91%E5%90%AC/"/>
    <id>http://yoursite.com/2017/04/08/Spinner在某些机型上面无法收到第一次回掉的监听/</id>
    <published>2017-04-08T14:22:16.000Z</published>
    <updated>2017-04-08T14:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近碰到一个很奇怪的问题，同样的一组数据在不同的手机上面显示就是不一样。通过debug发现，在一些手机上，给Spinner设置默认值的时候并不会触发它的监听回掉，而在某些机型上面又是会触发的。所以需要给第一次回掉加一个flag，默认阻止第一次回掉的后续逻辑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近碰到一个很奇怪的问题，同样的一组数据在不同的手机上面显示就是不一样。通过debug发现，在一些手机上，给Spinner设置默认值的时候并不会触发它的监听回掉，而在某些机型上面又是会触发的。所以需要给第一次回掉加一个flag，默认阻止第一次回掉的后续逻辑。&lt;/p&gt;

    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="BUG修复" scheme="http://yoursite.com/tags/BUG%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>Volley中出现的java.io.InterruptedIOException: thread interrupted</title>
    <link href="http://yoursite.com/2017/04/08/Volley%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84java-io-InterruptedIOException-thread-interrupted/"/>
    <id>http://yoursite.com/2017/04/08/Volley中出现的java-io-InterruptedIOException-thread-interrupted/</id>
    <published>2017-04-08T13:22:45.000Z</published>
    <updated>2017-04-08T14:09:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近碰到一个很奇怪的现象，就是我们的app在启东的时候第一次请求接口的时候很容易出现请求失败的现象，尤其是在清理掉缓存重新安装的时候。由于这个接口是访问的localhost，而这个localhost是我们自己在本地启用的一个服务。所以导致了我一开始就走进了一个死牛角尖，怀疑是不是这个服务没有运行起来，导致无法访问本地服务器，钻了死角。</p>
<p>后面通过查找资料发现，Volley在使用的时候通过RequestQueue添加一个Request是后如果再次调用了RequestQueue的start()方法就会出现这种问题。<a href="http://stackoverflow.com/questions/31158858/random-com-android-volley-noconnection-error-java-io-interruptedioexception-st" target="_blank" rel="external">参考资料</a>，来自stackoverflow。</p>
<a id="more"></a>
<pre><code>public static RequestQueue newRequestQueue(Context context, HttpStack stack) {
    File cacheDir = new File(context.getCacheDir(), DEFAULT_CACHE_DIR);

    String userAgent = &quot;volley/0&quot;;
    try {
        String packageName = context.getPackageName();
        PackageInfo info = context.getPackageManager().getPackageInfo(packageName, 0);
        userAgent = packageName + &quot;/&quot; + info.versionCode;
    } catch (NameNotFoundException e) {
    }

    if (stack == null) {
        if (Build.VERSION.SDK_INT &gt;= 9) {
            stack = new HurlStack();
        } else {
            // Prior to Gingerbread, HttpUrlConnection was unreliable.
            // See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html
            stack = new HttpClientStack(AndroidHttpClient.newInstance(userAgent));
        }
    }

    Network network = new BasicNetwork(stack);

    RequestQueue queue = new RequestQueue(new DiskBasedCache(cacheDir), network);
    queue.start();

    return queue;    
}
</code></pre><p>当使用RequestQueue的Start()方法的时候，Volley会调用stop方法确保所有的请求都是停止状态。</p>
<pre><code>public void stop() {
    if (mCacheDispatcher != null) {
        mCacheDispatcher.quit();
    }
    for (int i = 0; i &lt; mDispatchers.length; i++) {
        if (mDispatchers[i] != null) {
            mDispatchers[i].quit();
        }
    }
}        
</code></pre><p>在stop()方法中调用了quit()方法：</p>
<pre><code>public void stop() {
    if (mCacheDispatcher != null) {
        mCacheDispatcher.quit();
    }
    for (int i = 0; i &lt; mDispatchers.length; i++) {
        if (mDispatchers[i] != null) {
            mDispatchers[i].quit();
        }
    }
}    
</code></pre><p>最终我们来到了这里，这就是我们为什么会出现thread被interrupte的原因，所以我们在使用RequestQueue的时候是不能调用Start()方法的。</p>
<pre><code>public void interrupt() {
    // Interrupt this thread before running actions so that other
    // threads that observe the interrupt as a result of an action
    // will see that this thread is in the interrupted state.
    nativeInterrupt();

    synchronized (interruptActions) {
        for (int i = interruptActions.size() - 1; i &gt;= 0; i--) {
            interruptActions.get(i).run();
        }
    }
}    
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近碰到一个很奇怪的现象，就是我们的app在启东的时候第一次请求接口的时候很容易出现请求失败的现象，尤其是在清理掉缓存重新安装的时候。由于这个接口是访问的localhost，而这个localhost是我们自己在本地启用的一个服务。所以导致了我一开始就走进了一个死牛角尖，怀疑是不是这个服务没有运行起来，导致无法访问本地服务器，钻了死角。&lt;/p&gt;
&lt;p&gt;后面通过查找资料发现，Volley在使用的时候通过RequestQueue添加一个Request是后如果再次调用了RequestQueue的start()方法就会出现这种问题。&lt;a href=&quot;http://stackoverflow.com/questions/31158858/random-com-android-volley-noconnection-error-java-io-interruptedioexception-st&quot;&gt;参考资料&lt;/a&gt;，来自stackoverflow。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="BUG修复" scheme="http://yoursite.com/tags/BUG%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>IPC传递数据的大小限制</title>
    <link href="http://yoursite.com/2017/04/08/IPC%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6/"/>
    <id>http://yoursite.com/2017/04/08/IPC传递数据的大小限制/</id>
    <published>2017-04-08T13:12:40.000Z</published>
    <updated>2017-04-08T13:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近碰到一个用户在使用app的某个功能的时候老是出现闪退情况，但是又没有别的用户反馈过这个问题。所以找用户拿数据过来看了一下，借过还真是用户的数据比较特殊：</p>
<p>用户在A界面传递一个LIST的对象到B界面，一个正常的使用Intent携带数据的情况，结果出现了闪退的情况。通过日志发现是：</p>
<pre><code>android.os.TransactionTooLargeException: data parcel size 4915644 bytes
</code></pre><p>然后查阅资料发现，现在的IPC机制其实是对传递的数据有大小限制的，一般来说是1MB，而我们传递的List中有483个对象，累积下来的大小远远超过1MB，故出现了这种问题。同样的如果我们传递一个Bitmap大小超过这个限制也会出现这种问题，所以我们在开发中要注意这些问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近碰到一个用户在使用app的某个功能的时候老是出现闪退情况，但是又没有别的用户反馈过这个问题。所以找用户拿数据过来看了一下，借过还真是用户的数据比较特殊：&lt;/p&gt;
&lt;p&gt;用户在A界面传递一个LIST的对象到B界面，一个正常的使用Intent携带数据的情况，结果出现了闪退的
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="BUG修复" scheme="http://yoursite.com/tags/BUG%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>sql学习</title>
    <link href="http://yoursite.com/2017/03/20/sql%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/03/20/sql学习/</id>
    <published>2017-03-20T12:53:53.000Z</published>
    <updated>2017-03-20T13:25:31.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>left join是以左表为准的，right join以右表为准，inner join不以谁为准，以条件为准</li>
<li>on条件是在生成临时表时使用的条件，它不管on中的条件是否为真，都会返回左边表中的记录。where条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有left join的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</li>
<li>primary key(id, name) 复合主键，所有参数一致，才认为是一个相同的主键</li>
<li>CREATE INDEX 语句用于在表中创建索引。在不读取整个表的情况下，索引使数据库应用程序可以更快地查找数据。更新一个包含索引的表需要比更新一个没有索引的表更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;left join是以左表为准的，right join以右表为准，inner join不以谁为准，以条件为准&lt;/li&gt;
&lt;li&gt;on条件是在生成临时表时使用的条件，它不管on中的条件是否为真，都会返回左边表中的记录。where条件是在临时表生成好后，再对临时表进
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>MVP模式学习</title>
    <link href="http://yoursite.com/2017/03/17/MVP%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/03/17/MVP模式学习/</id>
    <published>2017-03-17T01:31:11.000Z</published>
    <updated>2017-03-18T11:00:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>MVP模式是基于MVC模式在Android上面的一个变种，可以参考谷歌的官方架构项目<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">Android-Architecture</a>。在 MVC 模式中，Activity 应该是属于 View 这一层。而实质上，它既承担了 View，同时也包含一些 Controller 的东西在里面。这对于开发与维护来说不太友好，耦合度大高了。把 Activity 的 View 和 Controller 抽离出来就变成了 View 和 Presenter，这就是 MVP 模式。</p>
<p>View只负责处理视图状态<br>Presenter处理逻辑<br>Contract 连接View和Presenter</p>
<p>针对各个界面：</p>
<pre><code>public interface BasePresenter {

    void subscribe();

    void unsubscribe();

}

public interface BaseView&lt;T&gt; {

    void setPresenter(T presenter);

}




public interface AddEditTaskContract {

    interface View extends BaseView&lt;Presenter&gt; {

        void showEmptyTaskError();

        void showTasksList();

        void setTitle(String title);

        void setDescription(String description);

        boolean isActive();
    }

    interface Presenter extends BasePresenter {

        void saveTask(String title, String description);

        void populateTask();

        boolean isDataMissing();
    }
}


    public class AddEditTaskPresenter implements AddEditTaskContract.Presenter {

    @NonNull
    private final TasksDataSource mTasksRepository;

    @NonNull
    private final AddEditTaskContract.View mAddTaskView;

    @NonNull
    private final BaseSchedulerProvider mSchedulerProvider;

    @Nullable
    private String mTaskId;

    private boolean mIsDataMissing;

    @NonNull
    private CompositeSubscription mSubscriptions;

    /**
     * Creates a presenter for the add/edit view.
     *
     * @param taskId                 ID of the task to edit or null for a new task
     * @param tasksRepository        a repository of data for tasks
     * @param addTaskView            the add/edit view
     * @param shouldLoadDataFromRepo whether data needs to be loaded or not (for config changes)
     */
    public AddEditTaskPresenter(@Nullable String taskId, @NonNull TasksDataSource tasksRepository,
                                @NonNull AddEditTaskContract.View addTaskView, boolean shouldLoadDataFromRepo,
                                @NonNull BaseSchedulerProvider schedulerProvider) {
        mTaskId = taskId;
        mTasksRepository = checkNotNull(tasksRepository);
        mAddTaskView = checkNotNull(addTaskView);
        mIsDataMissing = shouldLoadDataFromRepo;

        mSchedulerProvider = checkNotNull(schedulerProvider, &quot;schedulerProvider cannot be null!&quot;);

        mSubscriptions = new CompositeSubscription();
        mAddTaskView.setPresenter(this);
    }

    @Override
    public void subscribe() {
        if (!isNewTask() &amp;&amp; mIsDataMissing) {
            populateTask();
        }
    }

    @Override
    public void unsubscribe() {
        mSubscriptions.clear();
    }

    @Override
    public void saveTask(String title, String description) {
        if (isNewTask()) {
            createTask(title, description);
        } else {
            updateTask(title, description);
        }
    }

    @Override
    public void populateTask() {
        if (isNewTask()) {
            throw new RuntimeException(&quot;populateTask() was called but task is new.&quot;);
        }
        mSubscriptions.add(mTasksRepository
                .getTask(mTaskId)
                .subscribeOn(mSchedulerProvider.computation())
                .observeOn(mSchedulerProvider.ui())
                .subscribe(
                        // onNext
                        task -&gt; {
                            if (mAddTaskView.isActive()) {
                                mAddTaskView.setTitle(task.getTitle());
                                mAddTaskView.setDescription(task.getDescription());

                                mIsDataMissing = false;
                            }
                        }, // onError
                        __ -&gt; {
                            if (mAddTaskView.isActive()) {
                                mAddTaskView.showEmptyTaskError();
                            }
                        }));
    }

    @Override
    public boolean isDataMissing() {
        return mIsDataMissing;
    }

    private boolean isNewTask() {
        return mTaskId == null;
    }

    private void createTask(String title, String description) {
        Task newTask = new Task(title, description);
        if (newTask.isEmpty()) {
            mAddTaskView.showEmptyTaskError();
        } else {
            mTasksRepository.saveTask(newTask);
            mAddTaskView.showTasksList();
        }
    }

    private void updateTask(String title, String description) {
        if (isNewTask()) {
            throw new RuntimeException(&quot;updateTask() was called but task is new.&quot;);
        }
        mTasksRepository.saveTask(new Task(title, description, mTaskId));
        mAddTaskView.showTasksList(); // After an edit, go back to the list.
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MVP模式是基于MVC模式在Android上面的一个变种，可以参考谷歌的官方架构项目&lt;a href=&quot;https://github.com/googlesamples/android-architecture&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Duplicate files copied in APK META-INF/LICENSE</title>
    <link href="http://yoursite.com/2017/03/15/Duplicate-files-copied-in-APK-META-INF-LICENSE/"/>
    <id>http://yoursite.com/2017/03/15/Duplicate-files-copied-in-APK-META-INF-LICENSE/</id>
    <published>2017-03-15T08:46:54.000Z</published>
    <updated>2017-03-15T08:50:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天使用jackson的时候碰到了如下错误：</p>
<pre><code>Error:Execution failed for task &apos;:app:transformResourcesWithMergeJavaResForDebug&apos;.
&gt; com.android.build.api.transform.TransformException: com.android.builder.packaging.DuplicateFileException: Duplicate files copied in APK META-INF/LICENSE
      File1: /Users/Eveee/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.7.2/8b8310381b690e317f5f0574e9b2dd7034778b4c/jackson-core-2.7.2.jar
      File2: /Users/Eveee/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-annotations/2.7.0/19f42c154ffc689f40a77613bc32caeb17d744e3/jackson-annotations-2.7.0.jar
      File3: /Users/Eveee/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-databind/2.7.2/84ffa765dd258dbab8695963c41308b054f3a1cb/jackson-databind-2.7.2.jarError:Execution failed for task &apos;:app:transformResourcesWithMergeJavaResForDebug&apos;.
&gt; com.android.build.api.transform.TransformException: com.android.builder.packaging.DuplicateFileException: Duplicate files copied in APK META-INF/LICENSE
      File1: /Users/Eveee/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-core/2.7.2/8b8310381b690e317f5f0574e9b2dd7034778b4c/jackson-core-2.7.2.jar
      File2: /Users/Eveee/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-annotations/2.7.0/19f42c154ffc689f40a77613bc32caeb17d744e3/jackson-annotations-2.7.0.jar
      File3: /Users/Eveee/.gradle/caches/modules-2/files-2.1/com.fasterxml.jackson.core/jackson-databind/2.7.2/84ffa765dd258dbab8695963c41308b054f3a1cb/jackson-databind-2.7.2.jar
</code></pre><p>在module的gradle文件中添加如下代码即可:</p>
<pre><code>Android{
    packagingOptions {
            exclude &apos;META-INF/DEPENDENCIES&apos;
            exclude &apos;META-INF/NOTICE&apos;
            exclude &apos;META-INF/LICENSE&apos;
            exclude &apos;META-INF/LICENSE.txt&apos;
            exclude &apos;META-INF/NOTICE.txt&apos;
        }
}      
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天使用jackson的时候碰到了如下错误：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error:Execution failed for task &amp;apos;:app:transformResourcesWithMergeJavaResForDebug&amp;apos;.
&amp;gt; c
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="错误" scheme="http://yoursite.com/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android LeakCanary学习笔记</title>
    <link href="http://yoursite.com/2017/03/13/Android-LeakCanary%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/03/13/Android-LeakCanary学习笔记/</id>
    <published>2017-03-13T08:29:32.000Z</published>
    <updated>2017-03-13T08:30:35.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Andriod" scheme="http://yoursite.com/tags/Andriod/"/>
    
      <category term="内存优化" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio快捷键</title>
    <link href="http://yoursite.com/2017/03/11/Android-Studio%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2017/03/11/Android-Studio快捷键/</id>
    <published>2017-03-11T14:23:30.000Z</published>
    <updated>2017-03-14T11:33:11.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>一般IDE通过option + 方向键对光标进行单词的跳动，java中使用驼峰命名法较多，可以通过勾选 Editor - General - Smart Keys - 勾选Use “CamelHumps” words设置按单词跳动</p>
</li>
<li><p>由于设置了第一条进行单词跳动，双击鼠标的时候我们会发现选中的也只是驼峰命名法单词的其中的一个，所以我们需要取消勾选设置 Editor - General - Honor “CamelHumps” words settings when selecting on double click</p>
</li>
<li><p>Command + shift + e 打开最近编辑的文件，配合Control + tab 键切换文件</p>
</li>
<li><p>Command + e 打开最近文件</p>
</li>
<li><p>Command + o 查找类文件，按两次可以选择 include non-projcet classes </p>
</li>
<li><p>Command + shift + o 查找文件，按两次同样可以选择项目外的文件</p>
</li>
<li><p>Shift 点击两次，搜索所有地方,再点击两次可以同上</p>
</li>
<li><p>Command + [ – 后退   Command +  ] – 前进</p>
</li>
<li><p>Command + shift + 方向键  移动行</p>
</li>
<li><p>option + F7 检查方法是在哪里被引用</p>
</li>
<li><p>Command + B类似于Command + 点击跳转到方法内部，如果是一个方法则检查引用</p>
</li>
<li><p>Command + P获取方法的参数，F1可以选择查看文档</p>
</li>
<li><p>Command + D复制行</p>
</li>
<li><p>alt + 鼠标 多行选择编辑，超极酷炫的小功能，别的文档编辑工具也支持</p>
</li>
<li><p>alt + shift + 鼠标可以创建一个光标，这样子就可以跨行选择了</p>
</li>
<li><p>command + shift + enter行尾补全</p>
<ul>
<li>方法体大括号的添加</li>
<li>行尾分号的添加</li>
<li>自动格式化改行操作等    </li>
</ul>
</li>
<li><p>option + enter 快速生成变量</p>
</li>
<li><p>Command + +/- 展开/折叠代码    </p>
</li>
<li><p>Command + Y 预览代码 </p>
</li>
<li><p>Command + shift + v 查看最近复制的内容</p>
</li>
<li><p>Command + F12 预览一个类的结构    </p>
</li>
<li><p>Control + T 快速重构</p>
</li>
<li><p>Command + J 缩写</p>
</li>
<li><p>Command + 方向键直接跳转到行首或者行尾</p>
</li>
<li><p>Shift + f6 重命名</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;一般IDE通过option + 方向键对光标进行单词的跳动，java中使用驼峰命名法较多，可以通过勾选 Editor - General - Smart Keys - 勾选Use “CamelHumps” words设置按单词跳动&lt;/p&gt;
&lt;/li&gt;
&lt;l
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Android中获取文件的md5值</title>
    <link href="http://yoursite.com/2017/03/11/Android%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84md5%E5%80%BC/"/>
    <id>http://yoursite.com/2017/03/11/Android中获取文件的md5值/</id>
    <published>2017-03-11T08:53:26.000Z</published>
    <updated>2017-03-11T08:54:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Android中获取文件的MD5值，来自CM</p>
<pre><code>/*
 * Copyright (C) 2012 The CyanogenMod Project
 *
 * * Licensed under the GNU GPLv2 license
 *
 * The text of the license can be found in the LICENSE file
 * or at https://www.gnu.org/licenses/gpl-2.0.txt
 */

package com.cyanogenmod.updater.utils;

import android.text.TextUtils;
import android.util.Log;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class MD5 {
    private static final String TAG = &quot;MD5&quot;;

    public static boolean checkMD5(String md5, File updateFile) {
        if (TextUtils.isEmpty(md5) || updateFile == null) {
            Log.e(TAG, &quot;MD5 string empty or updateFile null&quot;);
            return false;
        }

        String calculatedDigest = calculateMD5(updateFile);
        if (calculatedDigest == null) {
            Log.e(TAG, &quot;calculatedDigest null&quot;);
            return false;
        }

        Log.v(TAG, &quot;Calculated digest: &quot; + calculatedDigest);
        Log.v(TAG, &quot;Provided digest: &quot; + md5);

        return calculatedDigest.equalsIgnoreCase(md5);
    }

    public static String calculateMD5(File updateFile) {
        MessageDigest digest;
        try {
            digest = MessageDigest.getInstance(&quot;MD5&quot;);
        } catch (NoSuchAlgorithmException e) {
            Log.e(TAG, &quot;Exception while getting digest&quot;, e);
            return null;
        }

        InputStream is;
        try {
            is = new FileInputStream(updateFile);
        } catch (FileNotFoundException e) {
            Log.e(TAG, &quot;Exception while getting FileInputStream&quot;, e);
            return null;
        }

        byte[] buffer = new byte[8192];
        int read;
        try {
            while ((read = is.read(buffer)) &gt; 0) {
                digest.update(buffer, 0, read);
            }
            byte[] md5sum = digest.digest();
            BigInteger bigInt = new BigInteger(1, md5sum);
            String output = bigInt.toString(16);
            // Fill to 32 chars
            output = String.format(&quot;%32s&quot;, output).replace(&apos; &apos;, &apos;0&apos;);
            return output;
        } catch (IOException e) {
            throw new RuntimeException(&quot;Unable to process file for MD5&quot;, e);
        } finally {
            try {
                is.close();
            } catch (IOException e) {
                Log.e(TAG, &quot;Exception on closing MD5 input stream&quot;, e);
            }
        }
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Android中获取文件的MD5值，来自CM&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/*
 * Copyright (C) 2012 The CyanogenMod Project
 *
 * * Licensed under the GNU GPLv2 license
 *
 
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>uuid通用唯一识别码</title>
    <link href="http://yoursite.com/2017/03/03/uuid%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81/"/>
    <id>http://yoursite.com/2017/03/03/uuid通用唯一识别码/</id>
    <published>2017-03-03T13:11:41.000Z</published>
    <updated>2017-03-11T08:55:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81" target="_blank" rel="external">通用唯一识别码</a>（Universal Unique Identifier简称UUID）是一种软件建构的标准。</p>
<p>UUID的目的，是让分布式系统中的所有元素，都能有唯一的辨识信息，而不需要通过中央控制端来辨识信息的指定。如此依赖，每个人都可以穿件捕鱼其他人冲突的UUID。这样的情况下，就不需要考虑数据库创建时的名称重复问题。目前最广泛应用的UUID，是微软的<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6" target="_blank" rel="external">全局统一标识符</a>（GUID）。</p>
<h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>UUID是由一组32位数的16进制数字所构成，是故UUID理论上的总数为1632=2128，约等于3.4 x 1038。也就是说若每纳秒产生1兆个UUID，要花100亿年才会将所有UUID用完。</p>
<p>UUID的标准型式包含32个16进制数字，以连字号分为五段，形式为8-4-4-4-12的32个字符。示例：</p>
<p>550e8400-e29b-41d4-a716-446655440000</p>
<p>UUID亦可刻意重复以表示同类。例如说微软的COM中，所有组件皆必须实现出IUnknown接口，方法是产生一个代表IUnknown的UUID。无论是程序试图访问组件中的IUnknown接口，或是实现IUnknown接口的组件，只要IUnknown一被使用，皆会被参考至同一个ID：00000000-0000-0000-C000-000000000046。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;通用
    
    </summary>
    
      <category term="计算机基础" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>序列化</title>
    <link href="http://yoursite.com/2017/02/26/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2017/02/26/序列化/</id>
    <published>2017-02-26T12:18:04.000Z</published>
    <updated>2017-02-26T13:13:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Android中我们经常使用到序列化来进行数据传递,比如Intent和Binder,或者将对象持久化到存储设备或者通过网络传输到其他设备的时候.通常我们会有两种方式来实现序列化: 1.Serializable 2.Parcelable </p>
<h5 id="1-Serializable方式实现序列化"><a href="#1-Serializable方式实现序列化" class="headerlink" title="1. Serializable方式实现序列化"></a>1. Serializable方式实现序列化</h5><p>Serializable是java中所提供的一个序列化接口，它是空接口。通常我们可以通过实现Serializable接口来实现序列化，为对象提供标准的序列化和反序列化操作。同时我们注意到在实现该接口的时候我们会有一个long型的serialVersionUID，这个serialVersionUID主要是用于反序列化。如下所示：</p>
<pre><code>public class User implements Serializable {
    private static final long serialVersionUID = 7990301608074625143L;
    public static int GENDAT_FEMALE = 0;
    public static int GENDAT_MALE = 1;
    private String name;

    private int age;

    private int gendar;

    transient //序列化的时候忽略该字段
    private int test;
}
</code></pre><p>以上面的User类为例，将其一个对象写入文件以后再从文件读取：</p>
<pre><code>User user = new User(&quot;Max&quot;, 0, 0, 0);
ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(path));
outputStream.writeObject(user);
outputStream.close();

ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(path));
User reader = (User) inputStream.readObject();
Toast.makeText(this, reader.toString(), Toast.LENGTH_LONG).show();
</code></pre><p>当把对象user写入到文件中的时候，同时会写入对象的serialVersionUID，在从文件中读取对象的时候，    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Android中我们经常使用到序列化来进行数据传递,比如Intent和Binder,或者将对象持久化到存储设备或者通过网络传输到其他设备的时候.通常我们会有两种方式来实现序列化: 1.Serializable 2.Parcelable &lt;/p&gt;
&lt;h5 id=&quot;1-Ser
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android里面的几种倒计时方式</title>
    <link href="http://yoursite.com/2017/02/24/Android%E9%87%8C%E9%9D%A2%E7%9A%84%E5%87%A0%E7%A7%8D%E5%80%92%E8%AE%A1%E6%97%B6%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/02/24/Android里面的几种倒计时方式/</id>
    <published>2017-02-24T13:40:24.000Z</published>
    <updated>2017-02-24T13:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android常见的一些及时方式:TimeTask,CounterDownTimer,Handler.postDelay().a</p>
<ol>
<li>TimeTask </li>
</ol>
<pre><code>final Handler handler = new Handler() {
    public void handleMessage(Message msg) {
        switch (msg.what) {
            case 1:
                if (timerCount &gt; 0) {
                    btnGetVerifyCode.setEnabled(false);
                    btnGetVerifyCode.setText(&quot;重新获取(&quot; + String.valueOf(timerCount) + &quot;s)&quot;);
                    timerCount--;
                } else {
                    btnGetVerifyCode.setEnabled(true);
                    btnGetVerifyCode.setText(&quot;重新获取&quot;);
                    if (task != null) {
                        task.cancel();
                    }
                }
                break;
        }
        super.handleMessage(msg);
    }
    };


class MyTimerTask extends TimerTask {

    @Override
    public void run() {
        Message message = new Message();
        message.what = 1;
        handler.sendMessage(message);
    }
}

    timerCount = 60;
 task = new MyTimerTask();
 timer.schedule(task, 0, 1000); //延时1000ms后执行，1000ms执行一次
</code></pre><ol>
<li><p>CountDownTimer</p>
<pre><code>new CountDownTimer(60000, 1000) {

public void onTick(long millisUntilFinished) {
    mTextField.setText(&quot;seconds remaining: &quot; + millisUntilFinished / 1000);
 }

 public void onFinish() {
     mTextField.setText(&quot;done!&quot;);
 }
  }.start();
</code></pre></li>
<li><p>不做详细说明了</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android常见的一些及时方式:TimeTask,CounterDownTimer,Handler.postDelay().a&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TimeTask &lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;final Handler handler = new
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android下面如何改变文件权限</title>
    <link href="http://yoursite.com/2017/02/24/Android%E4%B8%8B%E9%9D%A2%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2017/02/24/Android下面如何改变文件权限/</id>
    <published>2017-02-24T11:55:40.000Z</published>
    <updated>2017-02-24T11:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何在Android系统下面改变我们的文件权限,实现某些目的:</p>
<pre><code>String command = &quot;chmod 777 &quot; + filePath;
Runtime runtime = Runtime.getRuntime();
runtime.exec(command);
</code></pre><p>如上所示,获取文件的绝对路劲,通过Runtime去执行该文件,777代表可读可写可执行,这里不做更多说明.    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在Android系统下面改变我们的文件权限,实现某些目的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String command = &amp;quot;chmod 777 &amp;quot; + filePath;
Runtime runtime = Runtime.getRuntime()
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>判断Library处于release或者debug模式</title>
    <link href="http://yoursite.com/2017/02/21/%E5%88%A4%E6%96%ADLibrary%E5%A4%84%E4%BA%8Erelease%E6%88%96%E8%80%85debug%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/02/21/判断Library处于release或者debug模式/</id>
    <published>2017-02-21T06:05:30.000Z</published>
    <updated>2017-02-21T06:11:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何在Library中判断是否是release包:</p>
<ol>
<li><p>在Library的gradle文件中添加一个变量标记和设置没有默认发布类型</p>
<pre><code>Android{
        release {
        buildConfigField &quot;boolean&quot;, &quot;RELEASE_MODE&quot;, &quot;true&quot;
        minifyEnabled false
        proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;
        }
        debug {
            buildConfigField &quot;boolean&quot;, &quot;RELEASE_MODE&quot;, &quot;false&quot;
        }

        publishNonDefault true   //设置没有默认发布类型
}
</code></pre></li>
<li><p>在app module的gradle文件中新增对应Library的release依赖和debug依赖</p>
</li>
</ol>
<pre><code>releaseCompile project(path: &apos;:app&apos;, configuration: &apos;release&apos;)
debugCompile project(path: &apos;:app&apos;, configuration: &apos;debug&apos;)    
</code></pre><ol>
<li>在Library中引用</li>
</ol>
<pre><code>if (BuildConfig.RELEASE_MODE == true) {}    
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在Library中判断是否是release包:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在Library的gradle文件中添加一个变量标记和设置没有默认发布类型&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Android{
        release {
        buildCo
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>BaseColumns</title>
    <link href="http://yoursite.com/2017/02/14/BaseColumns/"/>
    <id>http://yoursite.com/2017/02/14/BaseColumns/</id>
    <published>2017-02-14T14:44:07.000Z</published>
    <updated>2017-02-14T14:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>准备开始看Google官方的Android Architecture系列了，一方面是提升代码质量，另一方面是学习一下新的app架构。由于目前项目的代码基本上技术可以归属到上古遗迹之中，所以很有必要学习一下新的东西为未来做准备。</p>
<a id="more"></a>
<p>首先看到的就是在数据库操作方面的一个接口，如下所示：</p>
<pre><code>package android.provider;

public interface BaseColumns
{
    /**
     * The unique ID for a row.
     * &lt;P&gt;Type: INTEGER (long)&lt;/P&gt;
     */
    public static final String _ID = &quot;_id&quot;;

    /**
     * The count of rows in a directory.
     * &lt;P&gt;Type: INTEGER&lt;/P&gt;
     */
    public static final String _COUNT = &quot;_count&quot;;
}
</code></pre><p>这个类主要是配合SQLiteOpenHelper进行Android的数据库管理，_ID做为主键，而_COUNT可以返回数据库行数。典型应用如下所示：</p>
<pre><code>public final class TasksPersistenceContract {

// To prevent someone from accidentally instantiating the contract class,
// give it an empty constructor.
private TasksPersistenceContract() {}

/* Inner class that defines the table contents */
public static abstract class TaskEntry implements BaseColumns {
    public static final String TABLE_NAME = &quot;task&quot;;
    public static final String COLUMN_NAME_ENTRY_ID = &quot;entryid&quot;;
    public static final String COLUMN_NAME_TITLE = &quot;title&quot;;
    public static final String COLUMN_NAME_DESCRIPTION = &quot;description&quot;;
    public static final String COLUMN_NAME_COMPLETED = &quot;completed&quot;;
}
}


//在SQLiteOpenHelper中创建表的语句
   private static final String SQL_CREATE_ENTRIES =
        &quot;CREATE TABLE &quot; + TasksPersistenceContract.TaskEntry.TABLE_NAME + &quot; (&quot; +
                TasksPersistenceContract.TaskEntry._ID + TEXT_TYPE + &quot; PRIMARY KEY,&quot; +
                TasksPersistenceContract.TaskEntry.COLUMN_NAME_ENTRY_ID + TEXT_TYPE + COMMA_SEP +
                TasksPersistenceContract.TaskEntry.COLUMN_NAME_TITLE + TEXT_TYPE + COMMA_SEP +
                TasksPersistenceContract.TaskEntry.COLUMN_NAME_DESCRIPTION + TEXT_TYPE + COMMA_SEP +
                TasksPersistenceContract.TaskEntry.COLUMN_NAME_COMPLETED + BOOLEAN_TYPE +
        &quot; )&quot;;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;准备开始看Google官方的Android Architecture系列了，一方面是提升代码质量，另一方面是学习一下新的app架构。由于目前项目的代码基本上技术可以归属到上古遗迹之中，所以很有必要学习一下新的东西为未来做准备。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Comparator与Comparable的区别</title>
    <link href="http://yoursite.com/2017/02/13/Comparator%E4%B8%8EComparable%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/02/13/Comparator与Comparable的区别/</id>
    <published>2017-02-13T14:06:34.000Z</published>
    <updated>2017-02-13T14:11:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考StackOverFlowp<a href="http://stackoverflow.com/questions/4108604/java-comparable-vs-comparator" target="_blank" rel="external">答案</a>:</p>
<p>Comparable相当于“内部比较器”，而Comparator相当于“外部比较器”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考StackOverFlowp&lt;a href=&quot;http://stackoverflow.com/questions/4108604/java-comparable-vs-comparator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;答案&lt;/a&gt;:
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java时间比较</title>
    <link href="http://yoursite.com/2017/02/13/Java%E6%97%B6%E9%97%B4%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2017/02/13/Java时间比较/</id>
    <published>2017-02-13T13:58:02.000Z</published>
    <updated>2017-02-13T14:04:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>在java中比较两个时间的大小: </p>
<pre><code>DateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
Date start = df.parse(&quot;1991-12-25&quot;);
Date end = df.parse(&quot;1990-12-23&quot;);
int result = start.compareTo(end);
</code></pre><p>如果result &gt; 0 说明 start &gt; end; 如果result &lt; 0，则 start &lt; end;如果result = 0,则 start = end;    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在java中比较两个时间的大小: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DateFormat df = new SimpleDateFormat(&amp;quot;yyyy-MM-dd&amp;quot;);
Date start = df.parse(&amp;quot;1991-12-25&amp;quo
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>互联网协议入门（二）</title>
    <link href="http://yoursite.com/2017/02/06/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/02/06/互联网协议入门（二）/</id>
    <published>2017-02-06T01:54:29.000Z</published>
    <updated>2017-02-06T09:45:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://jacentsao.github.io/2017/02/05/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">上一篇文章</a>分析了互联网的总体构思，从下至上，没一层协议的设计思想。</p>
<p>这是从设计者的角度看问题，今天我想切换到用户的角度，看看用户是如何从上至下，与这些协议互动的。</p>
<a id="more"></a>
<h3 id="互联网协议入门（二）"><a href="#互联网协议入门（二）" class="headerlink" title="互联网协议入门（二）"></a>互联网协议入门（二）</h3><h4 id="七、一个小结"><a href="#七、一个小结" class="headerlink" title="七、一个小结"></a>七、一个小结</h4><p>先对前面的内容，做一个小结。</p>
<p>我们已经知道，网络通信就是交换数据包。电脑A向电脑B发送一个数据包，后则会收到了，回复一个数据包，从而实现两台电脑时间的通信，数据包的结构，基本上是下面这样：</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052913.png" alt="image"></p>
<p>发送这个包，需要知道两个地址：</p>
<ul>
<li>对方的MAC地址</li>
<li>对方的IP地址</li>
</ul>
<p>有了折两个地址，数据包才能准确送到接收者中。但是，前面说过，MAC地址又局限性，如果两台电脑不在同一个局域网，就无法知道对方的MAC地址，必须通过网关转发。</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061101.jpg" alt="image"></p>
<p>上图中，1号电脑要向4号电脑发送一个数据包。它先判断4号电脑是否在同一个子网络，借过发现不是（后文会介绍判断方法），于是就把这个数据包发到网关A。网关A通过路由协议，发现4号电脑位于局域网B，又把数据包发送给网关B，网关B再转发到4号电脑。</p>
<p>1号电脑把数据包发到网关A，必须知道网关A的MAC地址。所以，数据包的目标地址，实际上分成两种情况：</p>
<table>
<thead>
<tr>
<th>场景</th>
<th style="text-align:center">数据包地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>同一个局域网</td>
<td style="text-align:center">对方的MAC地址，对方的IP地址</td>
</tr>
<tr>
<td>不同局域网</td>
<td style="text-align:center">网关的MAC地址，对方的IP地址</td>
</tr>
</tbody>
</table>
<p>发送数据包之前，电脑必须判断对方是否在同一个局域网，然后选择对应的MAC地址。接下来，我们就来看，实际使用中，这个过程是怎么完成的。</p>
<h4 id="八、用户的上网设置"><a href="#八、用户的上网设置" class="headerlink" title="八、用户的上网设置"></a>八、用户的上网设置</h4><h5 id="8-1-静态IP地址"><a href="#8-1-静态IP地址" class="headerlink" title="8.1 静态IP地址"></a>8.1 静态IP地址</h5><p>通常购买了一台电脑后需要做一些设置。有时，管理员（或者ISP）会告诉你下面四个参数，你把它们呢填入操作系统，计算机就能上网了。</p>
<ul>
<li>本机的IP地址</li>
<li>子网掩码</li>
<li>网关的IP地址</li>
<li>DNS的IP地址</li>
</ul>
<p>下图是Windows系统的设置窗口。</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061111.png" alt="image"></p>
<p>这四个参数缺一不可，后文会解释为什么需要知道它们才能上网，由于它们是给定的，计算机每次开机，都回分到同样的IP地址，所以这种状况称作“静态IP地址上网”。</p>
<h5 id="8-2-动态IP地址"><a href="#8-2-动态IP地址" class="headerlink" title="8.2 动态IP地址"></a>8.2 动态IP地址</h5><p>所谓“动态IP地址”，指计算机开机后，会自动分配到一个IP地址，不同认为设定。它使用的协议叫做<a href="https://zh.wikipedia.org/zh/%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">DHCP协议</a></p>
<p>这个协议规定，每一个局域网中，有一台计算机负责管理本网络的所有IP地址，它叫做“DHCP服务器”。新的计算机加入网络，必须向“DHCP服务器”发送一个“DHCP请求”数据包，申请IP地址和相关的网络参数。</p>
<p>前面说过，如果两台计算机在同一个局域网，必须知道对方的MAC地址和IP地址，才能发送数据包。但是，新加入的计算机不知道这两个地址，怎么发送数据包呢？</p>
<p>DHCP协议做了一些巧妙的规定。</p>
<h5 id="8-3-DHCP协议"><a href="#8-3-DHCP协议" class="headerlink" title="8.3 DHCP协议"></a>8.3 DHCP协议</h5><p>首先，它是一种应用层协议，建立在UDP协议之上，所以整个数据包是这样的L</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061102.png" alt="image"></p>
<ol>
<li>最前面的“以太网标头”，设置发出方（本机）的MAC地址和接收方（DHCP服务器）的MAC地址。前者就是本机网卡的MAC地址，后者这时不知道，就填入一个广播地址：FF-FF-FF-FF-FF-FF.</li>
<li>后面的“IP标头”，设置发出方的IP地址和接收方的IP地址。这时，对于这两者，本机都不知道。于是，发出方的IP地址就设为0.0.0.0，接收方地址设置为255.255.255.255。</li>
<li>最后的“UDP标头”，设置发出方的端口和接收方的端口。这一部分是DHCP协议规定好的，发出方是68端口，接收方是67端口。</li>
</ol>
<p>这个数据包构造完成后，就可以发出了。以太网是广播发送，同一个局域网的每台计算机都收到了这个包。因为接收方的MAC地址是FF-FF-FF-FF-FF-FF，看不出是发给谁的，每台接收到这个包的计算机，都必须解析这个包的IP地址，才能确定是不是发给自己的。当看到发送方是0.0.0.0，接收方是255.255.255.255，于是DHCP服务器就知道“这个包是发给我的”，而其他计算机就可以丢弃这个包。</p>
<p>接下来，DHCP服务器读出这个包的数据内容，分配好IP地址，发送会去一个“DHCP响应”数据包。这个响应包的结构也是类似的，以太网标头的MAC地址是双方的网卡地址，IP标头的IP地址是DHCP服务器的IP地址（发出放）和255.255.255.255（接收方），UDP标头的端口是67（发出放）和68（接收方），分配给请求端的IP地址和本网络的具体参数则包含在“数据”部分。</p>
<p>新加入的计算机收到这个响应包，于是就知道了自己的IP地址、子网掩码、网关地址、DNS服务器等等参数。</p>
<h5 id="8-4-上网设置：小结"><a href="#8-4-上网设置：小结" class="headerlink" title="8.4 上网设置：小结"></a>8.4 上网设置：小结</h5><p>这个部分，需要记住的就是一点：不管是“静态IP地址”还是“动态IP地址”，电脑上网的首要步奏，是确定四个参数。这四个参数很重要，值得重复一遍：</p>
<ul>
<li>本机的IP地址</li>
<li>子网掩码</li>
<li>网关的IP地址</li>
<li>DNS的IP地址</li>
</ul>
<p>有了这几个数值，电脑就可以上网“冲浪”了。接下来，我们来看一个实例，当用户访问网页的时候，互联网协议是怎么运作的。</p>
<h4 id="九、一个实例：访问网页"><a href="#九、一个实例：访问网页" class="headerlink" title="九、一个实例：访问网页"></a>九、一个实例：访问网页</h4><h5 id="9-1-本机参数"><a href="#9-1-本机参数" class="headerlink" title="9.1 本机参数"></a>9.1 本机参数</h5><p>我们假定，经过上一节的步奏，用户设置好了自己的网络参数：</p>
<ul>
<li>本机的IP地址：192.168.1.100</li>
<li>子网掩码：255.255.255.0</li>
<li>网关的IP地址：192.168.1.1</li>
<li>DNS的IP地址：8.8.8.8</li>
</ul>
<p>然后他打开浏览器，想要访问Google，在地址栏输入了网址：www.google.com。</p>
<p><a href="http://image.beekka.com/blog/201206/bg2012061103.png" target="_blank" rel="external">http://image.beekka.com/blog/201206/bg2012061103.png</a></p>
<h5 id="9-2-DNS协议"><a href="#9-2-DNS协议" class="headerlink" title="9.2 DNS协议"></a>9.2 DNS协议</h5><p>我们知道，发送数据包，必须知道对方的IP地址。但是，现在，我们知道的网址是www.google.com，不知道它的IP地址。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F" target="_blank" rel="external">DNS协议</a>可以帮助我们，将这个网址转换成IP地址。已知DNS服务器为8.8.8.8，于是我们向这个地址发送一个DNS数据包（53端口）。</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061105.png" alt="image"></p>
<p>然后，DNS服务器做出响应，告诉我们Google的IP地址是172.194.72.105。于是，我们知道了对方的IP地址。</p>
<h5 id="9-3-子网掩码"><a href="#9-3-子网掩码" class="headerlink" title="9.3 子网掩码"></a>9.3 子网掩码</h5><p>接下来，我们要判断，这个IP地址是不是在同一个子网络，这就要用到子网掩码。</p>
<p>已知子网掩码是255.255.255.0，本机用它对自己的IP地址192.168.1.100，做一个二进制的AND运算（两个数位都为1，结果为1，否则为0），计算结果为192.168.1.0；然后对Google的IP地址172.194.72.105也做一个AND运算，计算结果为172.194.72.0。这两个结果不相等，所以结论是，Google与本机不在同一个子网络。</p>
<p>因此，我们要向Google发送数据包，必须通过网关192.168.1.1转发，也就是说，接收方的MAC地址将是网关的MAC地址。</p>
<h5 id="9-4-应用层协议"><a href="#9-4-应用层协议" class="headerlink" title="9.4 应用层协议"></a>9.4 应用层协议</h5><p>浏览网页用的是HTTP协议，它的整个数据包构造是这样的：</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061106.png" alt="image"></p>
<p>HTTP部分的内容，类似于下面这样：</p>
<pre><code>GET / HTTP/1.1
　　Host: www.google.com
　　Connection: keep-alive
　　User-Agent: Mozilla/5.0 (Windows NT 6.1) ......
　　Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
　　Accept-Encoding: gzip,deflate,sdch
　　Accept-Language: zh-CN,zh;q=0.8
　　Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3
　　Cookie: ... ...
　　
</code></pre><p>我们假定这个部分的长度为4960字节，它会被嵌在TCP数据包之中。</p>
<h5 id="9-5-TCP协议"><a href="#9-5-TCP协议" class="headerlink" title="9.5 TCP协议"></a>9.5 TCP协议</h5><p>TCP数据包需要设置端口，接收方（Google）的HTTP端口默认是80，发送方（本机）的端口是一个随机生成的1024-65535之间的整数，假定为51775。</p>
<p>TCP数据包的标头长度为20字节，加上嵌入HTTP的数据包，总长度变为4980字节。</p>
<h5 id="9-6-IP协议"><a href="#9-6-IP协议" class="headerlink" title="9.6 IP协议"></a>9.6 IP协议</h5><p>然后，TCP数据包再嵌入IP数据包。IP数据包需要设置双方的IP地址，这是已知的，发送方是192.168.1.100（本机），接收方是172.194.72.105（Google）。</p>
<p>IP数据包的标头长度为20字节，加上嵌入的TCP数据包，总长度变为5000字节。</p>
<h5 id="9-7-以太网协议"><a href="#9-7-以太网协议" class="headerlink" title="9.7 以太网协议"></a>9.7 以太网协议</h5><p>最后，IP数据包嵌入以太网数据包。以太网数据包需要设置双方的MAC地址，发送方为本机的网卡MAC地址，接收方为网关192.168.1.1的MAC地址（通过ARP协议得到）。</p>
<p>以太网数据包的数据部分，最大长度为1500字节，而现在的IP数据包长度为5000字节。因此，IP数据包必须分割成四个包。因为每个包都有自己的IP标头（20字节），所以四个包的IP数据包的长度分别为1500、1500、1500、560。</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061107.png" alt="image"></p>
<h5 id="9-8-服务器端响应"><a href="#9-8-服务器端响应" class="headerlink" title="9.8 服务器端响应"></a>9.8 服务器端响应</h5><p>经过多个网关的转发，Google的服务器172.194.72.105，收到了这四个以太网数据包。</p>
<p>根据IP标头的序号，Google将四个包拼起来，取出完整的TCP数据包，然后读出里面的”HTTP请求”，接着做出”HTTP响应”，再用TCP协议发回来。</p>
<p>本机收到HTTP响应以后，就可以将网页显示出来，完成一次网络通信。</p>
<p><img src="http://image.beekka.com/blog/201206/bg2012061104.jpg" alt="iamge"></p>
<p>这个例子就到此为止，虽然经过了简化，但它大致上反映了互联网协议的整个通信过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://jacentsao.github.io/2017/02/05/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/&quot;&gt;上一篇文章&lt;/a&gt;分析了互联网的总体构思，从下至上，没一层协议的设计思想。&lt;/p&gt;
&lt;p&gt;这是从设计者的角度看问题，今天我想切换到用户的角度，看看用户是如何从上至下，与这些协议互动的。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>互联网协议入门（一）</title>
    <link href="http://yoursite.com/2017/02/05/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/02/05/互联网协议入门（一）/</id>
    <published>2017-02-05T07:02:41.000Z</published>
    <updated>2017-02-06T09:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文转载自阮一峰的网络日志<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html" target="_blank" rel="external">互联网协议入门</a>.</strong></p>
<p>互联网的核心是一系列的协议,总称为”互联网协议”(Internet Protocol Suite)。它们对电脑如何连接和组网，做出了详尽的规定。理解了这些协议，就理解了互联网的原理。</p>
<a id="more"></a>
<h3 id="互联网入门"><a href="#互联网入门" class="headerlink" title="互联网入门"></a>互联网入门</h3><h4 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h4><h5 id="1-1-五层模型"><a href="#1-1-五层模型" class="headerlink" title="1.1 五层模型"></a>1.1 五层模型</h5><p>互联网的实现，分为很多层次。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。</p>
<p>正常来说，用户接触到的，是最上面的一层，而无法感知到下面的层。要理解互联网，就必须从最下层开始，自下而上理解每一层的功能。</p>
<p>互联网的分层有不同的模型，有<a href="https://zh.wikipedia.org/zh-hans/OSI%E6%A8%A1%E5%9E%8B" target="_blank" rel="external">OSI七层模型</a>,有的分四层<a href="https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F" target="_blank" rel="external">TCP/IP协议簇</a>，按照作者的理解将互联网分为五层。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052902.png" alt="image"></p>
<p>如上图所示，最底下的一层叫做”实体层”（Physical Layer），最上面的一层叫做”应用层”（Application Layer），中间的三层（自下而上）分别是”链接层”（Link Layer）、”网络层”（Network Layer）和”传输层”（Transport Layer）。越下面的层，越靠近硬件；越上面的层，越靠近用户。</p>
<h5 id="1-2-层与协议"><a href="#1-2-层与协议" class="headerlink" title="1.2 层与协议"></a>1.2 层与协议</h5><p>每一层都是为了完成一种功能。为了实现这些功能，就需要大家遵守共同的规则。</p>
<p>大家都遵守的规则，就叫做”协议”（Protocol）。</p>
<p>互联网的每一层，都定义了很多协议。这些协议的总称，就叫做”互联网协议”（Internet Protocol Suite）。它们是互联网的核心，下面介绍每一层的功能，主要是介绍每一层的主要协议。</p>
<h4 id="二、实体层"><a href="#二、实体层" class="headerlink" title="二、实体层"></a>二、实体层</h4><p>从最下层的实体层开始。</p>
<p>电脑要组网，第一件事要干什么？当然是要把电脑连接起来，可以使用光缆、电缆，双绞线，无线网络等等方式。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052903.png" alt="image"></p>
<p><strong>这就叫做”实体层”，它就是把电脑连接起来的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号（电磁波）。</strong></p>
<h4 id="三、链接层"><a href="#三、链接层" class="headerlink" title="三、链接层"></a>三、链接层</h4><h5 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h5><p>单纯的0和1是没有任何意义的，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？</p>
<p><strong>这就是”链接层”的功能，它在”实体层”的上方，确定了0和1的分组方式</strong></p>
<h5 id="3-2-以太网协议"><a href="#3-2-以太网协议" class="headerlink" title="3.2 以太网协议"></a>3.2 以太网协议</h5><p>早期的时候，每家公司都有自己的电信号分组方式。逐渐地，一种叫做”<a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E7%BD%91" target="_blank" rel="external">以太网</a>“（Ethernet）的协议，占据了主导地位。</p>
<p>以太网规定，一组电信号构成一个数据包，叫做”帧”（Frame）。每一帧分成两个部分：标头（Head）和数据（Data）</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052904.png" alt="image"></p>
<p>“标头”包好数据包的一些说明项，比如发送者，接收者，数据类型等等；”数据”则是数据包的具体内容。</p>
<p>“标头”的长度，固定为18字节。”数据”的长度，最短为46字节，最长为1500字节。因此，整个”帧”最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送。</p>
<h5 id="3-3-MAC地址"><a href="#3-3-MAC地址" class="headerlink" title="3.3 MAC地址"></a>3.3 MAC地址</h5><p>上面提到，以太网数据包的”标头”，包含了发送者和接收者的信息。那么，发送者和接收者是如何标识呢？</p>
<p>以太网规定，连入网络的所有设备，都必须具有”网卡”接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做<a href="https://zh.wikipedia.org/wiki/MAC%E5%9C%B0%E5%9D%80" target="_blank" rel="external">MAC地址(Media Access Control Address)</a>。</p>
<p>每块网卡出厂的时候，都有一个全世界独一无二的MAC地址 ，长度是48个二进制位，通常用12个十六进制数表示。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052906.png" alt="image"></p>
<p>前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。有了MAC地址，就可以定位网卡和数据包的路径了。根据Wiki:<strong>(MAC地址共48位（6个字节），以十六进制表示。前24位由IEEE决定如何分配，后24位由实际生产该网络设备的厂商自行指定。<br>)</strong></p>
<h5 id="3-4-广播"><a href="#3-4-广播" class="headerlink" title="3.4 广播"></a>3.4 广播</h5><p>定义地址只是第一步，后面还有更多的步奏。</p>
<p>首先，一块网卡怎么会知道另一块网卡的MAC地址？</p>
<p>答案就是ARP协议，后面将会介绍。以太网数据包必须知道接收方的MAC地址，然后才能发送。</p>
<p>其次，就算有了MAC地址，系统怎样才能吧数据包准确的送到接收方？</p>
<p>答案是以太网采用了一种”原始”的方式，它不是把数据包准确送到接收方，而是向局域网内所有计算机发送，让每台计算机自己判断，是否为接收方。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052907.png" alt="image"></p>
<p>上图中，1号计算机向2号计算机发送一个数据包，同一个局域网的3号、4号、5号计算机都会收到这个包。它们读取这个包的”标头”，找到接收方的MAC地址，然后与自身的MAC地址进行比较，如果两者相同，则接收这个包，做进一步处理，否则就丢弃这个包。这种发送方式叫做”广播”。</p>
<p>有了数据包的定义、网卡的MAC地址、广播的发送方式，”链接层”就可以在多台计算机之间传送数据了。</p>
<h4 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h4><h5 id="4-1-网络层的由来"><a href="#4-1-网络层的由来" class="headerlink" title="4.1 网络层的由来"></a>4.1 网络层的由来</h5><p>以太网协议，依靠MAC地址发送数据。理论上，单单依靠MAC地址，上海的网卡就可以找到洛杉矶的网卡了，技术上是可以实现的。</p>
<p>但是，这样做有一个重大的缺点。以太网采用广播的形式发送数据包，所有成员人手一”包”，不仅效率低，而且局限在发送者所在的网络。也就是说，不同局域网之间，广播是无法送达的。这种设计是合理的，否则互联网上的每一台计算机都会收到所有包，那会引起灾难。</p>
<p>互联网是无数局域网共同组成的一个巨型网络，很难想象上海和洛杉矶的电脑会在同一个局域网，这几乎是不可能的。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052914.png" alt="image"></p>
<p>因此，必须找到一种方法，能够区分哪些MAC地址属于同一个局域网，哪些不是。如果是同一个子网络，就采用广播的形式发送，否则就采用”路由”方式发送。（”路由”的意思，就是指如何向不同的子网络分发数据包）遗憾的是，MAC地址本身无法做到这一点。它只与厂商有关，与所处网络无关。</p>
<p>这就导致了”网络层”的诞生。它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否是属于同一个子网络。这套地址叫做”网络地址”，简称”地址”。</p>
<p>于是，”网络层”出现以后，每台计算机有了两种地址，一种是MAC地址，一种是网络地址。两种地址之间没有任何联系的，MAC地址是绑定在网卡上的，网络地址则是管理员分配的。</p>
<p>网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络的目标网卡。因此，从逻辑上可以判断，必定是先处理网络地址，然后再处理MAC地址。</p>
<h5 id="4-2-IP协议"><a href="#4-2-IP协议" class="headerlink" title="4.2 IP协议"></a>4.2 IP协议</h5><p>规定网络地址的协议，叫做IP协议。它所定义的地址，就被称为IP地址。</p>
<p>目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052908.png" alt="image"></p>
<p>习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。</p>
<p>互联网上的每一条计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位，那么主机部分就是后8位。处于同一个子网络的电脑，它们IP地址的网络部分必须是相同的。</p>
<p>但是，问题在于单单从IP地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从IP地址上是看不出来的。</p>
<p>那么，怎样才能从IP地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数”子网掩码”（subnet mask）。</p>
<p>所谓”子网掩码”，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是<br>11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p>
<p>知道”子网掩码”，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p>
<p>比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。</p>
<p>总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p>
<h5 id="4-3-IP数据包"><a href="#4-3-IP数据包" class="headerlink" title="4.3 IP数据包"></a>4.3 IP数据包</h5><p>根据IP协议发送的数据，叫做IP数据包。不难想象，其中必定包括IP地址信息。</p>
<p>但是前面阿说过，以太网数据包只包含MAC地址，并没有IP地质的栏位。那么是否需要修改数据定义，再添加一个栏位呢？</p>
<p>答案是不需要，我们可以把IP数据包直接放到以太网数据包的”数据”部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及到下层的结构。</p>
<p>具体来说，IP数据包也分为”标头”和”数据”两个部分。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052909.png" alt="image"></p>
<p>“标头”部分主要包括版本、长度、IP地址等信息，”数据”部分则是IP数据包的具体内容。它放进以太网数据包后，以太网数据包就变为了下面这样。    </p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052910.png" alt="image"></p>
<p>IP数据包的”标头”部分的长度为20到60个字节，整个数据包的最大长度为65535字节。因此，理论上一个IP数据包的”数据”部分，最长为65515字节。前面有提到，以太网数据包的”数据”部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成多个以太网数据包，分开发送了。</p>
<h5 id="4-4-ARP协议"><a href="#4-4-ARP协议" class="headerlink" title="4.4 ARP协议"></a>4.4 ARP协议</h5><p>关于”网络层”，还有一点需要说明。</p>
<p>因为IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址。通常情况下，对方的IP地址是已知的，但是我们不知道它的MAC地址。</p>
<p>所以，我们需要一种机制，能够从IP地址取到MAC地址。</p>
<p>这里又分为两种状况。第一种状况，如果两台主机不再同一个子网络，那么事实上没有办法去的对方的MAC地址，只能把数据包传送到两个子网络连接处的”网关”，让网关去处理。（当发送主机和目的主机不在同一个局域网中时，即便知道目的主机的MAC地址，两者也不能直接通信，必须经过路由转发才可以。所以此时，发送主机通过ARP协议获得的将不是目的主机的真实MAC地址，而是一台可以通往局域网外的路由器的MAC地址。于是此后发送主机发往目的主机的所有帧，都将发往该路由器，通过它向外发送。）</p>
<p>第二种情况，如果两台主机在同一个子网络，那么我们可以用ARP协议<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">地址解析协议Address Resolution Protocol</a>（注意：在IPv6中已经被<a href="https://zh.wikipedia.org/wiki/%E9%82%BB%E5%B1%85%E5%8F%91%E7%8E%B0%E5%8D%8F%E8%AE%AE" target="_blank" rel="external">邻居发现协议（Neighbor Discovery Protocol）</a>），去的对方的MAC地址。ARP协议也是发出一个数据包（包含在以太网数据包中），其中包含它所要查询诸暨的IP地址，在对方的MAC地址这一栏，填的是FF:FF:FF:FF:FF:FF，表示这是一个”广播”地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。</p>
<p>总之，有了ARP协议以后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了。</p>
<h4 id="五、传输层"><a href="#五、传输层" class="headerlink" title="五、传输层"></a>五、传输层</h4><h5 id="5-1-传输层的由来"><a href="#5-1-传输层的由来" class="headerlink" title="5.1 传输层的由来"></a>5.1 传输层的由来</h5><p>有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上简历通信。</p>
<p>接下来的问题是，同一台主机上又许多程序都需要用到网络。比如，你一边浏览网页，一边与朋友在线聊天，当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是在线聊天的内容？</p>
<p>也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做”端口”，它其实是没一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能读取到自己所需要的数据。</p>
<p>“端口”是0到65535之间的一个整数，正好是16个二进制位。0到1023的端口被系统占用，用户只能选择大于1023的端口，不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口通信。</p>
<p><strong>“传输层”的功能，就是简历“端口到端口”的通信。只有确定主机和端口，我们就能实现程序之间的交流。</strong>因此，Unix系统就把主机+端口，叫做“套接字”（Socket）。有了它，就可以进行网络应用程序的开发了。</p>
<h5 id="5-2-UDP协议"><a href="#5-2-UDP协议" class="headerlink" title="5.2 UDP协议"></a>5.2 UDP协议</h5><p>现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。</p>
<p>UDP数据包，也是由“标头”和“数据”两部分组成。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052911.png" alt="image"></p>
<p>“标头”部分主要是定义了发出端口和接收端口，“数据”部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的“数据”部分，而前面说过，IP数据包又是放在以太网数据包中，所以整个以太网数据包就变成了下面这样：<br><img src="http://image.beekka.com/blog/201205/bg2012052912.png" alt="image"></p>
<p>UDP数据包非常简单，“标头”部分一共只有8个字节，总长度不超过65535字节，正好放进一个IP数据包。</p>
<h5 id="5-3-TCP协议"><a href="#5-3-TCP协议" class="headerlink" title="5.3 TCP协议"></a>5.3 TCP协议</h5><p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。</p>
<p>为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似人为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失。就收不到确认，发出放就知道有必要重发这个数据包了。</p>
<p>因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。</p>
<p>TCP数据包和UDP数据包一样，都是内嵌在IP数据包的“数据”部分。TCP数据包没有长度限制，理论上可以无现场，但是为了保证网络效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p>
<h4 id="六、应用层"><a href="#六、应用层" class="headerlink" title="六、应用层"></a>六、应用层</h4><p>应用程序收到“传输层”的数据，接下来就要进行解毒。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。</p>
<p><strong>“应用层”的作用，就是规定应用程序的数据格式</strong></p>
<p>举例来说，TCP协议可以为各种各样的陈旭传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了“应用层”。</p>
<p>这是最高的一层，直接面对用户。它的数据就放在TCP数据包的“数据”部分。因此，现在的以太网的数据包就变成下面这样。</p>
<p><img src="http://image.beekka.com/blog/201205/bg2012052913.png" alt="image"></p>
<p>至此，整个互联网的五层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的。<a href="https://jacentsao.github.io/2017/02/06/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E5%85%A5%E9%97%A8%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="external">下一篇</a>，我反过来，从用户的角度，自上而下看看这个结构是如何发挥作用，完成一次网络数据交换的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文转载自阮一峰的网络日志&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html&quot;&gt;互联网协议入门&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;互联网的核心是一系列的协议,总称为”互联网协议”(Internet Protocol Suite)。它们对电脑如何连接和组网，做出了详尽的规定。理解了这些协议，就理解了互联网的原理。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="计算机基础" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>go语言中的fmt包学习</title>
    <link href="http://yoursite.com/2017/01/29/go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84fmt%E5%8C%85%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/01/29/go语言中的fmt包学习/</id>
    <published>2017-01-29T02:55:38.000Z</published>
    <updated>2017-01-29T03:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="go-doc-fmt-list-all-the-data-below"><a href="#go-doc-fmt-list-all-the-data-below" class="headerlink" title="go doc fmt list all the data below"></a>go doc fmt list all the data below</h3><h4 id="print"><a href="#print" class="headerlink" title="print"></a>print</h4><p>The verbs:</p>
<p>General:</p>
<pre><code>%v    the value in a default format
    when printing structs, the plus flag (%+v) adds field names
%#v    a Go-syntax representation of the value
%T    a Go-syntax representation of the type of the value
%%    a literal percent sign; consumes no value
</code></pre><p>Boolean:</p>
<pre><code>%t    the word true or false
</code></pre><p>Integer:</p>
<pre><code>%b    base 2
%c    the character represented by the corresponding Unicode code point
%d    base 10
%o    base 8
%q    a single-quoted character literal safely escaped with Go syntax.
%x    base 16, with lower-case letters for a-f
%X    base 16, with upper-case letters for A-F
%U    Unicode format: U+1234; same as &quot;U+%04X&quot;
</code></pre><p>Floating-point and complex constituents:</p>
<pre><code>%b    decimalless scientific notation with exponent a power of two,
    in the manner of strconv.FormatFloat with the &apos;b&apos; format,
    e.g. -123456p-78
%e    scientific notation, e.g. -1.234456e+78
%E    scientific notation, e.g. -1.234456E+78
%f    decimal point but no exponent, e.g. 123.456
%F    synonym for %f
%g    %e for large exponents, %f otherwise
%G    %E for large exponents, %F otherwise
</code></pre><p>String and slice of bytes (treated equivalently with these verbs):</p>
<pre><code>%s    the uninterpreted bytes of the string or slice
%q    a double-quoted string safely escaped with Go syntax
%x    base 16, lower-case, two characters per byte
%X    base 16, upper-case, two characters per byte
</code></pre><p>Pointer:</p>
<pre><code>%p    base 16 notation, with leading 0x
</code></pre><p>There is no ‘u’ flag. Integers are printed unsigned if they have unsigned<br>type. Similarly, there is no need to specify the size of the operand (int8,<br>int64).</p>
<p>The default format for %v is:</p>
<pre><code>bool:                    %t
int, int8 etc.:          %d
uint, uint8 etc.:        %d, %x if printed with %#v
float32, complex64, etc: %g
string:                  %s
chan:                    %p
pointer:                 %p
</code></pre><p>Control width and precision:</p>
<pre><code> %f     default width, default precision
%9f    width 9, default precision
%.2f   default width, precision 2
%9.2f  width 9, precision 2
%9.f   width 9, precision 0
</code></pre><h4 id="一些小区别"><a href="#一些小区别" class="headerlink" title="一些小区别"></a>一些小区别</h4><p>函数 fmt.Sprintf 与 Printf 的作⽤是完全相同的，不过前者将格式化后的字符串以返 回值的形式返回给调⽤者，因此你可以在程序中使⽤包含变量的字符串</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;go-doc-fmt-list-all-the-data-below&quot;&gt;&lt;a href=&quot;#go-doc-fmt-list-all-the-data-below&quot; class=&quot;headerlink&quot; title=&quot;go doc fmt list all the 
    
    </summary>
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
</feed>
